travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: dc653aa4-9602-46d7-8f01-f8bc3b95e877@1.production-2-worker-org-gce-526c
version: v6.2.0 https://github.com/travis-ci/worker/tree/5e5476e01646095f48eec13196fdb3faf8f5cbf7
instance: travis-job-001d9562-27b1-4b90-9379-f186a696bafb travis-ci-amethyst-trusty-1512508224-986baf0 (via amqp)
startup: 6.544243054s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: rust
Build group: stable
Build dist: trusty
Build id: 562114003
Job id: 562114004
Runtime kernel version: 4.4.0-101-generic
travis-build version: 24c88d12b
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 21:46:03 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:38 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:41:20 2017
 OS/Arch:      linux/amd64
 Experimental: false
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	10.240.0.24/255.255.255.255
	172.17.0.1/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mkerl list installations[0m
19.0
18.3
[34m[1mkiex list[0m

kiex elixirs

   elixir-1.2.6
=* elixir-1.3.2

# => - current
# =* - current && default
#  * - default

[34m[1mrebar --version[0m
rebar 2.6.4 17 20160831_145136 git 2.6.4-dirty
[34m[1mperlbrew list[0m
  5.22 (5.22.0)
  5.22.0
  5.22-extras (5.22.4)
  5.22-shrplib (5.22.4)
  5.22.4
  5.24 (5.24.0)
  5.24.0
  5.24-extras (5.24.3)
  5.24-shrplib (5.24.3)
  5.24.3
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Kdocker stop/waiting
docker start/running, process 3615
travis_fold:end:docker_mtu[0Ktravis_fold:start:resolvconf[0Kresolvconf stop/waiting
resolvconf start/running
travis_fold:end:resolvconf[0Ktravis_fold:start:services[0Ktravis_time:start:00cad800[0K$ sudo service docker start
start: Job is already running: docker
travis_time:end:00cad800:start=1563803725092082228,finish=1563803725105012103,duration=12929875[0Ktravis_fold:end:services[0K
travis_fold:start:git.checkout[0Ktravis_time:start:223cc18b[0K$ git clone --depth=1 https://github.com/jwilm/alacritty.git jwilm/alacritty
Cloning into 'jwilm/alacritty'...
remote: Enumerating objects: 274, done.[K
remote: Counting objects:   0% (1/274)   [Kremote: Counting objects:   1% (3/274)   [Kremote: Counting objects:   2% (6/274)   [Kremote: Counting objects:   3% (9/274)   [Kremote: Counting objects:   4% (11/274)   [Kremote: Counting objects:   5% (14/274)   [Kremote: Counting objects:   6% (17/274)   [Kremote: Counting objects:   7% (20/274)   [Kremote: Counting objects:   8% (22/274)   [Kremote: Counting objects:   9% (25/274)   [Kremote: Counting objects:  10% (28/274)   [Kremote: Counting objects:  11% (31/274)   [Kremote: Counting objects:  12% (33/274)   [Kremote: Counting objects:  13% (36/274)   [Kremote: Counting objects:  14% (39/274)   [Kremote: Counting objects:  15% (42/274)   [Kremote: Counting objects:  16% (44/274)   [Kremote: Counting objects:  17% (47/274)   [Kremote: Counting objects:  18% (50/274)   [Kremote: Counting objects:  19% (53/274)   [Kremote: Counting objects:  20% (55/274)   [Kremote: Counting objects:  21% (58/274)   [Kremote: Counting objects:  22% (61/274)   [Kremote: Counting objects:  23% (64/274)   [Kremote: Counting objects:  24% (66/274)   [Kremote: Counting objects:  25% (69/274)   [Kremote: Counting objects:  26% (72/274)   [Kremote: Counting objects:  27% (74/274)   [Kremote: Counting objects:  28% (77/274)   [Kremote: Counting objects:  29% (80/274)   [Kremote: Counting objects:  30% (83/274)   [Kremote: Counting objects:  31% (85/274)   [Kremote: Counting objects:  32% (88/274)   [Kremote: Counting objects:  33% (91/274)   [Kremote: Counting objects:  34% (94/274)   [Kremote: Counting objects:  35% (96/274)   [Kremote: Counting objects:  36% (99/274)   [Kremote: Counting objects:  37% (102/274)   [Kremote: Counting objects:  38% (105/274)   [Kremote: Counting objects:  39% (107/274)   [Kremote: Counting objects:  40% (110/274)   [Kremote: Counting objects:  41% (113/274)   [Kremote: Counting objects:  42% (116/274)   [Kremote: Counting objects:  43% (118/274)   [Kremote: Counting objects:  44% (121/274)   [Kremote: Counting objects:  45% (124/274)   [Kremote: Counting objects:  46% (127/274)   [Kremote: Counting objects:  47% (129/274)   [Kremote: Counting objects:  48% (132/274)   [Kremote: Counting objects:  49% (135/274)   [Kremote: Counting objects:  50% (137/274)   [Kremote: Counting objects:  51% (140/274)   [Kremote: Counting objects:  52% (143/274)   [Kremote: Counting objects:  53% (146/274)   [Kremote: Counting objects:  54% (148/274)   [Kremote: Counting objects:  55% (151/274)   [Kremote: Counting objects:  56% (154/274)   [Kremote: Counting objects:  57% (157/274)   [Kremote: Counting objects:  58% (159/274)   [Kremote: Counting objects:  59% (162/274)   [Kremote: Counting objects:  60% (165/274)   [Kremote: Counting objects:  61% (168/274)   [Kremote: Counting objects:  62% (170/274)   [Kremote: Counting objects:  63% (173/274)   [Kremote: Counting objects:  64% (176/274)   [Kremote: Counting objects:  65% (179/274)   [Kremote: Counting objects:  66% (181/274)   [Kremote: Counting objects:  67% (184/274)   [Kremote: Counting objects:  68% (187/274)   [Kremote: Counting objects:  69% (190/274)   [Kremote: Counting objects:  70% (192/274)   [Kremote: Counting objects:  71% (195/274)   [Kremote: Counting objects:  72% (198/274)   [Kremote: Counting objects:  73% (201/274)   [Kremote: Counting objects:  74% (203/274)   [Kremote: Counting objects:  75% (206/274)   [Kremote: Counting objects:  76% (209/274)   [Kremote: Counting objects:  77% (211/274)   [Kremote: Counting objects:  78% (214/274)   [Kremote: Counting objects:  79% (217/274)   [Kremote: Counting objects:  80% (220/274)   [Kremote: Counting objects:  81% (222/274)   [Kremote: Counting objects:  82% (225/274)   [Kremote: Counting objects:  83% (228/274)   [Kremote: Counting objects:  84% (231/274)   [Kremote: Counting objects:  85% (233/274)   [Kremote: Counting objects:  86% (236/274)   [Kremote: Counting objects:  87% (239/274)   [Kremote: Counting objects:  88% (242/274)   [Kremote: Counting objects:  89% (244/274)   [Kremote: Counting objects:  90% (247/274)   [Kremote: Counting objects:  91% (250/274)   [Kremote: Counting objects:  92% (253/274)   [Kremote: Counting objects:  93% (255/274)   [Kremote: Counting objects:  94% (258/274)   [Kremote: Counting objects:  95% (261/274)   [Kremote: Counting objects:  96% (264/274)   [Kremote: Counting objects:  97% (266/274)   [Kremote: Counting objects:  98% (269/274)   [Kremote: Counting objects:  99% (272/274)   [Kremote: Counting objects: 100% (274/274)   [Kremote: Counting objects: 100% (274/274), done.[K
remote: Compressing objects:   0% (1/244)   [Kremote: Compressing objects:   1% (3/244)   [Kremote: Compressing objects:   2% (5/244)   [Kremote: Compressing objects:   3% (8/244)   [Kremote: Compressing objects:   4% (10/244)   [Kremote: Compressing objects:   5% (13/244)   [Kremote: Compressing objects:   6% (15/244)   [Kremote: Compressing objects:   7% (18/244)   [Kremote: Compressing objects:   8% (20/244)   [Kremote: Compressing objects:   9% (22/244)   [Kremote: Compressing objects:  10% (25/244)   [Kremote: Compressing objects:  11% (27/244)   [Kremote: Compressing objects:  12% (30/244)   [Kremote: Compressing objects:  13% (32/244)   [Kremote: Compressing objects:  14% (35/244)   [Kremote: Compressing objects:  15% (37/244)   [Kremote: Compressing objects:  16% (40/244)   [Kremote: Compressing objects:  17% (42/244)   [Kremote: Compressing objects:  18% (44/244)   [Kremote: Compressing objects:  19% (47/244)   [Kremote: Compressing objects:  20% (49/244)   [Kremote: Compressing objects:  21% (52/244)   [Kremote: Compressing objects:  22% (54/244)   [Kremote: Compressing objects:  23% (57/244)   [Kremote: Compressing objects:  24% (59/244)   [Kremote: Compressing objects:  25% (61/244)   [Kremote: Compressing objects:  26% (64/244)   [Kremote: Compressing objects:  27% (66/244)   [Kremote: Compressing objects:  28% (69/244)   [Kremote: Compressing objects:  29% (71/244)   [Kremote: Compressing objects:  30% (74/244)   [Kremote: Compressing objects:  31% (76/244)   [Kremote: Compressing objects:  32% (79/244)   [Kremote: Compressing objects:  33% (81/244)   [Kremote: Compressing objects:  34% (83/244)   [Kremote: Compressing objects:  35% (86/244)   [Kremote: Compressing objects:  36% (88/244)   [Kremote: Compressing objects:  37% (91/244)   [Kremote: Compressing objects:  38% (93/244)   [Kremote: Compressing objects:  39% (96/244)   [Kremote: Compressing objects:  40% (98/244)   [Kremote: Compressing objects:  41% (101/244)   [Kremote: Compressing objects:  42% (103/244)   [Kremote: Compressing objects:  43% (105/244)   [Kremote: Compressing objects:  44% (108/244)   [Kremote: Compressing objects:  45% (110/244)   [Kremote: Compressing objects:  46% (113/244)   [Kremote: Compressing objects:  47% (115/244)   [Kremote: Compressing objects:  48% (118/244)   [Kremote: Compressing objects:  49% (120/244)   [Kremote: Compressing objects:  50% (122/244)   [Kremote: Compressing objects:  51% (125/244)   [Kremote: Compressing objects:  52% (127/244)   [Kremote: Compressing objects:  53% (130/244)   [Kremote: Compressing objects:  54% (132/244)   [Kremote: Compressing objects:  55% (135/244)   [Kremote: Compressing objects:  56% (137/244)   [Kremote: Compressing objects:  57% (140/244)   [Kremote: Compressing objects:  58% (142/244)   [Kremote: Compressing objects:  59% (144/244)   [Kremote: Compressing objects:  60% (147/244)   [Kremote: Compressing objects:  61% (149/244)   [Kremote: Compressing objects:  62% (152/244)   [Kremote: Compressing objects:  63% (154/244)   [Kremote: Compressing objects:  64% (157/244)   [Kremote: Compressing objects:  65% (159/244)   [Kremote: Compressing objects:  66% (162/244)   [Kremote: Compressing objects:  67% (164/244)   [Kremote: Compressing objects:  68% (166/244)   [Kremote: Compressing objects:  69% (169/244)   [Kremote: Compressing objects:  70% (171/244)   [Kremote: Compressing objects:  71% (174/244)   [Kremote: Compressing objects:  72% (176/244)   [Kremote: Compressing objects:  73% (179/244)   [Kremote: Compressing objects:  74% (181/244)   [Kremote: Compressing objects:  75% (183/244)   [Kremote: Compressing objects:  76% (186/244)   [Kremote: Compressing objects:  77% (188/244)   [Kremote: Compressing objects:  78% (191/244)   [Kremote: Compressing objects:  79% (193/244)   [Kremote: Compressing objects:  80% (196/244)   [Kremote: Compressing objects:  81% (198/244)   [Kremote: Compressing objects:  82% (201/244)   [Kremote: Compressing objects:  83% (203/244)   [Kremote: Compressing objects:  84% (205/244)   [Kremote: Compressing objects:  85% (208/244)   [Kremote: Compressing objects:  86% (210/244)   [Kremote: Compressing objects:  87% (213/244)   [Kremote: Compressing objects:  88% (215/244)   [Kremote: Compressing objects:  89% (218/244)   [Kremote: Compressing objects:  90% (220/244)   [Kremote: Compressing objects:  91% (223/244)   [Kremote: Compressing objects:  92% (225/244)   [Kremote: Compressing objects:  93% (227/244)   [Kremote: Compressing objects:  94% (230/244)   [Kremote: Compressing objects:  95% (232/244)   [Kremote: Compressing objects:  96% (235/244)   [Kremote: Compressing objects:  97% (237/244)   [Kremote: Compressing objects:  98% (240/244)   [Kremote: Compressing objects:  99% (242/244)   [Kremote: Compressing objects: 100% (244/244)   [Kremote: Compressing objects: 100% (244/244), done.[K
Receiving objects:   0% (1/274)   Receiving objects:   1% (3/274)   Receiving objects:   2% (6/274)   Receiving objects:   3% (9/274)   Receiving objects:   4% (11/274)   Receiving objects:   5% (14/274)   Receiving objects:   6% (17/274)   Receiving objects:   7% (20/274)   Receiving objects:   8% (22/274)   Receiving objects:   9% (25/274)   Receiving objects:  10% (28/274)   Receiving objects:  11% (31/274)   Receiving objects:  12% (33/274)   Receiving objects:  13% (36/274)   Receiving objects:  14% (39/274)   Receiving objects:  15% (42/274)   Receiving objects:  16% (44/274)   Receiving objects:  17% (47/274)   Receiving objects:  18% (50/274)   Receiving objects:  19% (53/274)   Receiving objects:  20% (55/274)   Receiving objects:  21% (58/274)   Receiving objects:  22% (61/274)   Receiving objects:  23% (64/274)   Receiving objects:  24% (66/274)   Receiving objects:  25% (69/274)   Receiving objects:  26% (72/274)   Receiving objects:  27% (74/274)   Receiving objects:  28% (77/274)   Receiving objects:  29% (80/274)   Receiving objects:  30% (83/274)   Receiving objects:  31% (85/274)   Receiving objects:  32% (88/274)   Receiving objects:  33% (91/274)   Receiving objects:  34% (94/274)   Receiving objects:  35% (96/274)   Receiving objects:  36% (99/274)   Receiving objects:  37% (102/274)   Receiving objects:  38% (105/274)   Receiving objects:  39% (107/274)   Receiving objects:  40% (110/274)   Receiving objects:  41% (113/274)   Receiving objects:  42% (116/274)   Receiving objects:  43% (118/274)   Receiving objects:  44% (121/274)   Receiving objects:  45% (124/274)   Receiving objects:  46% (127/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  47% (129/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  48% (132/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  49% (135/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  50% (137/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  51% (140/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  52% (143/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  53% (146/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  54% (148/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  55% (151/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  56% (154/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  57% (157/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  58% (159/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  59% (162/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  60% (165/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  61% (168/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  62% (170/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  63% (173/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  64% (176/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  65% (179/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  66% (181/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  67% (184/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  68% (187/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  69% (190/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  70% (192/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  71% (195/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  72% (198/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  73% (201/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  74% (203/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  75% (206/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  76% (209/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  77% (211/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  78% (214/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  79% (217/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  80% (220/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  81% (222/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  82% (225/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  83% (228/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  84% (231/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  85% (233/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  86% (236/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  87% (239/274), 308.00 KiB | 560.00 KiB/s   remote: Total 274 (delta 41), reused 142 (delta 13), pack-reused 0[K
Receiving objects:  88% (242/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  89% (244/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  90% (247/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  91% (250/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  92% (253/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  93% (255/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  94% (258/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  95% (261/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  96% (264/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  97% (266/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  98% (269/274), 308.00 KiB | 560.00 KiB/s   Receiving objects:  99% (272/274), 308.00 KiB | 560.00 KiB/s   Receiving objects: 100% (274/274), 308.00 KiB | 560.00 KiB/s   Receiving objects: 100% (274/274), 1.26 MiB | 1.89 MiB/s, done.
Resolving deltas:   0% (0/41)   Resolving deltas:   2% (1/41)   Resolving deltas:   4% (2/41)   Resolving deltas:   7% (3/41)   Resolving deltas:   9% (4/41)   Resolving deltas:  12% (5/41)   Resolving deltas:  14% (6/41)   Resolving deltas:  17% (7/41)   Resolving deltas:  46% (19/41)   Resolving deltas:  48% (20/41)   Resolving deltas:  58% (24/41)   Resolving deltas:  60% (25/41)   Resolving deltas:  63% (26/41)   Resolving deltas:  65% (27/41)   Resolving deltas:  68% (28/41)   Resolving deltas:  73% (30/41)   Resolving deltas:  75% (31/41)   Resolving deltas:  78% (32/41)   Resolving deltas:  85% (35/41)   Resolving deltas: 100% (41/41)   Resolving deltas: 100% (41/41), done.
travis_time:end:223cc18b:start=1563803728110694176,finish=1563803730541108578,duration=2430414402[0K$ cd jwilm/alacritty
travis_time:start:1195663d[0K$ git fetch origin +refs/pull/2329/merge:
remote: Enumerating objects: 8267, done.[K
remote: Counting objects:   0% (1/8267)   [Kremote: Counting objects:   1% (83/8267)   [Kremote: Counting objects:   2% (166/8267)   [Kremote: Counting objects:   3% (249/8267)   [Kremote: Counting objects:   4% (331/8267)   [Kremote: Counting objects:   5% (414/8267)   [Kremote: Counting objects:   6% (497/8267)   [Kremote: Counting objects:   7% (579/8267)   [Kremote: Counting objects:   8% (662/8267)   [Kremote: Counting objects:   9% (745/8267)   [Kremote: Counting objects:  10% (827/8267)   [Kremote: Counting objects:  11% (910/8267)   [Kremote: Counting objects:  12% (993/8267)   [Kremote: Counting objects:  13% (1075/8267)   [Kremote: Counting objects:  14% (1158/8267)   [Kremote: Counting objects:  15% (1241/8267)   [Kremote: Counting objects:  16% (1323/8267)   [Kremote: Counting objects:  17% (1406/8267)   [Kremote: Counting objects:  18% (1489/8267)   [Kremote: Counting objects:  19% (1571/8267)   [Kremote: Counting objects:  20% (1654/8267)   [Kremote: Counting objects:  21% (1737/8267)   [Kremote: Counting objects:  22% (1819/8267)   [Kremote: Counting objects:  23% (1902/8267)   [Kremote: Counting objects:  24% (1985/8267)   [Kremote: Counting objects:  25% (2067/8267)   [Kremote: Counting objects:  26% (2150/8267)   [Kremote: Counting objects:  27% (2233/8267)   [Kremote: Counting objects:  28% (2315/8267)   [Kremote: Counting objects:  29% (2398/8267)   [Kremote: Counting objects:  30% (2481/8267)   [Kremote: Counting objects:  31% (2563/8267)   [Kremote: Counting objects:  32% (2646/8267)   [Kremote: Counting objects:  33% (2729/8267)   [Kremote: Counting objects:  34% (2811/8267)   [Kremote: Counting objects:  35% (2894/8267)   [Kremote: Counting objects:  36% (2977/8267)   [Kremote: Counting objects:  37% (3059/8267)   [Kremote: Counting objects:  38% (3142/8267)   [Kremote: Counting objects:  39% (3225/8267)   [Kremote: Counting objects:  40% (3307/8267)   [Kremote: Counting objects:  41% (3390/8267)   [Kremote: Counting objects:  42% (3473/8267)   [Kremote: Counting objects:  43% (3555/8267)   [Kremote: Counting objects:  44% (3638/8267)   [Kremote: Counting objects:  45% (3721/8267)   [Kremote: Counting objects:  46% (3803/8267)   [Kremote: Counting objects:  47% (3886/8267)   [Kremote: Counting objects:  48% (3969/8267)   [Kremote: Counting objects:  49% (4051/8267)   [Kremote: Counting objects:  50% (4134/8267)   [Kremote: Counting objects:  51% (4217/8267)   [Kremote: Counting objects:  52% (4299/8267)   [Kremote: Counting objects:  53% (4382/8267)   [Kremote: Counting objects:  54% (4465/8267)   [Kremote: Counting objects:  55% (4547/8267)   [Kremote: Counting objects:  56% (4630/8267)   [Kremote: Counting objects:  57% (4713/8267)   [Kremote: Counting objects:  58% (4795/8267)   [Kremote: Counting objects:  59% (4878/8267)   [Kremote: Counting objects:  60% (4961/8267)   [Kremote: Counting objects:  61% (5043/8267)   [Kremote: Counting objects:  62% (5126/8267)   [Kremote: Counting objects:  63% (5209/8267)   [Kremote: Counting objects:  64% (5291/8267)   [Kremote: Counting objects:  65% (5374/8267)   [Kremote: Counting objects:  66% (5457/8267)   [Kremote: Counting objects:  67% (5539/8267)   [Kremote: Counting objects:  68% (5622/8267)   [Kremote: Counting objects:  69% (5705/8267)   [Kremote: Counting objects:  70% (5787/8267)   [Kremote: Counting objects:  71% (5870/8267)   [Kremote: Counting objects:  72% (5953/8267)   [Kremote: Counting objects:  73% (6035/8267)   [Kremote: Counting objects:  74% (6118/8267)   [Kremote: Counting objects:  75% (6201/8267)   [Kremote: Counting objects:  76% (6283/8267)   [Kremote: Counting objects:  77% (6366/8267)   [Kremote: Counting objects:  78% (6449/8267)   [Kremote: Counting objects:  79% (6531/8267)   [Kremote: Counting objects:  80% (6614/8267)   [Kremote: Counting objects:  81% (6697/8267)   [Kremote: Counting objects:  82% (6779/8267)   [Kremote: Counting objects:  83% (6862/8267)   [Kremote: Counting objects:  84% (6945/8267)   [Kremote: Counting objects:  85% (7027/8267)   [Kremote: Counting objects:  86% (7110/8267)   [Kremote: Counting objects:  87% (7193/8267)   [Kremote: Counting objects:  88% (7275/8267)   [Kremote: Counting objects:  89% (7358/8267)   [Kremote: Counting objects:  90% (7441/8267)   [Kremote: Counting objects:  91% (7523/8267)   [Kremote: Counting objects:  92% (7606/8267)   [Kremote: Counting objects:  93% (7689/8267)   [Kremote: Counting objects:  94% (7771/8267)   [Kremote: Counting objects:  95% (7854/8267)   [Kremote: Counting objects:  96% (7937/8267)   [Kremote: Counting objects:  97% (8019/8267)   [Kremote: Counting objects:  98% (8102/8267)   [Kremote: Counting objects:  99% (8185/8267)   [Kremote: Counting objects: 100% (8267/8267)   [Kremote: Counting objects: 100% (8267/8267), done.[K
remote: Compressing objects:   0% (1/2424)   [Kremote: Compressing objects:   1% (25/2424)   [Kremote: Compressing objects:   2% (49/2424)   [Kremote: Compressing objects:   3% (73/2424)   [Kremote: Compressing objects:   4% (97/2424)   [Kremote: Compressing objects:   5% (122/2424)   [Kremote: Compressing objects:   6% (146/2424)   [Kremote: Compressing objects:   7% (170/2424)   [Kremote: Compressing objects:   8% (194/2424)   [Kremote: Compressing objects:   9% (219/2424)   [Kremote: Compressing objects:  10% (243/2424)   [Kremote: Compressing objects:  11% (267/2424)   [Kremote: Compressing objects:  12% (291/2424)   [Kremote: Compressing objects:  13% (316/2424)   [Kremote: Compressing objects:  14% (340/2424)   [Kremote: Compressing objects:  15% (364/2424)   [Kremote: Compressing objects:  16% (388/2424)   [Kremote: Compressing objects:  17% (413/2424)   [Kremote: Compressing objects:  18% (437/2424)   [Kremote: Compressing objects:  19% (461/2424)   [Kremote: Compressing objects:  20% (485/2424)   [Kremote: Compressing objects:  21% (510/2424)   [Kremote: Compressing objects:  22% (534/2424)   [Kremote: Compressing objects:  23% (558/2424)   [Kremote: Compressing objects:  24% (582/2424)   [Kremote: Compressing objects:  25% (606/2424)   [Kremote: Compressing objects:  26% (631/2424)   [Kremote: Compressing objects:  27% (655/2424)   [Kremote: Compressing objects:  28% (679/2424)   [Kremote: Compressing objects:  29% (703/2424)   [Kremote: Compressing objects:  30% (728/2424)   [Kremote: Compressing objects:  31% (752/2424)   [Kremote: Compressing objects:  32% (776/2424)   [Kremote: Compressing objects:  33% (800/2424)   [Kremote: Compressing objects:  34% (825/2424)   [Kremote: Compressing objects:  35% (849/2424)   [Kremote: Compressing objects:  36% (873/2424)   [Kremote: Compressing objects:  37% (897/2424)   [Kremote: Compressing objects:  38% (922/2424)   [Kremote: Compressing objects:  39% (946/2424)   [Kremote: Compressing objects:  40% (970/2424)   [Kremote: Compressing objects:  41% (994/2424)   [Kremote: Compressing objects:  42% (1019/2424)   [Kremote: Compressing objects:  43% (1043/2424)   [Kremote: Compressing objects:  44% (1067/2424)   [Kremote: Compressing objects:  45% (1091/2424)   [Kremote: Compressing objects:  46% (1116/2424)   [Kremote: Compressing objects:  47% (1140/2424)   [Kremote: Compressing objects:  48% (1164/2424)   [Kremote: Compressing objects:  49% (1188/2424)   [Kremote: Compressing objects:  50% (1212/2424)   [Kremote: Compressing objects:  51% (1237/2424)   [Kremote: Compressing objects:  52% (1261/2424)   [Kremote: Compressing objects:  53% (1285/2424)   [Kremote: Compressing objects:  54% (1309/2424)   [Kremote: Compressing objects:  55% (1334/2424)   [Kremote: Compressing objects:  56% (1358/2424)   [Kremote: Compressing objects:  57% (1382/2424)   [Kremote: Compressing objects:  58% (1406/2424)   [Kremote: Compressing objects:  59% (1431/2424)   [Kremote: Compressing objects:  60% (1455/2424)   [Kremote: Compressing objects:  61% (1479/2424)   [Kremote: Compressing objects:  62% (1503/2424)   [Kremote: Compressing objects:  63% (1528/2424)   [Kremote: Compressing objects:  64% (1552/2424)   [Kremote: Compressing objects:  65% (1576/2424)   [Kremote: Compressing objects:  66% (1600/2424)   [Kremote: Compressing objects:  67% (1625/2424)   [Kremote: Compressing objects:  68% (1649/2424)   [Kremote: Compressing objects:  69% (1673/2424)   [Kremote: Compressing objects:  70% (1697/2424)   [Kremote: Compressing objects:  71% (1722/2424)   [Kremote: Compressing objects:  72% (1746/2424)   [Kremote: Compressing objects:  73% (1770/2424)   [Kremote: Compressing objects:  74% (1794/2424)   [Kremote: Compressing objects:  75% (1818/2424)   [Kremote: Compressing objects:  76% (1843/2424)   [Kremote: Compressing objects:  77% (1867/2424)   [Kremote: Compressing objects:  78% (1891/2424)   [Kremote: Compressing objects:  79% (1915/2424)   [Kremote: Compressing objects:  80% (1940/2424)   [Kremote: Compressing objects:  81% (1964/2424)   [Kremote: Compressing objects:  82% (1988/2424)   [Kremote: Compressing objects:  83% (2012/2424)   [Kremote: Compressing objects:  84% (2037/2424)   [Kremote: Compressing objects:  85% (2061/2424)   [Kremote: Compressing objects:  86% (2085/2424)   [Kremote: Compressing objects:  87% (2109/2424)   [Kremote: Compressing objects:  88% (2134/2424)   [Kremote: Compressing objects:  89% (2158/2424)   [Kremote: Compressing objects:  90% (2182/2424)   [Kremote: Compressing objects:  91% (2206/2424)   [Kremote: Compressing objects:  92% (2231/2424)   [Kremote: Compressing objects:  93% (2255/2424)   [Kremote: Compressing objects:  94% (2279/2424)   [Kremote: Compressing objects:  95% (2303/2424)   [Kremote: Compressing objects:  96% (2328/2424)   [Kremote: Compressing objects:  97% (2352/2424)   [Kremote: Compressing objects:  98% (2376/2424)   [Kremote: Compressing objects:  99% (2400/2424)   [Kremote: Compressing objects: 100% (2424/2424)   [Kremote: Compressing objects: 100% (2424/2424), done.[K
Receiving objects:   0% (1/8133)   Receiving objects:   1% (82/8133)   Receiving objects:   2% (163/8133)   Receiving objects:   3% (244/8133)   Receiving objects:   4% (326/8133)   Receiving objects:   5% (407/8133)   Receiving objects:   6% (488/8133)   Receiving objects:   7% (570/8133)   Receiving objects:   8% (651/8133)   Receiving objects:   9% (732/8133)   Receiving objects:  10% (814/8133)   Receiving objects:  11% (895/8133)   Receiving objects:  12% (976/8133)   Receiving objects:  13% (1058/8133)   Receiving objects:  14% (1139/8133)   Receiving objects:  15% (1220/8133)   Receiving objects:  16% (1302/8133)   Receiving objects:  17% (1383/8133)   Receiving objects:  18% (1464/8133)   Receiving objects:  19% (1546/8133)   Receiving objects:  20% (1627/8133)   Receiving objects:  21% (1708/8133)   Receiving objects:  22% (1790/8133)   Receiving objects:  23% (1871/8133)   Receiving objects:  24% (1952/8133)   Receiving objects:  25% (2034/8133)   Receiving objects:  26% (2115/8133)   Receiving objects:  27% (2196/8133)   Receiving objects:  28% (2278/8133)   Receiving objects:  29% (2359/8133)   Receiving objects:  30% (2440/8133)   Receiving objects:  31% (2522/8133)   Receiving objects:  32% (2603/8133)   Receiving objects:  33% (2684/8133)   Receiving objects:  34% (2766/8133)   Receiving objects:  35% (2847/8133)   Receiving objects:  36% (2928/8133)   Receiving objects:  37% (3010/8133)   Receiving objects:  38% (3091/8133)   Receiving objects:  39% (3172/8133)   Receiving objects:  40% (3254/8133)   Receiving objects:  41% (3335/8133)   Receiving objects:  42% (3416/8133)   Receiving objects:  43% (3498/8133)   Receiving objects:  44% (3579/8133)   Receiving objects:  45% (3660/8133)   Receiving objects:  46% (3742/8133)   Receiving objects:  47% (3823/8133)   Receiving objects:  48% (3904/8133)   Receiving objects:  49% (3986/8133)   Receiving objects:  50% (4067/8133)   Receiving objects:  51% (4148/8133)   Receiving objects:  52% (4230/8133)   Receiving objects:  53% (4311/8133)   Receiving objects:  54% (4392/8133)   Receiving objects:  55% (4474/8133)   Receiving objects:  56% (4555/8133)   Receiving objects:  57% (4636/8133)   Receiving objects:  58% (4718/8133)   Receiving objects:  59% (4799/8133)   Receiving objects:  60% (4880/8133)   Receiving objects:  61% (4962/8133)   Receiving objects:  62% (5043/8133)   Receiving objects:  63% (5124/8133)   Receiving objects:  64% (5206/8133)   Receiving objects:  65% (5287/8133)   Receiving objects:  66% (5368/8133)   Receiving objects:  67% (5450/8133)   Receiving objects:  68% (5531/8133)   Receiving objects:  69% (5612/8133)   Receiving objects:  70% (5694/8133)   Receiving objects:  71% (5775/8133)   Receiving objects:  72% (5856/8133)   Receiving objects:  73% (5938/8133)   Receiving objects:  74% (6019/8133)   Receiving objects:  75% (6100/8133)   Receiving objects:  76% (6182/8133)   Receiving objects:  77% (6263/8133)   Receiving objects:  78% (6344/8133)   Receiving objects:  79% (6426/8133)   Receiving objects:  80% (6507/8133)   Receiving objects:  81% (6588/8133)   Receiving objects:  82% (6670/8133)   Receiving objects:  83% (6751/8133)   Receiving objects:  84% (6832/8133)   Receiving objects:  85% (6914/8133)   Receiving objects:  86% (6995/8133)   Receiving objects:  87% (7076/8133)   Receiving objects:  88% (7158/8133)   Receiving objects:  89% (7239/8133)   Receiving objects:  90% (7320/8133)   Receiving objects:  91% (7402/8133)   Receiving objects:  92% (7483/8133)   Receiving objects:  93% (7564/8133)   Receiving objects:  94% (7646/8133)   remote: Total 8133 (delta 5615), reused 7968 (delta 5456), pack-reused 0
Receiving objects:  95% (7727/8133)   Receiving objects:  96% (7808/8133)   Receiving objects:  97% (7890/8133)   Receiving objects:  98% (7971/8133)   Receiving objects:  99% (8052/8133)   Receiving objects: 100% (8133/8133)   Receiving objects: 100% (8133/8133), 4.88 MiB | 16.60 MiB/s, done.
Resolving deltas:   0% (0/5615)   Resolving deltas:   1% (68/5615)   Resolving deltas:   2% (157/5615)   Resolving deltas:   3% (177/5615)   Resolving deltas:   4% (237/5615)   Resolving deltas:   5% (288/5615)   Resolving deltas:   6% (337/5615)   Resolving deltas:   7% (397/5615)   Resolving deltas:   8% (474/5615)   Resolving deltas:   9% (557/5615)   Resolving deltas:  10% (575/5615)   Resolving deltas:  11% (637/5615)   Resolving deltas:  12% (675/5615)   Resolving deltas:  14% (829/5615)   Resolving deltas:  15% (868/5615)   Resolving deltas:  17% (985/5615)   Resolving deltas:  18% (1011/5615)   Resolving deltas:  20% (1154/5615)   Resolving deltas:  21% (1180/5615)   Resolving deltas:  22% (1246/5615)   Resolving deltas:  23% (1346/5615)   Resolving deltas:  24% (1357/5615)   Resolving deltas:  25% (1404/5615)   Resolving deltas:  26% (1471/5615)   Resolving deltas:  27% (1534/5615)   Resolving deltas:  28% (1579/5615)   Resolving deltas:  29% (1664/5615)   Resolving deltas:  30% (1693/5615)   Resolving deltas:  33% (1900/5615)   Resolving deltas:  34% (1920/5615)   Resolving deltas:  35% (1981/5615)   Resolving deltas:  37% (2101/5615)   Resolving deltas:  38% (2179/5615)   Resolving deltas:  39% (2193/5615)   Resolving deltas:  40% (2261/5615)   Resolving deltas:  41% (2332/5615)   Resolving deltas:  42% (2393/5615)   Resolving deltas:  43% (2420/5615)   Resolving deltas:  44% (2473/5615)   Resolving deltas:  45% (2527/5615)   Resolving deltas:  46% (2584/5615)   Resolving deltas:  47% (2640/5615)   Resolving deltas:  48% (2699/5615)   Resolving deltas:  50% (2815/5615)   Resolving deltas:  52% (2940/5615)   Resolving deltas:  53% (2992/5615)   Resolving deltas:  54% (3039/5615)   Resolving deltas:  55% (3138/5615)   Resolving deltas:  56% (3156/5615)   Resolving deltas:  57% (3215/5615)   Resolving deltas:  58% (3257/5615)   Resolving deltas:  60% (3374/5615)   Resolving deltas:  61% (3426/5615)   Resolving deltas:  62% (3486/5615)   Resolving deltas:  63% (3542/5615)   Resolving deltas:  64% (3612/5615)   Resolving deltas:  67% (3808/5615)   Resolving deltas:  71% (3988/5615)   Resolving deltas:  74% (4156/5615)   Resolving deltas:  78% (4381/5615)   Resolving deltas:  80% (4498/5615)   Resolving deltas:  81% (4602/5615)   Resolving deltas:  83% (4689/5615)   Resolving deltas:  84% (4744/5615)   Resolving deltas:  86% (4858/5615)   Resolving deltas:  88% (4977/5615)   Resolving deltas:  89% (4999/5615)   Resolving deltas:  90% (5058/5615)   Resolving deltas:  91% (5154/5615)   Resolving deltas:  93% (5242/5615)   Resolving deltas:  94% (5286/5615)   Resolving deltas:  95% (5340/5615)   Resolving deltas:  96% (5419/5615)   Resolving deltas:  97% (5455/5615)   Resolving deltas:  98% (5503/5615)   Resolving deltas:  99% (5576/5615)   Resolving deltas: 100% (5615/5615)   Resolving deltas: 100% (5615/5615), completed with 85 local objects.
From https://github.com/jwilm/alacritty
 * branch            refs/pull/2329/merge -> FETCH_HEAD
travis_time:end:1195663d:start=1563803730544763969,finish=1563803731914686622,duration=1369922653[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K
travis_fold:start:rustup-install[0K[33;1mInstalling Rust[0m
travis_time:start:060e431e[0K$ curl -sSf https://build.travis-ci.org/files/rustup-init.sh | sh -s -- --default-toolchain=$TRAVIS_RUST_VERSION -y
[1minfo:[0m downloading installer
Warning: Not forcing TLS v1.2, this is potentially less secure
[1minfo: (B[msyncing channel updates for '1.32.0-x86_64-unknown-linux-gnu'
[1minfo: (B[mlatest update on 2019-01-17, rust version 1.32.0 (9fda7c223 2019-01-16)
[1minfo: (B[mdownloading component 'rustc'
 24.2 MiB /  79.5 MiB ( 30 %)   0 B/s in  1s ETA: Unknown                                                          48.4 MiB /  79.5 MiB ( 61 %)  24.2 MiB/s in  2s ETA:  1s                                                          72.8 MiB /  79.5 MiB ( 92 %)  24.2 MiB/s in  3s ETA:  0s                                                          79.5 MiB /  79.5 MiB (100 %)  24.3 MiB/s in  3s ETA:  0s
[1minfo: (B[mdownloading component 'rust-std'
 24.6 MiB /  54.3 MiB ( 45 %)   0 B/s in  1s ETA: Unknown                                                          49.5 MiB /  54.3 MiB ( 91 %)  24.6 MiB/s in  2s ETA:  0s                                                          54.3 MiB /  54.3 MiB (100 %)  24.7 MiB/s in  2s ETA:  0s
[1minfo: (B[mdownloading component 'cargo'
[1minfo: (B[mdownloading component 'rust-docs'
[1minfo: (B[minstalling component 'rustc'
 10.8 MiB /  79.5 MiB ( 14 %)   0 B/s in  1s ETA: Unknown                                                          24.6 MiB /  79.5 MiB ( 31 %)  10.8 MiB/s in  2s ETA:  5s                                                          39.9 MiB /  79.5 MiB ( 50 %)  12.3 MiB/s in  3s ETA:  3s                                                          49.2 MiB /  79.5 MiB ( 62 %)  13.3 MiB/s in  4s ETA:  2s                                                          58.8 MiB /  79.5 MiB ( 74 %)  12.3 MiB/s in  5s ETA:  1s                                                          68.4 MiB /  79.5 MiB ( 86 %)  11.8 MiB/s in  6s ETA:  0s                                                          78.1 MiB /  79.5 MiB ( 98 %)  11.5 MiB/s in  7s ETA:  0s                                                          79.5 MiB /  79.5 MiB (100 %)  10.7 MiB/s in  7s ETA:  0s
[1minfo: (B[minstalling component 'rust-std'
 11.9 MiB /  54.3 MiB ( 22 %)   0 B/s in  1s ETA: Unknown                                                          24.7 MiB /  54.3 MiB ( 46 %)  11.9 MiB/s in  2s ETA:  2s                                                          38.7 MiB /  54.3 MiB ( 71 %)  12.4 MiB/s in  3s ETA:  1s                                                          54.0 MiB /  54.3 MiB ( 99 %)  12.9 MiB/s in  4s ETA:  0s                                                          54.3 MiB /  54.3 MiB (100 %)  13.5 MiB/s in  4s ETA:  0s
[1minfo: (B[minstalling component 'cargo'
[1minfo: (B[minstalling component 'rust-docs'
  3.5 MiB /   8.5 MiB ( 41 %)   0 B/s in  1s ETA: Unknown                                                           8.1 MiB /   8.5 MiB ( 95 %)   3.5 MiB/s in  2s ETA:  0s                                                           8.5 MiB /   8.5 MiB (100 %)   4.0 MiB/s in  2s ETA:  0s
[1minfo: (B[mdefault toolchain set to '1.32.0'

  [1m[32m1.32.0 installed(B[m - rustc 1.32.0 (9fda7c223 2019-01-16)

[1m
Rust is installed now. Great!
(B[m
To get started you need Cargo's bin directory ($HOME/.cargo/bin) in your [1mPATH(B[m 
environment variable. Next time you log in this will be done automatically.

To configure your current shell run [1msource $HOME/.cargo/env(B[m
travis_time:end:060e431e:start=1563803732140548949,finish=1563803754724157227,duration=22583608278[0K$ export PATH=${TRAVIS_HOME}/.cargo/bin:$PATH
travis_fold:end:rustup-install[0K$ rustc --version
rustc 1.32.0 (9fda7c223 2019-01-16)
$ rustup --version
rustup 1.18.3 (435397f48 2019-05-22)
$ cargo --version
cargo 1.32.0 (8610973aa 2019-01-02)

travis_fold:start:install[0Ktravis_time:start:069b3a80[0K$ ci/install.sh
travis_time:end:069b3a80:start=1563803754764160724,finish=1563803754767849291,duration=3688567[0Ktravis_fold:end:install[0Ktravis_time:start:01993509[0K$ ci/script.sh
[0m[0m[1m[32m    Updating[0m crates.io index
[0m[0m[1m[32m Downloading[0m crates ...
[0m[0m[1m[32m  Downloaded[0m x11-clipboard v0.3.3
[0m[0m[1m[32m  Downloaded[0m euclid v0.19.9
[0m[0m[1m[32m  Downloaded[0m andrew v0.2.1
[0m[0m[1m[32m  Downloaded[0m serde_yaml v0.8.9
[0m[0m[1m[32m  Downloaded[0m vte v0.3.3
[0m[0m[1m[32m  Downloaded[0m unicode-width v0.1.5
[0m[0m[1m[32m  Downloaded[0m notify v4.0.12
[0m[0m[1m[32m  Downloaded[0m parking_lot v0.7.1
[0m[0m[1m[32m  Downloaded[0m static_assertions v0.3.3
[0m[0m[1m[32m  Downloaded[0m mio-extras v2.0.5
[0m[0m[1m[32m  Downloaded[0m log v0.4.6
[0m[0m[1m[32m  Downloaded[0m wayland-client v0.23.5
[0m[0m[1m[32m  Downloaded[0m bitflags v1.1.0
[0m[0m[1m[32m  Downloaded[0m image v0.21.2
[0m[0m[1m[32m  Downloaded[0m freetype-rs v0.19.1
[0m[0m[1m[32m  Downloaded[0m mio v0.6.19
[0m[0m[1m[32m  Downloaded[0m serde v1.0.94
[0m[0m[1m[32m  Downloaded[0m fnv v1.0.6
[0m[0m[1m[32m  Downloaded[0m x11-dl v2.18.3
[0m[0m[1m[32m  Downloaded[0m errno v0.2.4
[0m[0m[1m[32m  Downloaded[0m smithay-clipboard v0.3.3
[0m[0m[1m[32m  Downloaded[0m gl_generator v0.11.0
[0m[0m[1m[32m  Downloaded[0m serde_json v1.0.40
[0m[0m[1m[32m  Downloaded[0m signal-hook v0.1.9
[0m[0m[1m[32m  Downloaded[0m servo-fontconfig v0.4.0
[0m[0m[1m[32m  Downloaded[0m smithay-client-toolkit v0.6.3
[0m[0m[1m[32m  Downloaded[0m env_logger v0.6.2
[0m[0m[1m[32m  Downloaded[0m time v0.1.42
[0m[0m[1m[32m  Downloaded[0m rustc_tools_util v0.2.0
[0m[0m[1m[32m  Downloaded[0m terminfo v0.6.1
[0m[0m[1m[32m  Downloaded[0m nix v0.14.1
[0m[0m[1m[32m  Downloaded[0m glutin v0.21.0
[0m[0m[1m[32m  Downloaded[0m clap v2.33.0
[0m[0m[1m[32m  Downloaded[0m url v1.7.2
[0m[0m[1m[32m  Downloaded[0m foreign-types v0.4.0
[0m[0m[1m[32m  Downloaded[0m xdg v2.2.0
[0m[0m[1m[32m  Downloaded[0m base64 v0.10.1
[0m[0m[1m[32m  Downloaded[0m libc v0.2.59
[0m[0m[1m[32m  Downloaded[0m crossbeam-channel v0.3.8
[0m[0m[1m[32m  Downloaded[0m lazy_static v1.3.0
[0m[0m[1m[32m  Downloaded[0m void v1.0.2
[0m[0m[1m[32m  Downloaded[0m line_drawing v0.7.0
[0m[0m[1m[32m  Downloaded[0m servo-fontconfig-sys v4.0.7
[0m[0m[1m[32m  Downloaded[0m yaml-rust v0.4.3
[0m[0m[1m[32m  Downloaded[0m slab v0.4.2
[0m[0m[1m[32m  Downloaded[0m freetype-sys v0.7.1
[0m[0m[1m[32m  Downloaded[0m tiff v0.2.2
[0m[0m[1m[32m  Downloaded[0m iovec v0.1.2
[0m[0m[1m[32m  Downloaded[0m lzw v0.10.0
[0m[0m[1m[32m  Downloaded[0m percent-encoding v1.0.1
[0m[0m[1m[32m  Downloaded[0m lock_api v0.1.5
[0m[0m[1m[32m  Downloaded[0m itoa v0.4.4
[0m[0m[1m[32m  Downloaded[0m glutin_egl_sys v0.1.3
[0m[0m[1m[32m  Downloaded[0m wayland-protocols v0.23.5
[0m[0m[1m[32m  Downloaded[0m libloading v0.5.2
[0m[0m[1m[32m  Downloaded[0m termcolor v1.0.5
[0m[0m[1m[32m  Downloaded[0m serde_derive v1.0.94
[0m[0m[1m[32m  Downloaded[0m dlib v0.4.1
[0m[0m[1m[32m  Downloaded[0m rusttype v0.7.7
[0m[0m[1m[32m  Downloaded[0m utf8parse v0.1.1
[0m[0m[1m[32m  Downloaded[0m linked-hash-map v0.5.2
[0m[0m[1m[32m  Downloaded[0m byteorder v1.3.2
[0m[0m[1m[32m  Downloaded[0m jpeg-decoder v0.1.15
[0m[0m[1m[32m  Downloaded[0m pkg-config v0.3.14
[0m[0m[1m[32m  Downloaded[0m filetime v0.2.5
[0m[0m[1m[32m  Downloaded[0m phf_codegen v0.7.24
[0m[0m[1m[32m  Downloaded[0m osmesa-sys v0.1.2
[0m[0m[1m[32m  Downloaded[0m humantime v1.2.0
[0m[0m[1m[32m  Downloaded[0m regex v1.1.9
[0m[0m[1m[32m  Downloaded[0m memmap v0.7.0
[0m[0m[1m[32m  Downloaded[0m cfg-if v0.1.9
[0m[0m[1m[32m  Downloaded[0m foreign-types-macros v0.1.0
[0m[0m[1m[32m  Downloaded[0m signal-hook-registry v1.0.1
[0m[0m[1m[32m  Downloaded[0m png v0.14.1
[0m[0m[1m[32m  Downloaded[0m wayland-scanner v0.23.5
[0m[0m[1m[32m  Downloaded[0m inotify v0.6.1
[0m[0m[1m[32m  Downloaded[0m parking_lot_core v0.4.0
[0m[0m[1m[32m  Downloaded[0m derivative v1.0.2
[0m[0m[1m[32m  Downloaded[0m vec_map v0.8.1
[0m[0m[1m[32m  Downloaded[0m xcb v0.8.2
[0m[0m[1m[32m  Downloaded[0m mio-uds v0.6.7
[0m[0m[1m[32m  Downloaded[0m num-traits v0.2.8
[0m[0m[1m[32m  Downloaded[0m scoped_threadpool v0.1.9
[0m[0m[1m[32m  Downloaded[0m lazycell v1.2.1
[0m[0m[1m[32m  Downloaded[0m wayland-commons v0.23.5
[0m[0m[1m[32m  Downloaded[0m idna v0.1.5
[0m[0m[1m[32m  Downloaded[0m winit v0.19.1
[0m[0m[1m[32m  Downloaded[0m xml-rs v0.8.0
[0m[0m[1m[32m  Downloaded[0m foreign-types-shared v0.2.0
[0m[0m[1m[32m  Downloaded[0m num-iter v0.1.39
[0m[0m[1m[32m  Downloaded[0m nom v4.2.3
[0m[0m[1m[32m  Downloaded[0m atty v0.2.11
[0m[0m[1m[32m  Downloaded[0m textwrap v0.11.0
[0m[0m[1m[32m  Downloaded[0m dtoa v0.4.4
[0m[0m[1m[32m  Downloaded[0m gif v0.10.2
[0m[0m[1m[32m  Downloaded[0m glutin_glx_sys v0.1.5
[0m[0m[1m[32m  Downloaded[0m ansi_term v0.11.0
[0m[0m[1m[32m  Downloaded[0m net2 v0.2.33
[0m[0m[1m[32m  Downloaded[0m ryu v1.0.0
[0m[0m[1m[32m  Downloaded[0m khronos_api v3.1.0
[0m[0m[1m[32m  Downloaded[0m num-rational v0.2.2
[0m[0m[1m[32m  Downloaded[0m downcast-rs v1.0.4
[0m[0m[1m[32m  Downloaded[0m euclid_macros v0.1.0
[0m[0m[1m[32m  Downloaded[0m walkdir v2.2.8
[0m[0m[1m[32m  Downloaded[0m wayland-client v0.21.13
[0m[0m[1m[32m  Downloaded[0m matches v0.1.8
[0m[0m[1m[32m  Downloaded[0m strsim v0.8.0
[0m[0m[1m[32m  Downloaded[0m phf v0.7.24
[0m[0m[1m[32m  Downloaded[0m spin v0.5.0
[0m[0m[1m[32m  Downloaded[0m wayland-sys v0.23.5
[0m[0m[1m[32m  Downloaded[0m arrayvec v0.4.10
[0m[0m[1m[32m  Downloaded[0m expat-sys v2.1.6
[0m[0m[1m[32m  Downloaded[0m num-derive v0.2.5
[0m[0m[1m[32m  Downloaded[0m inflate v0.4.5
[0m[0m[1m[32m  Downloaded[0m rand v0.6.5
[0m[0m[1m[32m  Downloaded[0m scopeguard v0.3.3
[0m[0m[1m[32m  Downloaded[0m shared_library v0.1.9
[0m[0m[1m[32m  Downloaded[0m wayland-commons v0.21.13
[0m[0m[1m[32m  Downloaded[0m thread_local v0.3.6
[0m[0m[1m[32m  Downloaded[0m quote v0.6.12
[0m[0m[1m[32m  Downloaded[0m libz-sys v1.0.25
[0m[0m[1m[32m  Downloaded[0m ordered-float v1.0.2
[0m[0m[1m[32m  Downloaded[0m color_quant v1.0.1
[0m[0m[1m[32m  Downloaded[0m num-integer v0.1.41
[0m[0m[1m[32m  Downloaded[0m memchr v2.2.1
[0m[0m[1m[32m  Downloaded[0m phf_shared v0.7.24
[0m[0m[1m[32m  Downloaded[0m utf8-ranges v1.0.3
[0m[0m[1m[32m  Downloaded[0m aho-corasick v0.7.4
[0m[0m[1m[32m  Downloaded[0m same-file v1.0.4
[0m[0m[1m[32m  Downloaded[0m crossbeam-utils v0.6.5
[0m[0m[1m[32m  Downloaded[0m unicode-bidi v0.3.4
[0m[0m[1m[32m  Downloaded[0m rustc_version v0.2.3
[0m[0m[1m[32m  Downloaded[0m regex-syntax v0.6.8
[0m[0m[1m[32m  Downloaded[0m smithay-client-toolkit v0.4.6
[0m[0m[1m[32m  Downloaded[0m deflate v0.7.20
[0m[0m[1m[32m  Downloaded[0m version_check v0.1.5
[0m[0m[1m[32m  Downloaded[0m syn v0.15.39
[0m[0m[1m[32m  Downloaded[0m quick-error v1.2.2
[0m[0m[1m[32m  Downloaded[0m cc v1.0.37
[0m[0m[1m[32m  Downloaded[0m rayon v1.1.0
[0m[0m[1m[32m  Downloaded[0m phf_generator v0.7.24
[0m[0m[1m[32m  Downloaded[0m autocfg v0.1.4
[0m[0m[1m[32m  Downloaded[0m stb_truetype v0.2.6
[0m[0m[1m[32m  Downloaded[0m wayland-sys v0.21.13
[0m[0m[1m[32m  Downloaded[0m proc-macro2 v0.4.30
[0m[0m[1m[32m  Downloaded[0m arc-swap v0.3.11
[0m[0m[1m[32m  Downloaded[0m wayland-scanner v0.21.13
[0m[0m[1m[32m  Downloaded[0m approx v0.3.2
[0m[0m[1m[32m  Downloaded[0m inotify-sys v0.1.3
[0m[0m[1m[32m  Downloaded[0m smallvec v0.6.10
[0m[0m[1m[32m  Downloaded[0m unicode-normalization v0.1.8
[0m[0m[1m[32m  Downloaded[0m crossbeam-deque v0.6.3
[0m[0m[1m[32m  Downloaded[0m cmake v0.1.40
[0m[0m[1m[32m  Downloaded[0m rand_hc v0.1.0
[0m[0m[1m[32m  Downloaded[0m rand_jitter v0.1.4
[0m[0m[1m[32m  Downloaded[0m wayland-protocols v0.21.13
[0m[0m[1m[32m  Downloaded[0m owning_ref v0.4.0
[0m[0m[1m[32m  Downloaded[0m rand_os v0.1.3
[0m[0m[1m[32m  Downloaded[0m rand_chacha v0.1.1
[0m[0m[1m[32m  Downloaded[0m ucd-util v0.1.3
[0m[0m[1m[32m  Downloaded[0m either v1.5.2
[0m[0m[1m[32m  Downloaded[0m rand_pcg v0.1.2
[0m[0m[1m[32m  Downloaded[0m semver v0.9.0
[0m[0m[1m[32m  Downloaded[0m siphasher v0.2.3
[0m[0m[1m[32m  Downloaded[0m rand_isaac v0.1.1
[0m[0m[1m[32m  Downloaded[0m rand_core v0.4.0
[0m[0m[1m[32m  Downloaded[0m nodrop v0.1.13
[0m[0m[1m[32m  Downloaded[0m unicode-xid v0.1.0
[0m[0m[1m[32m  Downloaded[0m adler32 v1.0.3
[0m[0m[1m[32m  Downloaded[0m rand_xorshift v0.1.1
[0m[0m[1m[32m  Downloaded[0m semver-parser v0.7.0
[0m[0m[1m[32m  Downloaded[0m rand_core v0.3.1
[0m[0m[1m[32m  Downloaded[0m stable_deref_trait v1.1.1
[0m[0m[1m[32m  Downloaded[0m rayon-core v1.5.0
[0m[0m[1m[32m  Downloaded[0m crossbeam-epoch v0.7.1
[0m[0m[1m[32m  Downloaded[0m crossbeam-queue v0.1.2
[0m[0m[1m[32m  Downloaded[0m num_cpus v1.10.1
[0m[0m[1m[32m  Downloaded[0m memoffset v0.2.1
[0m[0m[1m[32m   Compiling[0m arrayvec v0.4.10
[0m[0m[1m[32m   Compiling[0m spin v0.5.0
[0m[0m[1m[32m   Compiling[0m nodrop v0.1.13
[0m[0m[1m[32m   Compiling[0m libc v0.2.59
[0m[0m[1m[32m   Compiling[0m cfg-if v0.1.9
[0m[0m[1m[32m   Compiling[0m scopeguard v0.3.3
[0m[0m[1m[32m   Compiling[0m memoffset v0.2.1
[0m[0m[1m[32m   Compiling[0m rayon-core v1.5.0
[0m[0m[1m[32m   Compiling[0m either v1.5.2
[0m[0m[1m[32m   Compiling[0m proc-macro2 v0.4.30
[0m[0m[1m[32m   Compiling[0m unicode-xid v0.1.0
[0m[0m[1m[32m   Compiling[0m autocfg v0.1.4
[0m[0m[1m[32m   Compiling[0m bitflags v1.1.0
[0m[0m[1m[32m   Compiling[0m xml-rs v0.8.0
[0m[0m[1m[32m   Compiling[0m byteorder v1.3.2
[0m[0m[1m[32m   Compiling[0m rand_core v0.4.0
[0m[0m[1m[32m   Compiling[0m pkg-config v0.3.14
[0m[0m[1m[32m   Compiling[0m semver-parser v0.7.0
[0m[0m[1m[32m   Compiling[0m nix v0.14.1
[0m[0m[1m[32m   Compiling[0m syn v0.15.39
[0m[0m[1m[32m   Compiling[0m khronos_api v3.1.0
[0m[0m[1m[32m   Compiling[0m void v1.0.2
[0m[0m[1m[32m   Compiling[0m siphasher v0.2.3
[0m[0m[1m[32m   Compiling[0m num-derive v0.2.5
[0m[0m[1m[32m   Compiling[0m stable_deref_trait v1.1.1
[0m[0m[1m[32m   Compiling[0m adler32 v1.0.3
[0m[0m[1m[32m   Compiling[0m same-file v1.0.4
[0m[0m[1m[32m   Compiling[0m downcast-rs v1.0.4
[0m[0m[1m[32m   Compiling[0m memchr v2.2.1
[0m[0m[1m[32m   Compiling[0m xdg v2.2.0
[0m[0m[1m[32m   Compiling[0m lzw v0.10.0
[0m[0m[1m[32m   Compiling[0m version_check v0.1.5
[0m[0m[1m[32m   Compiling[0m color_quant v1.0.1
[0m[0m[1m[32m   Compiling[0m smallvec v0.6.10
[0m[0m[1m[32m   Compiling[0m matches v0.1.8
[0m[0m[1m[32m   Compiling[0m scoped_threadpool v0.1.9
[0m[0m[1m[32m   Compiling[0m serde v1.0.94
[0m[0m[1m[32m   Compiling[0m slab v0.4.2
[0m[0m[1m[32m   Compiling[0m lazycell v1.2.1
[0m[0m[1m[32m   Compiling[0m ryu v1.0.0
[0m[0m[1m[32m   Compiling[0m linked-hash-map v0.5.2
[0m[0m[1m[32m   Compiling[0m foreign-types-shared v0.2.0
[0m[0m[1m[32m   Compiling[0m regex v1.1.9
[0m[0m[1m[32m   Compiling[0m arc-swap v0.3.11
[0m[0m[1m[32m   Compiling[0m ucd-util v0.1.3
[0m[0m[1m[32m   Compiling[0m percent-encoding v1.0.1
[0m[0m[1m[32m   Compiling[0m utf8parse v0.1.1
[0m[0m[1m[32m   Compiling[0m unicode-width v0.1.5
[0m[0m[1m[32m   Compiling[0m fnv v1.0.6
[0m[0m[1m[32m   Compiling[0m rustc_tools_util v0.2.0
[0m[0m[1m[32m   Compiling[0m dtoa v0.4.4
[0m[0m[1m[32m   Compiling[0m quick-error v1.2.2
[0m[0m[1m[32m   Compiling[0m winpty v0.1.0 (/home/travis/build/jwilm/alacritty/winpty)
[0m[0m[1m[32m   Compiling[0m utf8-ranges v1.0.3
[0m[0m[1m[32m   Compiling[0m ansi_term v0.11.0
[0m[0m[1m[32m   Compiling[0m static_assertions v0.3.3
[0m[0m[1m[32m   Compiling[0m termcolor v1.0.5
[0m[0m[1m[32m   Compiling[0m strsim v0.8.0
[0m[0m[1m[32m   Compiling[0m vec_map v0.8.1
[0m[0m[1m[32m   Compiling[0m itoa v0.4.4
[0m[0m[1m[32m   Compiling[0m lazy_static v1.3.0
[0m[0m[1m[32m   Compiling[0m log v0.4.6
[0m[0m[1m[32m   Compiling[0m rand_pcg v0.1.2
[0m[0m[1m[32m   Compiling[0m num-traits v0.2.8
[0m[0m[1m[32m   Compiling[0m rand_chacha v0.1.1
[0m[0m[1m[32m   Compiling[0m rand v0.6.5
[0m[0m[1m[32m   Compiling[0m num-integer v0.1.41
[0m[0m[1m[32m   Compiling[0m num-iter v0.1.39
[0m[0m[1m[32m   Compiling[0m num-rational v0.2.2
[0m[0m[1m[32m   Compiling[0m rand_core v0.3.1
[0m[0m[1m[32m   Compiling[0m rand_jitter v0.1.4
[0m[0m[1m[32m   Compiling[0m semver v0.9.0
[0m[0m[1m[32m   Compiling[0m freetype-sys v0.7.1
[0m[0m[1m[32m   Compiling[0m servo-fontconfig-sys v4.0.7
[0m[0m[1m[32m   Compiling[0m x11-dl v2.18.3
[0m[0m[1m[32m   Compiling[0m phf_shared v0.7.24
[0m[0m[1m[32m   Compiling[0m owning_ref v0.4.0
[0m[0m[1m[32m   Compiling[0m inflate v0.4.5
[0m[0m[1m[32m   Compiling[0m walkdir v2.2.8
[0m[0m[1m[32m   Compiling[0m nom v4.2.3
[0m[0m[1m[32m   Compiling[0m gif v0.10.2
[0m[0m[1m[32m   Compiling[0m unicode-bidi v0.3.4
[0m[0m[1m[32m   Compiling[0m unicode-normalization v0.1.8
[0m[0m[1m[32m   Compiling[0m yaml-rust v0.4.3
[0m[0m[1m[32m   Compiling[0m regex-syntax v0.6.8
[0m[0m[1m[32m   Compiling[0m vte v0.3.3
[0m[0m[1m[32m   Compiling[0m textwrap v0.11.0
[0m[0m[1m[32m   Compiling[0m alacritty v0.3.3 (/home/travis/build/jwilm/alacritty/alacritty)
[0m[0m[1m[32m   Compiling[0m humantime v1.2.0
[0m[0m[1m[32m   Compiling[0m crossbeam-utils v0.6.5
[0m[0m[1m[32m   Compiling[0m thread_local v0.3.6
[0m[0m[1m[32m   Compiling[0m rand_xorshift v0.1.1
[0m[0m[1m[32m   Compiling[0m rand_isaac v0.1.1
[0m[0m[1m[32m   Compiling[0m rand_hc v0.1.0
[0m[0m[1m[32m   Compiling[0m rustc_version v0.2.3
[0m[0m[1m[32m   Compiling[0m phf v0.7.24
[0m[0m[1m[32m   Compiling[0m lock_api v0.1.5
[0m[0m[1m[32m   Compiling[0m crossbeam-queue v0.1.2
[0m[0m[1m[32m   Compiling[0m crossbeam-channel v0.3.8
[0m[0m[1m[32m   Compiling[0m crossbeam-epoch v0.7.1
[0m[0m[1m[32m   Compiling[0m num_cpus v1.10.1
[0m[0m[1m[32m   Compiling[0m rand_os v0.1.3
[0m[0m[1m[32m   Compiling[0m xcb v0.8.2
[0m[0m[1m[32m   Compiling[0m net2 v0.2.33
[0m[0m[1m[32m   Compiling[0m memmap v0.7.0
[0m[0m[1m[32m   Compiling[0m iovec v0.1.2
[0m[0m[1m[32m   Compiling[0m inotify-sys v0.1.3
[0m[0m[1m[32m   Compiling[0m shared_library v0.1.9
[0m[0m[1m[32m   Compiling[0m signal-hook-registry v1.0.1
[0m[0m[1m[32m   Compiling[0m filetime v0.2.5
[0m[0m[1m[32m   Compiling[0m atty v0.2.11
[0m[0m[1m[32m   Compiling[0m errno v0.2.4
[0m[0m[1m[32m   Compiling[0m time v0.1.42
[0m[0m[1m[32m   Compiling[0m quote v0.6.12
[0m[0m[1m[32m   Compiling[0m stb_truetype v0.2.6
[0m[0m[1m[32m   Compiling[0m deflate v0.7.20
[0m[0m[1m[32m   Compiling[0m base64 v0.10.1
[0m[0m[1m[32m   Compiling[0m idna v0.1.5
[0m[0m[1m[32m   Compiling[0m gl_generator v0.11.0
[0m[0m[1m[32m   Compiling[0m parking_lot_core v0.4.0
[0m[0m[1m[32m   Compiling[0m aho-corasick v0.7.4
[0m[0m[1m[32m   Compiling[0m crossbeam-deque v0.6.3
[0m[0m[1m[32m   Compiling[0m mio v0.6.19
[0m[0m[1m[32m   Compiling[0m inotify v0.6.1
[0m[0m[1m[32m   Compiling[0m osmesa-sys v0.1.2
[0m[0m[1m[32m   Compiling[0m clap v2.33.0
[0m[0m[1m[32m   Compiling[0m serde_yaml v0.8.9
[0m[0m[1m[32m   Compiling[0m serde_json v1.0.40
[0m[0m[1m[32m   Compiling[0m wayland-scanner v0.23.5
[0m[0m[1m[32m   Compiling[0m wayland-scanner v0.21.13
[0m[0m[1m[32m   Compiling[0m approx v0.3.2
[0m[0m[1m[32m   Compiling[0m ordered-float v1.0.2
[0m[0m[1m[32m   Compiling[0m line_drawing v0.7.0
[0m[0m[1m[32m   Compiling[0m url v1.7.2
[0m[0m[1m[32m   Compiling[0m glutin_egl_sys v0.1.3
[0m[0m[1m[32m   Compiling[0m glutin_glx_sys v0.1.5
[0m[0m[1m[32m   Compiling[0m alacritty_terminal v0.3.3 (/home/travis/build/jwilm/alacritty/alacritty_terminal)
[0m[0m[1m[32m   Compiling[0m mio-uds v0.6.7
[0m[0m[1m[32m   Compiling[0m mio-extras v2.0.5
[0m[0m[1m[32m   Compiling[0m wayland-client v0.21.13
[0m[0m[1m[32m   Compiling[0m wayland-protocols v0.21.13
[0m[0m[1m[32m   Compiling[0m wayland-client v0.23.5
[0m[0m[1m[32m   Compiling[0m wayland-protocols v0.23.5
[0m[0m[1m[32m   Compiling[0m phf_generator v0.7.24
[0m[0m[1m[32m   Compiling[0m rusttype v0.7.7
[0m[0m[1m[32m   Compiling[0m foreign-types-macros v0.1.0
[0m[0m[1m[32m   Compiling[0m euclid_macros v0.1.0
[0m[0m[1m[32m   Compiling[0m derivative v1.0.2
[0m[0m[1m[32m   Compiling[0m serde_derive v1.0.94
[0m[0m[1m[32m   Compiling[0m rayon v1.1.0
[0m[0m[1m[32m   Compiling[0m signal-hook v0.1.9
[0m[0m[1m[32m   Compiling[0m notify v4.0.12
[0m[0m[1m[32m   Compiling[0m x11-clipboard v0.3.3
[0m[0m[1m[32m   Compiling[0m env_logger v0.6.2
[0m[0m[1m[32m   Compiling[0m phf_codegen v0.7.24
[0m[0m[1m[32m   Compiling[0m png v0.14.1
[0m[0m[1m[32m   Compiling[0m andrew v0.2.1
[0m[0m[1m[32m   Compiling[0m parking_lot v0.7.1
[0m[0m[1m[32m   Compiling[0m tiff v0.2.2
[0m[0m[1m[32m   Compiling[0m foreign-types v0.4.0
[0m[0m[1m[32m   Compiling[0m euclid v0.19.9
[0m[0m[1m[32m   Compiling[0m cc v1.0.37
[0m[0m[1m[32m   Compiling[0m jpeg-decoder v0.1.15
[0m[0m[1m[32m   Compiling[0m terminfo v0.6.1
[0m[0m[1m[32m   Compiling[0m libloading v0.5.2
[0m[0m[1m[32m   Compiling[0m libz-sys v1.0.25
[0m[0m[1m[32m   Compiling[0m cmake v0.1.40
[0m[0m[1m[32m   Compiling[0m image v0.21.2
[0m[0m[1m[32m   Compiling[0m expat-sys v2.1.6
[0m[0m[1m[32m   Compiling[0m dlib v0.4.1
[0m[0m[1m[32m   Compiling[0m wayland-sys v0.23.5
[0m[0m[1m[32m   Compiling[0m wayland-sys v0.21.13
[0m[0m[1m[32m   Compiling[0m servo-freetype-sys v4.0.3 (/home/travis/build/jwilm/alacritty/servo-freetype-proxy)
[0m[0m[1m[32m   Compiling[0m freetype-rs v0.19.1
[0m[0m[1m[32m   Compiling[0m wayland-commons v0.23.5
[0m[0m[1m[32m   Compiling[0m wayland-commons v0.21.13
[0m[0m[1m[32m   Compiling[0m servo-fontconfig v0.4.0
[0m[0m[1m[32m   Compiling[0m smithay-client-toolkit v0.6.3
[0m[0m[1m[32m   Compiling[0m font v0.1.0 (/home/travis/build/jwilm/alacritty/font)
[0m[0m[1m[32m   Compiling[0m smithay-client-toolkit v0.4.6
[0m[0m[1m[32m   Compiling[0m smithay-clipboard v0.3.3
[0m[0m[1m[32m   Compiling[0m copypasta v0.6.0 (/home/travis/build/jwilm/alacritty/copypasta)
[0m[0m[1m[32m   Compiling[0m winit v0.19.1
[0m[0m[1m[32m   Compiling[0m glutin v0.21.0
[0m[1m[33mwarning[0m[0m[1m: function is never used: `binding_trigger_input`[0m
[0m    [0m[0m[1m[38;5;12m--> [0m[0malacritty_terminal/src/input.rs:1055:5[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m[1m[38;5;12m1055[0m[0m [0m[0m[1m[38;5;12m| [0m[0m    fn binding_trigger_input() {[0m
[0m     [0m[0m[1m[38;5;12m| [0m[0m    [0m[0m[1m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m     [0m[0m[1m[38;5;12m|[0m
[0m     [0m[0m[1m[38;5;12m= [0m[0m[1mnote[0m[0m: #[warn(dead_code)] on by default[0m

[0m[0m[1m[32m    Finished[0m dev [unoptimized + debuginfo] target(s) in 6m 12s
[0m[0m[1m[32m     Running[0m target/debug/deps/alacritty-fa72255718049338

running 3 tests
test cli::test::dynamic_title_ignoring_options_by_default ... [32mok(B[m
test cli::test::dynamic_title_overridden_by_config ... [32mok(B[m
test cli::test::dynamic_title_overridden_by_options ... [32mok(B[m

test result: [32mok(B[m. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

[0m[0m[1m[32m     Running[0m target/debug/deps/alacritty_terminal-3f0769133d599522

running 98 tests
test ansi::tests::parse_control_attribute ... [32mok(B[m
test ansi::tests::parse_designate_g0_as_line_drawing ... [32mok(B[m
test ansi::tests::parse_designate_g1_as_line_drawing_and_invoke ... [32mok(B[m
test ansi::tests::parse_invalid_number ... [32mok(B[m
test ansi::tests::parse_number_too_large ... [32mok(B[m
test ansi::tests::parse_truecolor_attr ... [32mok(B[m
test ansi::tests::parse_valid_number ... [32mok(B[m
test ansi::tests::parse_valid_rgb_color ... [32mok(B[m
test ansi::tests::parse_valid_rgb_color2 ... [32mok(B[m
test ansi::tests::parse_zsh_startup ... [32mok(B[m
test config::test::default_match_empty ... [32mok(B[m
test grid::storage::test::grow_after_zero ... [32mok(B[m
test grid::storage::test::grow_before_zero ... [32mok(B[m
test grid::storage::test::initialize ... [32mok(B[m
test grid::storage::test::shrink_after_zero ... [32mok(B[m
test grid::storage::test::shrink_before_and_after_zero ... [32mok(B[m
test grid::storage::test::shrink_before_zero ... [32mok(B[m
test grid::storage::test::shrink_then_grow ... [32mok(B[m
test grid::storage::test::truncate_invisible_lines ... [32mok(B[m
test grid::storage::test::truncate_invisible_lines_beginning ... [32mok(B[m
test grid::tests::grow_reflow ... [32mok(B[m
test grid::tests::grow_reflow_disabled ... [32mok(B[m
test grid::tests::grow_reflow_multiline ... [32mok(B[m
test grid::tests::scroll_down ... [32mok(B[m
test grid::tests::scroll_up ... [32mok(B[m
test grid::tests::shrink_reflow ... [32mok(B[m
test grid::tests::shrink_reflow_disabled ... [32mok(B[m
test grid::tests::shrink_reflow_empty_cell_inside_line ... [32mok(B[m
test grid::tests::shrink_reflow_twice ... [32mok(B[m
test grid::tests::test_iter ... [32mok(B[m
test index::tests::location_ordering ... [32mok(B[m
test input::tests::binding_matches_different_action ... [32mok(B[m
test input::tests::binding_matches_itself ... [32mok(B[m
test input::tests::binding_trigger_modes ... [32mok(B[m
test input::tests::binding_trigger_mods ... [32mok(B[m
test input::tests::binding_trigger_notmodes ... [32mok(B[m
test config::test::parse_config ... [32mok(B[m
test input::tests::mods_binding_requires_strict_match ... [32mok(B[m
test input::tests::double_click ... [32mok(B[m
test input::tests::process_binding_appcursormode_appkeypadmode_nomod_require_appcursor ... [32mok(B[m
test input::tests::process_binding_appcursormode_nomod_require_appcursor ... [32mok(B[m
test input::tests::process_binding_fail_with_extra_mods ... [32mok(B[m
test input::tests::process_binding_nomode_controlmod ... [32mok(B[m
test input::tests::process_binding_nomode_nomod_require_appcursor ... [32mok(B[m
test input::tests::process_binding_nomode_nomod_require_not_appcursor ... [32mok(B[m
test input::tests::process_binding_nomode_nomod_require_shift ... [32mok(B[m
test input::tests::process_binding_nomode_shiftmod_require_shift ... [32mok(B[m
test input::tests::multi_click_separate_buttons ... [32mok(B[m
test input::tests::subset_mode_binding_matches_superset ... [32mok(B[m
test input::tests::subset_notmode_binding_matches_superset ... [32mok(B[m
test input::tests::single_click ... [32mok(B[m
test message_bar::test::add_newline_for_button ... [32mok(B[m
test message_bar::test::appends_close_button ... [32mok(B[m
test message_bar::test::empty_with_shortterm ... [32mok(B[m
test message_bar::test::hide_button_when_too_narrow ... [32mok(B[m
test message_bar::test::hide_truncated_when_too_narrow ... [32mok(B[m
test message_bar::test::multiline_close_button_first_line ... [32mok(B[m
test message_bar::test::pop ... [32mok(B[m
test message_bar::test::remove_duplicates ... [32mok(B[m
test message_bar::test::remove_topic ... [32mok(B[m
test message_bar::test::splits_on_length ... [32mok(B[m
test message_bar::test::splits_on_newline ... [32mok(B[m
test message_bar::test::truncates_long_messages ... [32mok(B[m
test message_bar::test::wrap_on_words ... [32mok(B[m
test input::tests::triple_click ... [32mok(B[m
test selection::test::across_adjacent_lines_upward_final_cell_exclusive ... [32mok(B[m
test selection::test::between_adjacent_cells_left_to_right ... [32mok(B[m
test selection::test::between_adjacent_cells_right_to_left ... [32mok(B[m
test selection::test::block_selection ... [32mok(B[m
test selection::test::double_width_expansion ... [32mok(B[m
test selection::test::selection_bigger_then_smaller ... [32mok(B[m
test selection::test::line_selection ... [32mok(B[m
test selection::test::semantic_selection ... [32mok(B[m
test selection::test::simple_selection ... [32mok(B[m
test selection::test::single_cell_left_to_right ... [32mok(B[m
test term::cell::tests::line_length_works ... [32mok(B[m
test term::cell::tests::line_length_works_with_wrapline ... [32mok(B[m
test selection::test::single_cell_right_to_left ... [32mok(B[m
test term::tests::clear_saved_lines ... [32mok(B[m
test term::tests::decrease_font_size_works ... [32mok(B[m
test term::tests::increase_font_size_works ... [32mok(B[m
test term::tests::input_line_drawing_character ... [32mok(B[m
test term::tests::grid_serde ... [32mok(B[m
test term::tests::line_selection_works ... [32mok(B[m
test term::tests::prevent_font_below_threshold_works ... [32mok(B[m
test term::tests::reset_font_size_works ... [32mok(B[m
test term::tests::selecting_empty_line ... [32mok(B[m
test tty::unix::test_get_pw_entry ... [32mok(B[m
test term::tests::semantic_selection_works ... [32mok(B[m
test url::tests::url_detect_end ... [32mok(B[m
test url::tests::url_origin ... [32mok(B[m
test url::tests::url_remove_end_chars ... [32mok(B[m
test url::tests::url_matching_chars ... [32mok(B[m
test url::tests::url_remove_start_chars ... [32mok(B[m
test url::tests::url_skip_invalid ... [32mok(B[m
test url::tests::url_unicode ... [32mok(B[m
test util::tests::limit_works ... [32mok(B[m
test url::tests::url_schemes ... [32mok(B[m

test result: [32mok(B[m. 98 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

[0m[0m[1m[32m     Running[0m target/debug/deps/ref-873e7b914a0f8270

running 23 tests
test csi_rep ... [32mok(B[m
test fish_cc ... [32mok(B[m
test grid_reset ... [32mok(B[m
test indexed_256_colors ... [32mok(B[m
test issue_855 ... [32mok(B[m
test ll ... [32mok(B[m
test newline_with_cursor_beyond_scroll_region ... [31mFAILED(B[m
test history ... [32mok(B[m
test tab_rendering ... [32mok(B[m
test tmux_git_log ... [32mok(B[m
test tmux_htop ... [32mok(B[m
test row_reset ... [32mok(B[m
test vim_24bitcolors_bce ... [31mFAILED(B[m
test vim_simple_edit ... [31mFAILED(B[m
test vttest_cursor_movement_1 ... [32mok(B[m
test vim_large_window_scroll ... [31mFAILED(B[m
test vttest_insert ... [32mok(B[m
test vttest_origin_mode_1 ... [31mFAILED(B[m
test vttest_origin_mode_2 ... [31mFAILED(B[m
test vttest_scroll ... [32mok(B[m
test vttest_tab_clear_set ... [31mFAILED(B[m
test zsh_tab_completion ... [32mok(B[m
test zerowidth ... [32mok(B[m

failures:

---- newline_with_cursor_beyond_scroll_region stdout ----
thread 'newline_with_cursor_beyond_scroll_region' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9
note: Run with `RUST_BACKTRACE=1` for a backtrace.

---- vim_24bitcolors_bce stdout ----
thread 'vim_24bitcolors_bce' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9

---- vim_simple_edit stdout ----
thread 'vim_simple_edit' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9

---- vim_large_window_scroll stdout ----
[0][0] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '\"', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][1] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][2] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][3] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][4] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '/', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][5] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][6] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][7] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][8] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][9] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][10] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][11] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][12] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][13] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '/', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][14] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][15] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][16] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][17] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][18] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][19] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][20] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '\"', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][22] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][23] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '3', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][24] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '5', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][25] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '4', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][26] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'L', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][27] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ',', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][29] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '4', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][30] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][31] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '5', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][32] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][33] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '7', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][34] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'C', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][35] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][36] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][37] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][38] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][39] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][40] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][41] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][42] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][43] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][44] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][45] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][46] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][47] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][48] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][49] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][50] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][51] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][52] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][53] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][54] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][55] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][56] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][57] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][58] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][59] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][60] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][61] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][62] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][63] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][64] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][65] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][66] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][67] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][68] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][69] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][70] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][71] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][72] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][73] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][74] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][75] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][76] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][77] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][78] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][79] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][80] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][81] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][82] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][83] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][84] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][85] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][86] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][87] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][88] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][89] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][90] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][91] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][92] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][93] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][94] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][95] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][96] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][97] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][98] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][99] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][100] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][101] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[2][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[6][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[7][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[8][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[9][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[10][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[11][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[12][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[13][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[27][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[29][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[31][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[32][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[33][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[34][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[35][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[36][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[37][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[38][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[39][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[40][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[41][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[42][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[43][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[44][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[45][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[46][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[47][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[48][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[49][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[50][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[51][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[52][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[53][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[54][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[55][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][106] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][107] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][108] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][109] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][110] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][111] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][112] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][113] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][114] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][115] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][116] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][117] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][118] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[56][119] [32mCell { c: ' ', fg: Spec(Rgb { r: 234, g: 234, b: 234 }), bg: Spec(Rgb { r: 0, g: 0, b: 0 }), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
thread 'vim_large_window_scroll' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9

---- vttest_origin_mode_1 stdout ----
thread 'vttest_origin_mode_1' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9

---- vttest_origin_mode_2 stdout ----
thread 'vttest_origin_mode_2' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9

---- vttest_tab_clear_set stdout ----
[0][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'v', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[0][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'E', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'x', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[1][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'C', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'y', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[3][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ':', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'L', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '3', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '8', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '4', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[4][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'V', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'g', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ',', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'v', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '7', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '(', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][45] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '8', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '9', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[5][50] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ')', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'P', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '<', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'R', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'E', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'U', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'R', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'N', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[14][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '>', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '(', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][4] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'W', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'R', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'A', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'P', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'A', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'R', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'O', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'U', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'N', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'D', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'g', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[15][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ')', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][4] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'w', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'y', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'y', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'w', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][50] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][51] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][52] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[16][53] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '\'', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][45] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'p', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][50] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][51] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][52] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][53] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'y', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][55] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][56] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][57] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][58] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][59] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][60] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[17][61] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'g', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'E', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '(', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '-', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ')', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ':', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[18][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][4] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][45] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][50] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][51] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][52] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][53] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][54] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][55] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][56] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][57] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][58] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][59] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][60] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][61] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][62] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][63] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][64] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][65] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][66] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][67] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][68] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][69] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][70] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][71] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][72] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][73] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][74] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][75] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][76] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][77] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][78] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][79] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][80] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][81] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][82] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][83] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][84] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][85] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][86] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][87] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][88] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][89] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][90] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][91] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][92] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][93] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][94] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][95] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][96] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][97] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][98] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][99] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][100] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][101] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][102] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][103] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][104] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][105] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][106] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][107] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][108] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][109] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][110] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][111] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][112] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][113] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][114] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[19][115] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][4] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[20][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][0] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][1] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][2] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][3] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][4] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][5] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][6] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][7] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][8] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][9] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][45] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][50] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][51] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][52] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][53] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][54] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][55] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][56] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][57] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][58] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][59] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][60] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][61] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][62] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][63] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][64] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][65] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][66] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][67] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][68] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][69] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][70] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][71] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][72] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][73] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][74] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][75] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][76] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][77] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][78] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][79] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][80] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][81] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][82] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][83] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][84] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][85] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][86] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][87] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][88] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][89] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][90] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][91] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][92] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][93] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][94] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][95] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][96] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][97] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][98] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][99] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][100] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][101] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][102] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][103] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][104] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][105] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][106] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][107] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][108] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][109] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][110] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][111] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][112] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][113] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][114] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[21][115] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '*', fg: Named(Foreground), bg: Named(Background), flags: WRAPLINE, extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][12] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][17] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][20] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '-', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[22][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '9', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'k', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'w', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'g', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[23][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '8', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'V', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '1', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '0', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '(', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'I', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '/', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][44] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'D', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][45] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][46] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][47] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][48] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][49] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][51] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'C', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][52] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][53] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][54] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][55] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '/', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][56] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'L', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][57] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][58] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][59] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[24][60] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: ')', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '7', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'V', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '5', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'm', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[25][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[26][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '4', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][13] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][18] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][19] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'o', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][24] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'b', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][25] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'l', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][27] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '-', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'i', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][30] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'z', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][31] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'd', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'h', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][36] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][37] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][38] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'a', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][39] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][40] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][41] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][42] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[28][43] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][10] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '2', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][11] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: '.', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][13] [32mCell { c: '\t', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'T', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][14] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][15] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][16] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][19] [32mCell { c: '\t', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][21] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][22] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'c', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][23] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][25] [32mCell { c: '\t', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][26] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'n', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][28] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'f', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][29] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][31] [32mCell { c: '\t', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 't', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][32] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'u', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][33] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'r', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][34] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 'e', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
[30][35] [32mCell { c: ' ', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m => [31mCell { c: 's', fg: Named(Foreground), bg: Named(Background), flags: (empty), extra: [' ', ' ', ' ', ' ', ' '] }[0m
thread 'vttest_tab_clear_set' panicked at 'Ref test failed; grid doesn't match', alacritty_terminal/tests/ref.rs:126:9


failures:
    newline_with_cursor_beyond_scroll_region
    vim_24bitcolors_bce
    vim_large_window_scroll
    vim_simple_edit
    vttest_origin_mode_1
    vttest_origin_mode_2
    vttest_tab_clear_set

test result: [31mFAILED(B[m. 16 passed; 7 failed; 0 ignored; 0 measured; 0 filtered out

[0m[0m[1m[31merror:[0m test failed, to rerun pass '-p alacritty_terminal --test ref'
travis_time:end:01993509:start=1563803754771590299,finish=1563804133575510782,duration=378803920483[0K[31;1mThe command "ci/script.sh" exited with 101.[0m



Done. Your build exited with 1.
