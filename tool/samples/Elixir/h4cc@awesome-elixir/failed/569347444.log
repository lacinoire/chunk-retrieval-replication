travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: 3aae7c7b-2500-46b4-a8e1-f0511098296e@1.worker-org-5dcc948c89-nsl7q.gce-production-2
version: v6.2.1 https://github.com/travis-ci/worker/tree/4e3246c044eb4915c2378ffacd0b3d3ed0136bba
instance: travis-job-4a060641-2c7a-4cee-939e-608561859211 travis-ci-opal-xenial-1553530491-f909ac5 (via amqp)
startup: 7.84925783s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: elixir
Build group: stable
Build dist: xenial
Build id: 569347444
Job id: 569347445
Runtime kernel version: 4.15.0-1028-gcp
travis-build version: fb89c531e
[34m[1mBuild image provisioning date and time[0m
Mon Mar 25 16:52:50 UTC 2019
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 16.04.6 LTS
Release:	16.04
Codename:	xenial
[34m[1mSystemd Version[0m
systemd 229
[34m[1mCookbooks Version[0m
42e42e4 https://github.com/travis-ci/travis-cookbooks/tree/42e42e4
[34m[1mgit version[0m
git version 2.21.0
[34m[1mbash version[0m
GNU bash, version 4.3.48(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609
[34m[1mdocker version[0m
Client:
 Version:           18.06.0-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        0ffa825
 Built:             Wed Jul 18 19:11:02 2018
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.0-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       0ffa825
  Built:            Wed Jul 18 19:09:05 2018
  OS/Arch:          linux/amd64
  Experimental:     false
[34m[1mclang version[0m
clang version 7.0.0 (tags/RELEASE_700/final)
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.6.0
[34m[1mshfmt version[0m
v2.6.3
[34m[1mccache version[0m
3.2.4
[34m[1mcmake version[0m
cmake version 3.12.4
[34m[1mheroku version[0m
heroku/7.22.7 linux-x64 node-v11.10.1
[34m[1mimagemagick version[0m
Version: ImageMagick 6.8.9-9 Q16 x86_64 2018-09-28 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.4
[34m[1mmercurial version[0m
version 4.8
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.7.25, for Linux (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.2g  1 Mar 2016
[34m[1mpacker version[0m
1.3.3
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 10.7 (Ubuntu 10.7-1.pgdg16.04+1)
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
[34m[1msudo version[0m
1.8.16
[34m[1mgzip version[0m
gzip 1.6
[34m[1mzip version[0m
Zip 3.0
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:44:48)
[34m[1miptables version[0m
iptables v1.6.0
[34m[1mcurl version[0m
curl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.17.1 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.1  protocol version 31
[34m[1mgimme version[0m
v1.5.3
[34m[1mnvm version[0m
0.34.0
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.82
[34m[1mphpenv version[0m
rbenv 1.1.2
[34m[1mrvm version[0m
rvm 1.29.7 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 63.0.1
[34m[1mMongoDB version[0m
MongoDB 4.0.7
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.4.21
9.5.16
9.6.12
[34m[1mRedis version[0m
redis-server 5.0.4
[34m[1mkerl list installations[0m
21.1
[34m[1melixirs[0m
=* elixir-1.7.4
[34m[1mrebar --version[0m
rebar 2.6.4 17 20160831_145136 git 2.6.4-dirty
[34m[1mperlbrew list[0m
   5.26                  (5.26.3)            (installed on Mon Mar 25 16:41:45 2019)
   5.26.3                                    (installed on Mon Mar 25 16:41:45 2019)
   5.26-extras           (5.26.2)            (installed on Mon Mar 25 16:45:42 2019)
   5.26-shrplib          (5.26.2)            (installed on Mon Mar 25 16:45:42 2019)
   5.26.2                                    (installed on Mon Mar 25 16:41:51 2019)
   5.24                  (5.24.3)            (installed on Mon Mar 25 16:46:12 2019)
   5.24.3                                    (installed on Mon Mar 25 16:46:12 2019)
   5.24-extras           (5.24.0)            (installed on Mon Mar 25 16:50:00 2019)
   5.24-shrplib          (5.24.0)            (installed on Mon Mar 25 16:50:00 2019)
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Ktravis_fold:end:docker_mtu[0Ktravis_fold:start:resolvconf[0Ktravis_fold:end:resolvconf[0K
travis_fold:start:git.checkout[0Ktravis_time:start:0f5b3a67[0K$ git clone --depth=50 https://github.com/h4cc/awesome-elixir.git h4cc/awesome-elixir
Cloning into 'h4cc/awesome-elixir'...
remote: Enumerating objects: 163, done.[K
remote: Counting objects:   0% (1/163)   [Kremote: Counting objects:   1% (2/163)   [Kremote: Counting objects:   2% (4/163)   [Kremote: Counting objects:   3% (5/163)   [Kremote: Counting objects:   4% (7/163)   [Kremote: Counting objects:   5% (9/163)   [Kremote: Counting objects:   6% (10/163)   [Kremote: Counting objects:   7% (12/163)   [Kremote: Counting objects:   8% (14/163)   [Kremote: Counting objects:   9% (15/163)   [Kremote: Counting objects:  10% (17/163)   [Kremote: Counting objects:  11% (18/163)   [Kremote: Counting objects:  12% (20/163)   [Kremote: Counting objects:  13% (22/163)   [Kremote: Counting objects:  14% (23/163)   [Kremote: Counting objects:  15% (25/163)   [Kremote: Counting objects:  16% (27/163)   [Kremote: Counting objects:  17% (28/163)   [Kremote: Counting objects:  18% (30/163)   [Kremote: Counting objects:  19% (31/163)   [Kremote: Counting objects:  20% (33/163)   [Kremote: Counting objects:  21% (35/163)   [Kremote: Counting objects:  22% (36/163)   [Kremote: Counting objects:  23% (38/163)   [Kremote: Counting objects:  24% (40/163)   [Kremote: Counting objects:  25% (41/163)   [Kremote: Counting objects:  26% (43/163)   [Kremote: Counting objects:  27% (45/163)   [Kremote: Counting objects:  28% (46/163)   [Kremote: Counting objects:  29% (48/163)   [Kremote: Counting objects:  30% (49/163)   [Kremote: Counting objects:  31% (51/163)   [Kremote: Counting objects:  32% (53/163)   [Kremote: Counting objects:  33% (54/163)   [Kremote: Counting objects:  34% (56/163)   [Kremote: Counting objects:  35% (58/163)   [Kremote: Counting objects:  36% (59/163)   [Kremote: Counting objects:  37% (61/163)   [Kremote: Counting objects:  38% (62/163)   [Kremote: Counting objects:  39% (64/163)   [Kremote: Counting objects:  40% (66/163)   [Kremote: Counting objects:  41% (67/163)   [Kremote: Counting objects:  42% (69/163)   [Kremote: Counting objects:  43% (71/163)   [Kremote: Counting objects:  44% (72/163)   [Kremote: Counting objects:  45% (74/163)   [Kremote: Counting objects:  46% (75/163)   [Kremote: Counting objects:  47% (77/163)   [Kremote: Counting objects:  48% (79/163)   [Kremote: Counting objects:  49% (80/163)   [Kremote: Counting objects:  50% (82/163)   [Kremote: Counting objects:  51% (84/163)   [Kremote: Counting objects:  52% (85/163)   [Kremote: Counting objects:  53% (87/163)   [Kremote: Counting objects:  54% (89/163)   [Kremote: Counting objects:  55% (90/163)   [Kremote: Counting objects:  56% (92/163)   [Kremote: Counting objects:  57% (93/163)   [Kremote: Counting objects:  58% (95/163)   [Kremote: Counting objects:  59% (97/163)   [Kremote: Counting objects:  60% (98/163)   [Kremote: Counting objects:  61% (100/163)   [Kremote: Counting objects:  62% (102/163)   [Kremote: Counting objects:  63% (103/163)   [Kremote: Counting objects:  64% (105/163)   [Kremote: Counting objects:  65% (106/163)   [Kremote: Counting objects:  66% (108/163)   [Kremote: Counting objects:  67% (110/163)   [Kremote: Counting objects:  68% (111/163)   [Kremote: Counting objects:  69% (113/163)   [Kremote: Counting objects:  70% (115/163)   [Kremote: Counting objects:  71% (116/163)   [Kremote: Counting objects:  72% (118/163)   [Kremote: Counting objects:  73% (119/163)   [Kremote: Counting objects:  74% (121/163)   [Kremote: Counting objects:  75% (123/163)   [Kremote: Counting objects:  76% (124/163)   [Kremote: Counting objects:  77% (126/163)   [Kremote: Counting objects:  78% (128/163)   [Kremote: Counting objects:  79% (129/163)   [Kremote: Counting objects:  80% (131/163)   [Kremote: Counting objects:  81% (133/163)   [Kremote: Counting objects:  82% (134/163)   [Kremote: Counting objects:  83% (136/163)   [Kremote: Counting objects:  84% (137/163)   [Kremote: Counting objects:  85% (139/163)   [Kremote: Counting objects:  86% (141/163)   [Kremote: Counting objects:  87% (142/163)   [Kremote: Counting objects:  88% (144/163)   [Kremote: Counting objects:  89% (146/163)   [Kremote: Counting objects:  90% (147/163)   [Kremote: Counting objects:  91% (149/163)   [Kremote: Counting objects:  92% (150/163)   [Kremote: Counting objects:  93% (152/163)   [Kremote: Counting objects:  94% (154/163)   [Kremote: Counting objects:  95% (155/163)   [Kremote: Counting objects:  96% (157/163)   [Kremote: Counting objects:  97% (159/163)   [Kremote: Counting objects:  98% (160/163)   [Kremote: Counting objects:  99% (162/163)   [Kremote: Counting objects: 100% (163/163)   [Kremote: Counting objects: 100% (163/163), done.[K
remote: Compressing objects:   1% (1/89)   [Kremote: Compressing objects:   2% (2/89)   [Kremote: Compressing objects:   3% (3/89)   [Kremote: Compressing objects:   4% (4/89)   [Kremote: Compressing objects:   5% (5/89)   [Kremote: Compressing objects:   6% (6/89)   [Kremote: Compressing objects:   7% (7/89)   [Kremote: Compressing objects:   8% (8/89)   [Kremote: Compressing objects:  10% (9/89)   [Kremote: Compressing objects:  11% (10/89)   [Kremote: Compressing objects:  12% (11/89)   [Kremote: Compressing objects:  13% (12/89)   [Kremote: Compressing objects:  14% (13/89)   [Kremote: Compressing objects:  15% (14/89)   [Kremote: Compressing objects:  16% (15/89)   [Kremote: Compressing objects:  17% (16/89)   [Kremote: Compressing objects:  19% (17/89)   [Kremote: Compressing objects:  20% (18/89)   [Kremote: Compressing objects:  21% (19/89)   [Kremote: Compressing objects:  22% (20/89)   [Kremote: Compressing objects:  23% (21/89)   [Kremote: Compressing objects:  24% (22/89)   [Kremote: Compressing objects:  25% (23/89)   [Kremote: Compressing objects:  26% (24/89)   [Kremote: Compressing objects:  28% (25/89)   [Kremote: Compressing objects:  29% (26/89)   [Kremote: Compressing objects:  30% (27/89)   [Kremote: Compressing objects:  31% (28/89)   [Kremote: Compressing objects:  32% (29/89)   [Kremote: Compressing objects:  33% (30/89)   [Kremote: Compressing objects:  34% (31/89)   [Kremote: Compressing objects:  35% (32/89)   [Kremote: Compressing objects:  37% (33/89)   [Kremote: Compressing objects:  38% (34/89)   [Kremote: Compressing objects:  39% (35/89)   [Kremote: Compressing objects:  40% (36/89)   [Kremote: Compressing objects:  41% (37/89)   [Kremote: Compressing objects:  42% (38/89)   [Kremote: Compressing objects:  43% (39/89)   [Kremote: Compressing objects:  44% (40/89)   [Kremote: Compressing objects:  46% (41/89)   [Kremote: Compressing objects:  47% (42/89)   [Kremote: Compressing objects:  48% (43/89)   [Kremote: Compressing objects:  49% (44/89)   [Kremote: Compressing objects:  50% (45/89)   [Kremote: Compressing objects:  51% (46/89)   [Kremote: Compressing objects:  52% (47/89)   [Kremote: Compressing objects:  53% (48/89)   [Kremote: Compressing objects:  55% (49/89)   [Kremote: Compressing objects:  56% (50/89)   [Kremote: Compressing objects:  57% (51/89)   [Kremote: Compressing objects:  58% (52/89)   [Kremote: Compressing objects:  59% (53/89)   [Kremote: Compressing objects:  60% (54/89)   [Kremote: Compressing objects:  61% (55/89)   [Kremote: Compressing objects:  62% (56/89)   [Kremote: Compressing objects:  64% (57/89)   [Kremote: Compressing objects:  65% (58/89)   [Kremote: Compressing objects:  66% (59/89)   [Kremote: Compressing objects:  67% (60/89)   [Kremote: Compressing objects:  68% (61/89)   [Kremote: Compressing objects:  69% (62/89)   [Kremote: Compressing objects:  70% (63/89)   [Kremote: Compressing objects:  71% (64/89)   [Kremote: Compressing objects:  73% (65/89)   [Kremote: Compressing objects:  74% (66/89)   [Kremote: Compressing objects:  75% (67/89)   [Kremote: Compressing objects:  76% (68/89)   [Kremote: Compressing objects:  77% (69/89)   [Kremote: Compressing objects:  78% (70/89)   [Kremote: Compressing objects:  79% (71/89)   [Kremote: Compressing objects:  80% (72/89)   [Kremote: Compressing objects:  82% (73/89)   [Kremote: Compressing objects:  83% (74/89)   [Kremote: Compressing objects:  84% (75/89)   [Kremote: Compressing objects:  85% (76/89)   [Kremote: Compressing objects:  86% (77/89)   [Kremote: Compressing objects:  87% (78/89)   [Kremote: Compressing objects:  88% (79/89)   [Kremote: Compressing objects:  89% (80/89)   [Kremote: Compressing objects:  91% (81/89)   [Kremote: Compressing objects:  92% (82/89)   [Kremote: Compressing objects:  93% (83/89)   [Kremote: Compressing objects:  94% (84/89)   [Kremote: Compressing objects:  95% (85/89)   [Kremote: Compressing objects:  96% (86/89)   [Kremote: Compressing objects:  97% (87/89)   [Kremote: Compressing objects:  98% (88/89)   [Kremote: Compressing objects: 100% (89/89)   [Kremote: Compressing objects: 100% (89/89), done.[K
Receiving objects:   0% (1/163)   Receiving objects:   1% (2/163)   Receiving objects:   2% (4/163)   Receiving objects:   3% (5/163)   Receiving objects:   4% (7/163)   Receiving objects:   5% (9/163)   Receiving objects:   6% (10/163)   Receiving objects:   7% (12/163)   Receiving objects:   8% (14/163)   Receiving objects:   9% (15/163)   Receiving objects:  10% (17/163)   Receiving objects:  11% (18/163)   Receiving objects:  12% (20/163)   Receiving objects:  13% (22/163)   Receiving objects:  14% (23/163)   Receiving objects:  15% (25/163)   Receiving objects:  16% (27/163)   Receiving objects:  17% (28/163)   Receiving objects:  18% (30/163)   Receiving objects:  19% (31/163)   Receiving objects:  20% (33/163)   Receiving objects:  21% (35/163)   Receiving objects:  22% (36/163)   Receiving objects:  23% (38/163)   Receiving objects:  24% (40/163)   Receiving objects:  25% (41/163)   Receiving objects:  26% (43/163)   Receiving objects:  27% (45/163)   Receiving objects:  28% (46/163)   Receiving objects:  29% (48/163)   Receiving objects:  30% (49/163)   Receiving objects:  31% (51/163)   Receiving objects:  32% (53/163)   Receiving objects:  33% (54/163)   Receiving objects:  34% (56/163)   Receiving objects:  35% (58/163)   Receiving objects:  36% (59/163)   remote: Total 163 (delta 99), reused 131 (delta 73), pack-reused 0[K
Receiving objects:  37% (61/163)   Receiving objects:  38% (62/163)   Receiving objects:  39% (64/163)   Receiving objects:  40% (66/163)   Receiving objects:  41% (67/163)   Receiving objects:  42% (69/163)   Receiving objects:  43% (71/163)   Receiving objects:  44% (72/163)   Receiving objects:  45% (74/163)   Receiving objects:  46% (75/163)   Receiving objects:  47% (77/163)   Receiving objects:  48% (79/163)   Receiving objects:  49% (80/163)   Receiving objects:  50% (82/163)   Receiving objects:  51% (84/163)   Receiving objects:  52% (85/163)   Receiving objects:  53% (87/163)   Receiving objects:  54% (89/163)   Receiving objects:  55% (90/163)   Receiving objects:  56% (92/163)   Receiving objects:  57% (93/163)   Receiving objects:  58% (95/163)   Receiving objects:  59% (97/163)   Receiving objects:  60% (98/163)   Receiving objects:  61% (100/163)   Receiving objects:  62% (102/163)   Receiving objects:  63% (103/163)   Receiving objects:  64% (105/163)   Receiving objects:  65% (106/163)   Receiving objects:  66% (108/163)   Receiving objects:  67% (110/163)   Receiving objects:  68% (111/163)   Receiving objects:  69% (113/163)   Receiving objects:  70% (115/163)   Receiving objects:  71% (116/163)   Receiving objects:  72% (118/163)   Receiving objects:  73% (119/163)   Receiving objects:  74% (121/163)   Receiving objects:  75% (123/163)   Receiving objects:  76% (124/163)   Receiving objects:  77% (126/163)   Receiving objects:  78% (128/163)   Receiving objects:  79% (129/163)   Receiving objects:  80% (131/163)   Receiving objects:  81% (133/163)   Receiving objects:  82% (134/163)   Receiving objects:  83% (136/163)   Receiving objects:  84% (137/163)   Receiving objects:  85% (139/163)   Receiving objects:  86% (141/163)   Receiving objects:  87% (142/163)   Receiving objects:  88% (144/163)   Receiving objects:  89% (146/163)   Receiving objects:  90% (147/163)   Receiving objects:  91% (149/163)   Receiving objects:  92% (150/163)   Receiving objects:  93% (152/163)   Receiving objects:  94% (154/163)   Receiving objects:  95% (155/163)   Receiving objects:  96% (157/163)   Receiving objects:  97% (159/163)   Receiving objects:  98% (160/163)   Receiving objects:  99% (162/163)   Receiving objects: 100% (163/163)   Receiving objects: 100% (163/163), 77.14 KiB | 1.98 MiB/s, done.
Resolving deltas:   0% (0/99)   Resolving deltas:  23% (23/99)   Resolving deltas:  25% (25/99)   Resolving deltas:  49% (49/99)   Resolving deltas:  50% (50/99)   Resolving deltas: 100% (99/99)   Resolving deltas: 100% (99/99), done.
travis_time:end:0f5b3a67:start=1565270289417705116,finish=1565270290690973676,duration=1273268560[0K$ cd h4cc/awesome-elixir
travis_time:start:2a0c9d98[0K$ git fetch origin +refs/pull/4604/merge:
remote: Enumerating objects: 6, done.[K
remote: Counting objects:  16% (1/6)   [Kremote: Counting objects:  33% (2/6)   [Kremote: Counting objects:  50% (3/6)   [Kremote: Counting objects:  66% (4/6)   [Kremote: Counting objects:  83% (5/6)   [Kremote: Counting objects: 100% (6/6)   [Kremote: Counting objects: 100% (6/6), done.[K
remote: Compressing objects:  25% (1/4)   [Kremote: Compressing objects:  50% (2/4)   [Kremote: Compressing objects:  75% (3/4)   [Kremote: Compressing objects: 100% (4/4)   [Kremote: Compressing objects: 100% (4/4), done.[K
remote: Total 4 (delta 2), reused 1 (delta 0), pack-reused 0[K
Unpacking objects:  25% (1/4)   Unpacking objects:  50% (2/4)   Unpacking objects:  75% (3/4)   Unpacking objects: 100% (4/4)   Unpacking objects: 100% (4/4), done.
From https://github.com/h4cc/awesome-elixir
 * branch            refs/pull/4604/merge -> FETCH_HEAD
travis_time:end:2a0c9d98:start=1565270290695733492,finish=1565270291609171078,duration=913437586[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K
[33;1m19.3 is not installed. Downloading and installing pre-build binary.[0m
[33;1mDownloading archive: https://storage.googleapis.com/travis-ci-language-archives/erlang/binaries/ubuntu/16.04/x86_64/erlang-19.3-nonroot.tar.bz2[0m
travis_time:start:0e896ee0[0K$ wget -o ${TRAVIS_HOME}/erlang.tar.bz2 ${archive_url}
travis_time:end:0e896ee0:start=1565270291724318220,finish=1565270292443253644,duration=718935424[0Ktravis_time:start:1a3946e7[0K$ mkdir -p ~/otp && tar -xf erlang-19.3-nonroot.tar.bz2 -C ~/otp/
travis_time:end:1a3946e7:start=1565270292447893744,finish=1565270300243728549,duration=7795834805[0Ktravis_time:start:135d8500[0K$ mkdir -p ~/.kerl
travis_time:end:135d8500:start=1565270300248629078,finish=1565270300253013264,duration=4384186[0Ktravis_time:start:0c01b7f8[0K$ echo '19.3,19.3' >> ~/.kerl/otp_builds
travis_time:end:0c01b7f8:start=1565270300257316189,finish=1565270300264942514,duration=7626325[0Ktravis_time:start:1f79cd0c[0K$ echo '19.3 ${TRAVIS_HOME}/otp/19.3' >> ~/.kerl/otp_builds
travis_time:end:1f79cd0c:start=1565270300269658320,finish=1565270300272873973,duration=3215653[0Ktravis_time:start:19497802[0K$ source ${TRAVIS_HOME}/otp/19.3/activate
travis_time:end:19497802:start=1565270300278428962,finish=1565270300285778556,duration=7349594[0Ktravis_fold:start:elixir[0KInstalling Elixir 1.4.2
travis_time:start:2f924198[0K$ wget https://repo.hex.pm/builds/elixir/v1.4.2-otp-19.zip
--2019-08-08 13:18:20--  https://repo.hex.pm/builds/elixir/v1.4.2-otp-19.zip
Resolving repo.hex.pm (repo.hex.pm)... 151.101.2.2, 151.101.66.2, 151.101.130.2, ...
Connecting to repo.hex.pm (repo.hex.pm)|151.101.2.2|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 3754936 (3.6M) [application/zip]
Saving to: ‘v1.4.2-otp-19.zip’

v1.4.2-otp-19.zip     0%[                    ]       0  --.-KB/s               v1.4.2-otp-19.zip    77%[==============>     ]   2.79M  13.5MB/s               v1.4.2-otp-19.zip   100%[===================>]   3.58M  17.1MB/s    in 0.2s    

2019-08-08 13:18:20 (17.1 MB/s) - ‘v1.4.2-otp-19.zip’ saved [3754936/3754936]

travis_time:end:2f924198:start=1565270300289959548,finish=1565270300676041653,duration=386082105[0K$ echo 'export ELIXIR_VERSION=1.4.2
    export PATH=${TRAVIS_HOME}/.kiex/elixirs/elixir-1.4.2/bin:$PATH
    export MIX_ARCHIVES=${TRAVIS_HOME}/.kiex/mix/elixir-1.4.2' > ${TRAVIS_HOME}/.kiex/elixirs/elixir-1.4.2.env
$ kiex use 1.4.2
Using 1.4.2
travis_fold:end:elixir[0K$ elixir --version
Erlang/OTP 19 [erts-8.3] [source] [64-bit] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]

Elixir 1.4.2
travis_fold:start:before_install[0Ktravis_time:start:2b9906a8[0K$ cd ./tests
travis_time:end:2b9906a8:start=1565270300998861744,finish=1565270301001903836,duration=3042092[0Ktravis_fold:end:before_install[0Ktravis_fold:start:install.rebar[0Ktravis_time:start:0f4e198c[0K$ mix local.rebar --force
[32m* creating [0m/home/travis/.mix/rebar[0m
[32m* creating [0m/home/travis/.mix/rebar3[0m
travis_time:end:0f4e198c:start=1565270301006832414,finish=1565270302604012800,duration=1597180386[0Ktravis_fold:end:install.rebar[0Ktravis_fold:start:install.hex[0Ktravis_time:start:26506989[0K$ mix local.hex --force
[32m* creating [0m/home/travis/.kiex/mix/elixir-1.4.2/hex-0.20.1[0m
travis_time:end:26506989:start=1565270302609276387,finish=1565270303694422455,duration=1085146068[0Ktravis_fold:end:install.hex[0Ktravis_fold:start:install.deps[0Ktravis_time:start:101cae25[0K$ mix deps.get
Resolving Hex dependencies...
Dependency resolution completed:
Unchanged:
  certifi 1.1.0
  earmark 1.2.2
  hackney 1.8.0
  httpoison 0.11.2
  idna 4.0.0
  metrics 1.0.1
  mimerl 1.0.2
  ssl_verify_fun 1.1.1
* Getting earmark (Hex package)
* Getting httpoison (Hex package)
* Getting hackney (Hex package)
* Getting certifi (Hex package)
* Getting idna (Hex package)
* Getting metrics (Hex package)
* Getting mimerl (Hex package)
* Getting ssl_verify_fun (Hex package)
travis_time:end:101cae25:start=1565270303699760647,finish=1565270304919416094,duration=1219655447[0Ktravis_fold:end:install.deps[0Ktravis_time:start:0c91c0f4[0K$ mix run check.exs
===> Compiling idna
===> Compiling mimerl
===> Compiling metrics
==> ssl_verify_fun (compile)
Compiled src/ssl_verify_util.erl
Compiled src/ssl_verify_fingerprint.erl
Compiled src/ssl_verify_pk.erl
Compiled src/ssl_verify_hostname.erl
===> Compiling certifi
===> Compiling hackney
==> earmark
Compiling 3 files (.erl)
Compiling 25 files (.ex)
[33mwarning: [0mimplementation not provided for predefined defp hard_line_breaks/2
  lib/earmark/inline.ex:248

Generated earmark app
==> httpoison
Compiling 2 files (.ex)
Generated httpoison app
==> awesome_elixir
Generated awesome_elixir app
[33mwarning: [0mvariable "t" is unused
  check.exs:55

[debug] Using Earmark to parse to data structure we can work with.
[debug] Ensure that there is a header at first.
[debug] Ensure that there is a introduction.
[debug] Ensure that there is a +1 hint paragraph.
[debug] Ensure that there is info about other curated lists of packages.
[debug] Ensure that there is a table of content list.
[debug] Parse table of content to list of categories.
[debug] Parse table of content to list of resources.
--------- START
-- Actors
	'dflow' https://github.com/dalmatinerdb/dflow 'Pipelined flow processing engine'
	'exactor' https://github.com/sasa1977/exactor 'Helpers for easier implementation of actors in Elixir'
	'exos' https://github.com/awetzel/exos 'A Port Wrapper which forwards cast and call to a linked Port'
	'flowex' https://github.com/antonmi/flowex 'Railway Flow-Based Programming with Elixir GenStage'
	'mon_handler' https://github.com/tattdcodemonkey/mon_handler 'A minimal GenServer that monitors a given GenEvent handler'
	'pool_ring' https://github.com/camshaft/pool_ring 'Create a pool based on a hash ring'
	'poolboy' https://github.com/devinus/poolboy 'A hunky Erlang worker pool factory'
	'pooler' https://github.com/seth/pooler 'An OTP Process Pool Application'
	'sbroker' https://github.com/fishcakez/sbroker 'Sojourn-time based active queue management library'
	'workex' https://github.com/sasa1977/workex 'Backpressure and flow control in EVM processes'
-- Algorithms and Data structures
	'array' https://github.com/takscape/elixir-array 'An Elixir wrapper library for Erlang's array'
	'aruspex' https://github.com/dkendal/aruspex 'Aruspex is a configurable constraint solver, written purely in Elixir'
	'bimap' https://github.com/mkaput/elixir-bimap 'Pure Elixir implementation of [bidirectional maps](https://en.wikipedia.org/wiki/Bidirectional_map) and multimaps'
	'bitmap' https://github.com/hashd/bitmap-elixir 'Pure Elixir implementation of [bitmaps](https://en.wikipedia.org/wiki/Bitmap)'
	'blocking_queue' https://github.com/joekain/BlockingQueue 'BlockingQueue is a simple queue implemented as a GenServer. It has a fixed maximum length established when it is created'
	'bloomex' https://github.com/gmcabrita/bloomex 'A pure Elixir implementation of Scalable Bloom Filters'
	'clope' https://github.com/ayrat555/clope 'Elixir implementation of [CLOPE](http://www.inf.ufrgs.br/~alvares/CMP259DCBD/clope.pdf): A Fast and Effective Clustering Algorithm for Transactional Data'
	'combination' https://github.com/seantanly/elixir-combination 'Elixir library to generate combinations and permutations from Enumerable collection'
	'count_buffer' https://github.com/camshaft/count_buffer 'Buffer a large set of counters and flush periodically'
	'cuckoo' https://github.com/gmcabrita/cuckoo 'A pure Elixir implementation of [Cuckoo Filters](https://www.cs.cmu.edu/%7Edga/papers/cuckoo-conext2014.pdf)'
	'cuid' https://github.com/duailibe/cuid 'Collision-resistant ids optimized for horizontal scaling and sequential lookup performance, written in Elixir'
	'data_morph' https://hex.pm/packages/data_morph 'Create Elixir structs from data'
	'dataframe' https://github.com/JordiPolo/dataframe 'Package providing functionality similar to Python's Pandas or R's data.frame()'
	'datastructures' https://github.com/meh/elixir-datastructures 'A collection of protocols, implementations and wrappers to work with data structures'
	'def_memo' https://github.com/os6sense/DefMemo 'A memoization macro (defmemo) for elixir using a genserver backing store'
	'dlist' https://github.com/stocks29/dlist 'Deque implementations in Elixir'
	'eastar' https://github.com/herenowcoder/eastar 'A* graph pathfinding in pure Elixir'
	'ecto_materialized_path' https://github.com/asiniy/ecto_materialized_path 'Tree structure, hierarchy and ancestry for the ecto models'
	'ecto_state_machine' https://github.com/asiniy/ecto_state_machine 'Finite state machine pattern implemented on Elixir and  adopted for Ecto'
	'elistrix' https://github.com/tobz/elistrix 'A latency / fault tolerance library to help isolate your applications from an uncertain world of slow or failed services'
	'emel' https://github.com/mrdimosthenis/emel 'A simple and functional machine learning library written in elixir'
	'erlang-algorithms' https://github.com/aggelgian/erlang-algorithms 'Implementations of popular data structures and algorithms'
	'exconstructor' https://github.com/appcues/exconstructor 'An Elixir library for generating struct constructors that handle external data with ease'
	'exfsm' https://github.com/awetzel/exfsm 'Simple elixir library to define a static FSM'
	'exkad' https://github.com/rozap/exkad 'A [kademlia](https://en.wikipedia.org/wiki/Kademlia) implementation in Elixir'
	'exmatrix' https://github.com/a115/exmatrix 'ExMatrix is a small library for working with matrices, originally developed for testing matrix multiplication in parallel'
	'ezcryptex' https://github.com/stocks29/ezcryptex 'Thin layer on top of Cryptex'
	'fnv' https://github.com/asaaki/fnv.ex 'Pure Elixir implementation of Fowler–Noll–Vo hash functions'
	'fsm' https://github.com/sasa1977/fsm 'Finite state machine as a functional data structure'
	'fuse' https://github.com/jlouis/fuse 'This application implements a so-called circuit-breaker for Erlang'
	'gen_fsm' https://github.com/pavlos/gen_fsm 'A generic finite state-machine - Elixir wrapper around OTP's gen_fsm'
	'graphmath' https://github.com/crertel/graphmath 'An Elixir library for performing 2D and 3D mathematics'
	'hash_ring_ex' https://github.com/reset/hash-ring-ex 'A consistent hash-ring implementation for Elixir'
	'hypex' https://github.com/whitfin/hypex 'Fast Elixir implementation of HyperLogLog'
	'indifferent' https://github.com/vic/indifferent 'Indifferent access for Elixir maps/list/tuples with custom key conversion'
	'isaac' https://github.com/arianvp/elixir-isaac 'Isaac is an elixir module for ISAAC: a fast cryptographic random number generator'
	'jumper' https://github.com/whitfin/jumper 'Jump consistent hash implementation in Elixir (without NIFs)'
	'key2value' https://github.com/okeuday/key2value 'Erlang 2-way Set Associative Map'
	'lfsr' https://github.com/pma/lfsr 'Elixir implementation of a binary Galois Linear Feedback Shift Register'
	'loom' https://github.com/asonge/loom 'A CRDT library with δ-CRDT support'
	'luhn' https://github.com/ma2gedev/luhn_ex 'Luhn algorithm in Elixir'
	'lz4' https://github.com/szktty/erlang-lz4 'LZ4 bindings for Erlang for fast data compressing'
	'machinery' https://github.com/joaomdmoura/machinery 'A state machine library for structs in general, it integrates with Phoenix out of the box'
	'mason' https://github.com/spacepilots/mason 'Coerce maps into structs. This is helpful e.g. when you interface a REST API and want to create a struct from the response'
	'matrex' https://github.com/versilov/matrex 'A blazing fast matrix library for Elixir/Erlang with C implementation using CBLAS'
	'merkle_tree' https://github.com/yosriady/merkle_tree 'A Merkle hash tree implementation in Elixir'
	'minmaxlist' https://github.com/seantanly/elixir-minmaxlist 'Elixir library extending `Enum.min_by/2`, `Enum.max_by/2` and `Enum.min_max_by/2` to return a list of results instead of just one'
	'mmath' https://github.com/dalmatinerdb/mmath 'A library for performing math on number 'arrays' in binaries'
	'monad' https://github.com/rmies/monad 'Haskell inspired monads in Elixir stylish syntax'
	'monadex' https://github.com/rob-brown/MonadEx 'Upgrade your Elixir pipelines with monads'
	'murmur' https://github.com/gmcabrita/murmur 'A pure Elixir implementation of the non-cryptographic hash Murmur3'
	'nary_tree' https://github.com/medhiwidjaja/nary_tree 'An Elixir implementation of generic n-ary tree data structure'
	'natural_sort' https://github.com/DanCouper/natural_sort 'Elixir natural sort implementation for lists of strings'
	'navigation_tree' https://github.com/gutschilla/elixir-navigation-tree 'A navigation tree representation with helpers to generate HTML out of it'
	'parallel_stream' https://github.com/beatrichartz/parallel_stream 'A parallel stream implementation for Elixir'
	'paratize' https://github.com/seantanly/elixir-paratize 'Elixir library providing some handy parallel processing (execution) facilities that support configuring number of workers and timeout'
	'parex' https://github.com/StevenJL/parex 'Parallel Execute (Parex) is an Elixir module for executing multiple (slow) processes in parallel'
	'qex' https://github.com/princemaple/elixir-queue 'Wraps `:queue`, with improved API and `Inspect`, `Collectable` and `Enumerable` protocol implementations'
	'ratio' https://github.com/Qqwy/elixir-rational 'Adds Rational Numbers and allows them to be used in common arithmatic operations. Also supports conversion between Floats and Rational Numbers'
	'red_black_tree' https://github.com/SenecaSystems/red_black_tree 'Red-Black tree implementation in Elixir'
	'remodel' https://github.com/stavro/remodel 'An Elixir presenter package used to transform map structures'
	'rendezvous' https://github.com/timdeputter/Rendezvous 'Implementation of the Rendezvous or Highest Random Weight (HRW) hashing algorithm in Elixir'
	'rock' https://github.com/ayrat555/rock 'Elixir implementation of ROCK: A Robust Clustering Algorithm for Categorical Attributes'
	'sfmt' https://github.com/jj1bdx/sfmt-erlang/ 'SIMD-oriented Fast Mersenne Twister (SFMT) for Erlang'
	'simhash' https://github.com/UniversalAvenue/simhash-ex 'Simhash implementation using Siphash and N-grams'
	'sleeplocks' https://github.com/whitfin/sleeplocks 'BEAM friendly spinlocks for Elixir/Erlang'
	'sorted_set' https://github.com/SenecaSystems/sorted_set 'Sorted Sets for Elixir'
	'spacesaving' https://github.com/rozap/spacesaving 'stream count distinct element estimation using the "space saving" algorithm'
	'structurez' https://github.com/hamiltop/structurez 'A playground for data structures in Elixir'
	'supermemo' https://github.com/edubkendo/supermemo 'An Elixir implementation of the [Supermemo 2 algorithm](https://www.supermemo.com/english/ol/sm2.htm)'
	'tfidf' https://github.com/OCannings/tf-idf 'An Elixir implementation of term frequency–inverse document frequency'
	'the_fuzz' https://github.com/smashedtoatoms/the_fuzz 'Fuzzy string-matching algorithm implementations'
	'tinymt' https://github.com/jj1bdx/tinymt-erlang/ 'Tiny Mersenne Twister (TinyMT) for Erlang'
	'trie' https://github.com/okeuday/trie 'Erlang Trie Implementation'
	'witchcraft' https://github.com/expede/witchcraft 'Common algebraic structures and functions for Elixir'
	'zipper_tree' https://github.com/Dkendal/zipper_tree 'Variadic arity tree with a zipper for Elixir'
-- Applications
	'bpe' https://github.com/spawnproc/bpe 'Business Process Engine in Erlang'
	'CaptainFact' https://github.com/CaptainFact/captain-fact-api 'A collaborative, real-time video fact-checking platform'
	'Consolex' https://github.com/sivsushruth/consolex 'Consolex is a tool that allows you to attach a web based console to any mix project'
	'dragonfly_server' https://github.com/cloud8421/dragonfly-server 'Elixir app to serve Dragonfly images'
	'ExChat' https://github.com/tony612/exchat 'A Slack-like app by Elixir, Phoenix & React(redux)'
	'Exon' https://github.com/tchoutri/Exon 'A “mess manager” developed in Elixir and provides a simple API to manage & document your stuff'
	'ExShop' https://github.com/authentic-pixels/ex-shop 'Digital goods shop & blog created using Phoenix framework'
	'Hydra' https://github.com/doomspork/hydra 'A multi-headed beast: API gateway, request cache, and data transformations'
	'majremind' https://bitbucket.org/Anwen/majremind 'A self-maintained database of your updated server which tells you which one needs to be updated'
	'medex' https://github.com/xerions/medex 'Medical Examination - application for register health check callbacks and represent their state via HTTP'
	'medusa_server' https://github.com/IcaliaLabs/medusa_server 'A simple cowboy web server written in Elixir to stack images'
	'n2o' https://github.com/synrc/n2o 'WebSocket Application Server'
	'Nvjorn' https://github.com/tchoutri/Nvjorn 'A multi-protocol network services monitor written in Elixir using Poolboy'
	'Phoenix Battleship' https://github.com/bigardone/phoenix-battleship 'The Good Old game built with Elixir, Phoenix Framework, React and Redux'
	'Phoenix Toggl' https://github.com/bigardone/phoenix-toggl 'Toggl tribute done in Elixir, Phoenix Framework, React and Redux'
	'Phoenix Trello' https://github.com/bigardone/phoenix-trello 'Trello tribute done in Elixir, Phoenix Framework, React and Redux'
	'poxa' https://github.com/edgurgel/poxa 'Open Pusher implementation, compatible with Pusher libraries'
	'Queerlink' https://github.com/Queertoo/Queerlink 'A simple yet efficient URL shortening service written in Elixir'
	'RemoteRetro' https://github.com/stride-nyc/remote_retro 'A real-time application for conducting Agile retrospectives at [remoteretro.org](https://remoteretro.org) written in Elixir/Phoenix/React'
	'Sprint Poker' https://github.com/elpassion/sprint-poker 'Online estimation tool for Agile teams, written using Elixir Lang, Phoenix Framework and React'
	'Stabby Flies' https://meaty-spiffy-hermitcrab.gigalixirapp.com 'A multiplayer fighting game built with Elixir, Phoenix and Pixi'
	'Startup Job' https://github.com/tsurupin/job_search 'An umbrella project to search startup jobs scraped from websites written in Elixir/Phoenix and React/Redux'
	'tty2048' https://github.com/lexmag/tty2048 'Terminal-based 2048 game written in Elixir'
	'uai_shot' https://github.com/sergioaugrod/uai_shot 'A multiplayer ship game built with Elixir, Phoenix Framework and Phaser'
-- Artificial Intelligence
	'Exnn' https://github.com/zampino/exnn 'Evolutive Neural Networks framework à la G.Sher written in Elixir'
	'Neat-Ex' https://gitlab.com/onnoowl/Neat-Ex 'An Elixir implementation of the NEAT algorithm'
	'simple_bayes' https://github.com/fredwu/simple_bayes 'A Simple Bayes / Naive Bayes implementation in Elixir'
-- Audio and Sounds
	'erlaudio' https://github.com/asonge/erlaudio 'Erlang PortAudio bindings'
	'firmata' https://github.com/entone/firmata 'This package implements the Firmata protocol'
	'synthex' https://github.com/bitgamma/synthex 'A signal synthesis library'
-- Authentication
	'aeacus' https://github.com/zmoshansky/aeacus 'A simple configurable identity/password authentication module (Compatible with Ecto/Phoenix)'
	'apache_passwd_md5' https://github.com/kevinmontuori/Apache.PasswdMD5 'Apache/APR Style Password Hashing'
	'aws_auth' https://github.com/bryanjos/aws_auth 'AWS Signature Version 4 Signing Library for Elixir'
	'basic_auth' https://github.com/CultivateHQ/basic_auth 'Elixir Plug to easily add HTTP basic authentication to an app'
	'coherence' https://github.com/smpallen99/coherence 'Coherence is a full featured, configurable authentication system for Phoenix'
	'doorman' https://github.com/BlakeWilliams/doorman 'Tools to make Elixir authentication simple and flexible'
	'github_oauth' https://github.com/lidashuang/github_oauth 'A simple github oauth library'
	'goth' https://github.com/peburrows/goth 'OAuth 2.0 library for server to server applications via Google Cloud APIs'
	'guardian' https://github.com/ueberauth/guardian 'An authentication framework for use with Elixir applications'
	'htpasswd' https://github.com/kevinmontuori/Apache.htpasswd 'Apache htpasswd file reader/writer in Elixir'
	'mojoauth' https://github.com/mojolingo/mojo-auth.ex 'MojoAuth implementation in Elixir'
	'oauth2' https://github.com/scrogson/oauth2 'An OAuth 2.0 client library for Elixir'
	'oauth2_facebook' https://github.com/chrislaskey/oauth2_facebook 'A Facebook OAuth2 Provider for Elixir'
	'oauth2_github' https://github.com/chrislaskey/oauth2_github 'A GitHub OAuth2 Provider for Elixir'
	'oauth2cli' https://github.com/mgamini/oauth2cli-elixir 'Simple OAuth2 client written for Elixir'
	'oauth2ex' https://github.com/parroty/oauth2ex 'Another OAuth 2.0 client library for Elixir'
	'oauther' https://github.com/lexmag/oauther 'An OAuth 1.0 implementation for Elixir'
	'passwordless_auth' https://github.com/madebymany/passwordless_auth 'Simple passwordless login or 2-factor / multi-factor authentication for Elixir'
	'phauxth' https://github.com/riverrun/phauxth 'Authentication library for Phoenix 1.3 and other Plug-based apps'
	'phoenix_client_ssl' https://github.com/jshmrtn/phoenix-client-ssl 'Client SSL Authentication Plugs for Phoenix and other Plug-based apps'
	'samly' https://github.com/handnot2/samly 'SAML SP SSO made easy ([Doc](https://hexdocs.pm/samly/readme.html))'
	'sesamex' https://github.com/khusnetdinov/sesamex 'Another simple and flexible authentication solution in 5 minutes!'
	'shield' https://github.com/mustafaturan/shield 'An OAuth 2.0 provider library and implementation for Phoenix Framework'
	'sigaws' https://github.com/handnot2/sigaws 'AWS Signature V4 signing and verification library ([Doc](https://hexdocs.pm/sigaws/Sigaws.html))'
	'ueberauth' https://github.com/ueberauth/ueberauth 'An Elixir Authentication System for Plug-based Web Applications'
	'ueberauth_auth0' https://hex.pm/packages/ueberauth_auth0 'An Ueberauth strategy for using Auth0 to authenticate your users'
	'ueberauth_cas' https://github.com/marceldegraaf/ueberauth_cas 'Central Authentication Service strategy for Überauth'
	'ueberauth_facebook' https://github.com/ueberauth/ueberauth_Facebook 'Facebook OAuth2 Strategy for Überauth'
	'ueberauth_foursquare' https://github.com/borodiychuk/ueberauth_foursquare 'Foursquare OAuth2 Strategy for Überauth'
	'ueberauth_github' https://github.com/ueberauth/ueberauth_github 'A GitHub strategy for Überauth'
	'ueberauth_google' https://github.com/ueberauth/ueberauth_google 'A Google strategy for Überauth'
	'ueberauth_identity' https://github.com/ueberauth/ueberauth_identity 'A simple username/password strategy for Überauth'
	'ueberauth_line' https://github.com/alexfilatov/ueberauth_line 'LINE Strategy for Überauth'
	'ueberauth_microsoft' https://github.com/swelham/ueberauth_microsoft 'A Microsoft strategy for Überauth'
	'ueberauth_slack' https://github.com/ueberauth/ueberauth_slack 'A Slack strategy for Überauth'
	'ueberauth_twitter' https://github.com/ueberauth/ueberauth_twitter 'Twitter Strategy for Überauth'
	'ueberauth_vk' https://github.com/sobolevn/ueberauth_vk '[vk.com](https://vk.com) Strategy for Überauth'
	'ueberauth_weibo' https://github.com/he9qi/ueberauth_weibo '[Weibo](https://weibo.com) OAuth2 Strategy for Überauth'
-- Authorization
	'authorize' https://github.com/jfrolich/authorize 'Rule based authorization, for advanced authorization rules'
	'bodyguard' https://github.com/schrockwell/bodyguard 'A flexible authorization library for Phoenix applications'
	'canada' https://github.com/jarednorman/canada 'A simple authorization library that provides a friendly interface using declarative permission rules'
	'canary' https://github.com/cpjk/canary 'An authorization library for Elixir applications that restricts what resources the current user is allowed to access'
	'speakeasy' https://github.com/coryodaniel/speakeasy 'Middleware based authentication and authorization for Absinthe GraphQL powered by Bodyguard'
	'terminator' https://github.com/MilosMosovsky/terminator 'Database based authorization (ACL), with custom DSL rules for requiring needed permissions'
-- Behaviours and Interfaces
	'connection' https://github.com/fishcakez/connection 'Connection behaviour for connection processes. The API is superset of the GenServer API'
	'gen_state_machine' https://github.com/antipax/gen_state_machine 'Elixir wrapper for gen_statem'
	'stockastic' https://github.com/shanewilton/stockastic 'Simple Elixir wrapper for the Stockfighter API'
-- Benchmarking
	'benchee' https://github.com/PragTob/benchee 'Easy and extensible benchmarking in Elixir'
	'benchfella' https://github.com/alco/benchfella 'Benchmarking tool for Elixir'
	'bmark' https://github.com/joekain/bmark 'A benchmarking tool for Elixir'
-- Bittorrent
	'bento' https://github.com/folz/bento 'An incredibly fast, correct, pure-Elixir Bencoding library'
	'tracker_request' https://github.com/alehander42/tracker_request 'Dealing with bittorrent tracker requests and responses'
	'wire' https://github.com/alehander42/wire 'Encode and decode bittorrent peer wire protocol messages with Elixir'
-- BSON
	'BSONMap' https://github.com/Nebo15/bsoneach 'Elixir package that applies a function to each document in a BSON file and has a low memory consumption'
	'cyanide' https://github.com/ispirata/cyanide 'An Elixir BSON encoding/decoding library'
-- Build Tools
	'active' https://github.com/synrc/active 'Recompilation and Reloading on FileSystem changes'
	'coffee_rotor' https://github.com/HashNuke/coffee_rotor 'Rotor plugin to compile CoffeeScript files'
	'dismake' https://github.com/jarednorman/dismake 'Mix compiler running make'
	'etude' https://github.com/exstruct/etude 'Parallel computation coordination compiler for Erlang/Elixir'
	'ExMake' https://github.com/lycus/exmake 'A modern, scriptable, dependency-based build tool loosely based on Make principles'
	'Exscript' https://github.com/liveforeverx/exscript 'Elixir escript library'
	'mad' https://github.com/synrc/mad 'Small and Fast Rebar Replacement'
	'pc' https://github.com/blt/port_compiler 'A rebar3 port compiler'
	'reaxt' https://github.com/awetzel/reaxt 'React template into your Elixir application for server rendering'
	'rebar3_abnfc_plugin' https://github.com/surik/rebar3_abnfc_plugin 'Rebar3 abnfc compiler'
	'rebar3_asn1_compiler' https://github.com/pyykkis/rebar3_asn1_compiler 'Plugin for compiling ASN.1 modules with Rebar3'
	'rebar3_auto' https://github.com/vans163/rebar3_auto 'Rebar3 plugin to auto compile and reload on file change'
	'rebar3_diameter_compiler' https://github.com/carlosedp/rebar3_diameter_compiler 'Compile diameter .dia files in rebar3 projects'
	'rebar3_eqc' https://github.com/kellymclaughlin/rebar3-eqc-plugin 'A rebar3 plugin to enable the execution of Erlang QuickCheck properties'
	'rebar3_exunit' https://github.com/processone/rebar3_exunit 'A plugin to run Elixir ExUnit tests from rebar3 build tool'
	'rebar3_idl_compiler' https://github.com/sebastiw/rebar3_idl_compiler 'This is a plugin for compiling Erlang IDL files using Rebar3'
	'rebar3_live' https://github.com/pvmart/rebar3_live 'Rebar3 live plugin'
	'rebar3_neotoma_plugin' https://github.com/zamotivator/rebar3_neotoma_plugin 'Rebar3 neotoma (Parser Expression Grammar) compiler'
	'rebar3_protobuffs' https://github.com/benoitc/rebar3_protobuffs 'rebar3 protobuffs provider using protobuffs from Basho'
	'rebar3_run' https://github.com/tsloughter/rebar3_run 'Run a release with one simple command'
	'rebar3_yang_plugin' https://github.com/surik/rebar3_yang_plugin 'Rebar3 yang compiler'
	'reltool_util' https://github.com/okeuday/reltool_util 'Erlang reltool utility functionality application'
	'relx' https://github.com/erlware/relx 'A release assembler for Erlang'
	'remix' https://github.com/AgilionApps/remix 'Automatic recompilation of Mix code on file change'
	'rotor' https://github.com/HashNuke/rotor 'Super-simple build system for Elixir'
	'sass_elixir' https://github.com/zamith/sass_elixir 'A sass plugin for Elixir projects'
-- Caching
	'cachex' https://github.com/whitfin/cachex 'A powerful caching library for Elixir with a wide featureset'
	'con_cache' https://github.com/sasa1977/con_cache 'ConCache is an ETS based key/value storage'
	'elixir_locker' https://github.com/tsharju/elixir_locker 'Locker is an Elixir wrapper for the locker Erlang library that provides some useful libraries that should make using locker a bit easier'
	'gen_spoxy' https://github.com/SpotIM/gen_spoxy 'Caching made fun'
	'jc' https://github.com/jr0senblum/jc 'In-memory, distributable cache with pub/sub, JSON-query and consistency support'
	'locker' https://github.com/wooga/locker 'Atomic distributed "check and set" for short-lived keys'
	'lru_cache' https://github.com/arago/lru_cache 'Simple LRU Cache, implemented with ets'
	'memoize' https://github.com/melpon/memoize 'A memoization macro that easily cache function'
	'nebulex' https://github.com/cabol/nebulex 'A fast, flexible and extensible distributed and local caching library for Elixir'
	'stash' https://github.com/whitfin/stash 'A straightforward, fast, and user-friendly key/value store'
-- Chatting
	'alice' https://github.com/alice-bot/alice 'A Slack bot framework for Elixir'
	'chatty' https://github.com/alco/chatty 'A basic IRC client that is most useful for writing a bot'
	'cog' https://github.com/operable/cog 'Cog is an open chatops platform that gives you a secure, collaborative command line right in your chat window'
	'ExIrc' https://github.com/bitwalker/exirc 'IRC client adapter for Elixir projects'
	'ExMustang' https://github.com/techgaun/ex_mustang 'A simple, clueless slackbot and collection of responders'
	'Guri' https://github.com/elvio/guri 'Automate tasks using chat messages'
	'hedwig' https://github.com/hedwig-im/hedwig 'XMPP Client/Bot Framework for Elixir'
	'hipchat_elixir' https://github.com/ymtszw/hipchat_elixir 'HipChat client library for Elixir, based on httpc'
	'kaguya' https://github.com/Luminarys/Kaguya 'A small, powerful, and modular IRC bot'
	'slacker' https://github.com/koudelka/slacker 'A bot library for the Slack chat service'
	'yocingo' https://github.com/Yawolf/yocingo 'Create your own Telegram Bot'
-- Cloud Infrastructure and Management
	'aws' https://github.com/aws-beam/aws-elixir 'AWS clients for Elixir'
	'Bonny' https://github.com/coryodaniel/bonny 'Kubernetes Operator Development Framework'
	'Cloudi' http://cloudi.org/ 'CloudI is for back-end server processing tasks that require soft-realtime transaction'
	'discovery' https://github.com/undeadlabs/discovery 'An OTP application for auto-discovering services with Consul'
	'erlcloud' https://github.com/erlcloud/erlcloud 'Cloud Computing library for Erlang (Amazon EC2, S3, SQS, SimpleDB, Mechanical Turk, ELB)'
	'ex_aws' https://github.com/CargoSense/ex_aws 'AWS client, supporting Dynamo, Kinesis, Lambda, SQS, and S3'
	'ex_riak_cs' https://github.com/ayrat555/ex_riak_cs 'Riak CS API client'
	'fleet_api' https://github.com/jordan0day/fleet-api 'A simple wrapper for the Fleet (CoreOS) API. Can be used with etcd tokens or via direct node URLs'
	'Gandi' https://github.com/Ahamtech/elixir-Gandi 'Gandi Wrapper for Leaseweb infrastructure'
	'IElixir' https://github.com/pprzetacznik/IElixir 'Jupyter's kernel for Elixir programming language'
	'Kazan' https://github.com/obmarg/kazan 'Kubernetes client for Elixir, generated from the k8s open API specifications'
	'Kubex' https://github.com/ingerslevio/kubex 'Kubernetes client and integration for Elixir, written in pure Elixir'
	'Leaseweb' https://github.com/Ahamtech/elixir-leaseweb 'Elixir Wrapper for Leaseweb infrastructure'
	'libcluster' https://github.com/bitwalker/libcluster 'Automatic cluster formation/healing for Elixir applications'
	'nodefinder' https://github.com/okeuday/nodefinder 'Strategies for automatic node discovery in Erlang'
	'nomad' https://github.com/sashaafm/nomad 'Create cloud portable Elixir and Phoenix apps. Write once, use everywhere'
** (RuntimeError) Line does not match format: '[Runhyve](https://runhyve.app) - The virtual machines manager for bhyve on FreeBSD' Is there a dot at the end?
    check.exs:32: Awesome.parse_line/1
    check.exs:224: Awesome.validate_list_item/1
    check.exs:213: anonymous fn/2 in Awesome.check_list/1
    (elixir) lib/enum.ex:1755: Enum."-reduce/3-lists^foldl/2-0-"/3
    check.exs:213: Awesome.check_list/1
    check.exs:192: Awesome.iterate_content/1
    check.exs:117: Awesome.test_file/1

travis_time:end:0c91c0f4:start=1565270304924200263,finish=1565270324478724136,duration=19554523873[0K[31;1mThe command "mix run check.exs" exited with 1.[0m



Done. Your build exited with 1.
