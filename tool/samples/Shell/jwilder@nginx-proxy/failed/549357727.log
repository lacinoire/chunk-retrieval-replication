travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: ebe02b78-3da5-43f0-9b4f-0e5bbfcad3e8@1.production-1-worker-org-gce-x4xs
version: v6.2.0 https://github.com/travis-ci/worker/tree/5e5476e01646095f48eec13196fdb3faf8f5cbf7
instance: travis-job-ee27506c-a223-448b-a2ef-0b0d3a164851 travis-ci-garnet-trusty-1512502259-986baf0 (via amqp)
startup: 6.614631156s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: ruby
Build group: stable
Build dist: trusty
Build id: 549357727
Job id: 549357728
Runtime kernel version: 4.4.0-101-generic
travis-build version: 541266b83
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 19:58:13 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:38 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:41:20 2017
 OS/Arch:      linux/amd64
 Experimental: false
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	10.240.0.28/255.255.255.255
	172.17.0.1/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-98-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-98-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Kdocker stop/waiting
docker start/running, process 4441
travis_fold:end:docker_mtu[0Ktravis_fold:start:resolvconf[0Kresolvconf stop/waiting
resolvconf start/running
travis_fold:end:resolvconf[0K
travis_fold:start:git.checkout[0Ktravis_time:start:048dff06[0K$ git clone --depth=50 https://github.com/jwilder/nginx-proxy.git jwilder/nginx-proxy
Cloning into 'jwilder/nginx-proxy'...
remote: Enumerating objects: 1437, done.[K
remote: Counting objects:   0% (1/1437)   [Kremote: Counting objects:   1% (15/1437)   [Kremote: Counting objects:   2% (29/1437)   [Kremote: Counting objects:   3% (44/1437)   [Kremote: Counting objects:   4% (58/1437)   [Kremote: Counting objects:   5% (72/1437)   [Kremote: Counting objects:   6% (87/1437)   [Kremote: Counting objects:   7% (101/1437)   [Kremote: Counting objects:   8% (115/1437)   [Kremote: Counting objects:   9% (130/1437)   [Kremote: Counting objects:  10% (144/1437)   [Kremote: Counting objects:  11% (159/1437)   [Kremote: Counting objects:  12% (173/1437)   [Kremote: Counting objects:  13% (187/1437)   [Kremote: Counting objects:  14% (202/1437)   [Kremote: Counting objects:  15% (216/1437)   [Kremote: Counting objects:  16% (230/1437)   [Kremote: Counting objects:  17% (245/1437)   [Kremote: Counting objects:  18% (259/1437)   [Kremote: Counting objects:  19% (274/1437)   [Kremote: Counting objects:  20% (288/1437)   [Kremote: Counting objects:  21% (302/1437)   [Kremote: Counting objects:  22% (317/1437)   [Kremote: Counting objects:  23% (331/1437)   [Kremote: Counting objects:  24% (345/1437)   [Kremote: Counting objects:  25% (360/1437)   [Kremote: Counting objects:  26% (374/1437)   [Kremote: Counting objects:  27% (388/1437)   [Kremote: Counting objects:  28% (403/1437)   [Kremote: Counting objects:  29% (417/1437)   [Kremote: Counting objects:  30% (432/1437)   [Kremote: Counting objects:  31% (446/1437)   [Kremote: Counting objects:  32% (460/1437)   [Kremote: Counting objects:  33% (475/1437)   [Kremote: Counting objects:  34% (489/1437)   [Kremote: Counting objects:  35% (503/1437)   [Kremote: Counting objects:  36% (518/1437)   [Kremote: Counting objects:  37% (532/1437)   [Kremote: Counting objects:  38% (547/1437)   [Kremote: Counting objects:  39% (561/1437)   [Kremote: Counting objects:  40% (575/1437)   [Kremote: Counting objects:  41% (590/1437)   [Kremote: Counting objects:  42% (604/1437)   [Kremote: Counting objects:  43% (618/1437)   [Kremote: Counting objects:  44% (633/1437)   [Kremote: Counting objects:  45% (647/1437)   [Kremote: Counting objects:  46% (662/1437)   [Kremote: Counting objects:  47% (676/1437)   [Kremote: Counting objects:  48% (690/1437)   [Kremote: Counting objects:  49% (705/1437)   [Kremote: Counting objects:  50% (719/1437)   [Kremote: Counting objects:  51% (733/1437)   [Kremote: Counting objects:  52% (748/1437)   [Kremote: Counting objects:  53% (762/1437)   [Kremote: Counting objects:  54% (776/1437)   [Kremote: Counting objects:  55% (791/1437)   [Kremote: Counting objects:  56% (805/1437)   [Kremote: Counting objects:  57% (820/1437)   [Kremote: Counting objects:  58% (834/1437)   [Kremote: Counting objects:  59% (848/1437)   [Kremote: Counting objects:  60% (863/1437)   [Kremote: Counting objects:  61% (877/1437)   [Kremote: Counting objects:  62% (891/1437)   [Kremote: Counting objects:  63% (906/1437)   [Kremote: Counting objects:  64% (920/1437)   [Kremote: Counting objects:  65% (935/1437)   [Kremote: Counting objects:  66% (949/1437)   [Kremote: Counting objects:  67% (963/1437)   [Kremote: Counting objects:  68% (978/1437)   [Kremote: Counting objects:  69% (992/1437)   [Kremote: Counting objects:  70% (1006/1437)   [Kremote: Counting objects:  71% (1021/1437)   [Kremote: Counting objects:  72% (1035/1437)   [Kremote: Counting objects:  73% (1050/1437)   [Kremote: Counting objects:  74% (1064/1437)   [Kremote: Counting objects:  75% (1078/1437)   [Kremote: Counting objects:  76% (1093/1437)   [Kremote: Counting objects:  77% (1107/1437)   [Kremote: Counting objects:  78% (1121/1437)   [Kremote: Counting objects:  79% (1136/1437)   [Kremote: Counting objects:  80% (1150/1437)   [Kremote: Counting objects:  81% (1164/1437)   [Kremote: Counting objects:  82% (1179/1437)   [Kremote: Counting objects:  83% (1193/1437)   [Kremote: Counting objects:  84% (1208/1437)   [Kremote: Counting objects:  85% (1222/1437)   [Kremote: Counting objects:  86% (1236/1437)   [Kremote: Counting objects:  87% (1251/1437)   [Kremote: Counting objects:  88% (1265/1437)   [Kremote: Counting objects:  89% (1279/1437)   [Kremote: Counting objects:  90% (1294/1437)   [Kremote: Counting objects:  91% (1308/1437)   [Kremote: Counting objects:  92% (1323/1437)   [Kremote: Counting objects:  93% (1337/1437)   [Kremote: Counting objects:  94% (1351/1437)   [Kremote: Counting objects:  95% (1366/1437)   [Kremote: Counting objects:  96% (1380/1437)   [Kremote: Counting objects:  97% (1394/1437)   [Kremote: Counting objects:  98% (1409/1437)   [Kremote: Counting objects:  99% (1423/1437)   [Kremote: Counting objects: 100% (1437/1437)   [Kremote: Counting objects: 100% (1437/1437), done.[K
remote: Compressing objects:   0% (1/625)   [Kremote: Compressing objects:   1% (7/625)   [Kremote: Compressing objects:   2% (13/625)   [Kremote: Compressing objects:   3% (19/625)   [Kremote: Compressing objects:   4% (25/625)   [Kremote: Compressing objects:   5% (32/625)   [Kremote: Compressing objects:   6% (38/625)   [Kremote: Compressing objects:   7% (44/625)   [Kremote: Compressing objects:   8% (50/625)   [Kremote: Compressing objects:   9% (57/625)   [Kremote: Compressing objects:  10% (63/625)   [Kremote: Compressing objects:  11% (69/625)   [Kremote: Compressing objects:  12% (75/625)   [Kremote: Compressing objects:  13% (82/625)   [Kremote: Compressing objects:  14% (88/625)   [Kremote: Compressing objects:  15% (94/625)   [Kremote: Compressing objects:  16% (100/625)   [Kremote: Compressing objects:  17% (107/625)   [Kremote: Compressing objects:  18% (113/625)   [Kremote: Compressing objects:  19% (119/625)   [Kremote: Compressing objects:  20% (125/625)   [Kremote: Compressing objects:  21% (132/625)   [Kremote: Compressing objects:  22% (138/625)   [Kremote: Compressing objects:  23% (144/625)   [Kremote: Compressing objects:  24% (150/625)   [Kremote: Compressing objects:  25% (157/625)   [Kremote: Compressing objects:  26% (163/625)   [Kremote: Compressing objects:  27% (169/625)   [Kremote: Compressing objects:  28% (175/625)   [Kremote: Compressing objects:  29% (182/625)   [Kremote: Compressing objects:  30% (188/625)   [Kremote: Compressing objects:  31% (194/625)   [Kremote: Compressing objects:  32% (200/625)   [Kremote: Compressing objects:  33% (207/625)   [Kremote: Compressing objects:  34% (213/625)   [Kremote: Compressing objects:  35% (219/625)   [Kremote: Compressing objects:  36% (225/625)   [Kremote: Compressing objects:  37% (232/625)   [Kremote: Compressing objects:  38% (238/625)   [Kremote: Compressing objects:  39% (244/625)   [Kremote: Compressing objects:  40% (250/625)   [Kremote: Compressing objects:  41% (257/625)   [Kremote: Compressing objects:  42% (263/625)   [Kremote: Compressing objects:  43% (269/625)   [Kremote: Compressing objects:  44% (275/625)   [Kremote: Compressing objects:  45% (282/625)   [Kremote: Compressing objects:  46% (288/625)   [Kremote: Compressing objects:  47% (294/625)   [Kremote: Compressing objects:  48% (300/625)   [Kremote: Compressing objects:  49% (307/625)   [Kremote: Compressing objects:  50% (313/625)   [Kremote: Compressing objects:  51% (319/625)   [Kremote: Compressing objects:  52% (325/625)   [Kremote: Compressing objects:  53% (332/625)   [Kremote: Compressing objects:  54% (338/625)   [Kremote: Compressing objects:  55% (344/625)   [Kremote: Compressing objects:  56% (350/625)   [Kremote: Compressing objects:  57% (357/625)   [Kremote: Compressing objects:  58% (363/625)   [Kremote: Compressing objects:  59% (369/625)   [Kremote: Compressing objects:  60% (375/625)   [Kremote: Compressing objects:  61% (382/625)   [Kremote: Compressing objects:  62% (388/625)   [Kremote: Compressing objects:  63% (394/625)   [Kremote: Compressing objects:  64% (400/625)   [Kremote: Compressing objects:  65% (407/625)   [Kremote: Compressing objects:  66% (413/625)   [Kremote: Compressing objects:  67% (419/625)   [Kremote: Compressing objects:  68% (425/625)   [Kremote: Compressing objects:  69% (432/625)   [Kremote: Compressing objects:  70% (438/625)   [Kremote: Compressing objects:  71% (444/625)   [Kremote: Compressing objects:  72% (450/625)   [Kremote: Compressing objects:  73% (457/625)   [Kremote: Compressing objects:  74% (463/625)   [Kremote: Compressing objects:  75% (469/625)   [Kremote: Compressing objects:  76% (475/625)   [Kremote: Compressing objects:  77% (482/625)   [Kremote: Compressing objects:  78% (488/625)   [Kremote: Compressing objects:  79% (494/625)   [Kremote: Compressing objects:  80% (500/625)   [Kremote: Compressing objects:  81% (507/625)   [Kremote: Compressing objects:  82% (513/625)   [Kremote: Compressing objects:  83% (519/625)   [Kremote: Compressing objects:  84% (525/625)   [Kremote: Compressing objects:  85% (532/625)   [Kremote: Compressing objects:  86% (538/625)   [Kremote: Compressing objects:  87% (544/625)   [Kremote: Compressing objects:  88% (550/625)   [Kremote: Compressing objects:  89% (557/625)   [Kremote: Compressing objects:  90% (563/625)   [Kremote: Compressing objects:  91% (569/625)   [Kremote: Compressing objects:  92% (575/625)   [Kremote: Compressing objects:  93% (582/625)   [Kremote: Compressing objects:  94% (588/625)   [Kremote: Compressing objects:  95% (594/625)   [Kremote: Compressing objects:  96% (600/625)   [Kremote: Compressing objects:  97% (607/625)   [Kremote: Compressing objects:  98% (613/625)   [Kremote: Compressing objects:  99% (619/625)   remote: Compressing objects: 100% (625/625)   [Kremote: Compressing objects: 100% (625/625), done.[K
Receiving objects:   0% (1/1437)   Receiving objects:   1% (15/1437)   Receiving objects:   2% (29/1437)   Receiving objects:   3% (44/1437)   Receiving objects:   4% (58/1437)   Receiving objects:   5% (72/1437)   Receiving objects:   6% (87/1437)   Receiving objects:   7% (101/1437)   Receiving objects:   8% (115/1437)   Receiving objects:   9% (130/1437)   Receiving objects:  10% (144/1437)   Receiving objects:  11% (159/1437)   Receiving objects:  12% (173/1437)   Receiving objects:  13% (187/1437)   Receiving objects:  14% (202/1437)   Receiving objects:  15% (216/1437)   Receiving objects:  16% (230/1437)   Receiving objects:  17% (245/1437)   Receiving objects:  18% (259/1437)   Receiving objects:  19% (274/1437)   Receiving objects:  20% (288/1437)   Receiving objects:  21% (302/1437)   Receiving objects:  22% (317/1437)   Receiving objects:  23% (331/1437)   Receiving objects:  24% (345/1437)   Receiving objects:  25% (360/1437)   Receiving objects:  26% (374/1437)   Receiving objects:  27% (388/1437)   Receiving objects:  28% (403/1437)   Receiving objects:  29% (417/1437)   Receiving objects:  30% (432/1437)   Receiving objects:  31% (446/1437)   Receiving objects:  32% (460/1437)   Receiving objects:  33% (475/1437)   Receiving objects:  34% (489/1437)   Receiving objects:  35% (503/1437)   Receiving objects:  36% (518/1437)   Receiving objects:  37% (532/1437)   Receiving objects:  38% (547/1437)   Receiving objects:  39% (561/1437)   Receiving objects:  40% (575/1437)   Receiving objects:  41% (590/1437)   Receiving objects:  42% (604/1437)   Receiving objects:  43% (618/1437)   Receiving objects:  44% (633/1437)   Receiving objects:  45% (647/1437)   Receiving objects:  46% (662/1437)   Receiving objects:  47% (676/1437)   Receiving objects:  48% (690/1437)   Receiving objects:  49% (705/1437)   Receiving objects:  50% (719/1437)   Receiving objects:  51% (733/1437)   Receiving objects:  52% (748/1437)   Receiving objects:  53% (762/1437)   Receiving objects:  54% (776/1437)   Receiving objects:  55% (791/1437)   Receiving objects:  56% (805/1437)   Receiving objects:  57% (820/1437)   Receiving objects:  58% (834/1437)   Receiving objects:  59% (848/1437)   Receiving objects:  60% (863/1437)   Receiving objects:  61% (877/1437)   Receiving objects:  62% (891/1437)   Receiving objects:  63% (906/1437)   Receiving objects:  64% (920/1437)   Receiving objects:  65% (935/1437)   Receiving objects:  66% (949/1437)   Receiving objects:  67% (963/1437)   Receiving objects:  68% (978/1437)   Receiving objects:  69% (992/1437)   Receiving objects:  70% (1006/1437)   Receiving objects:  71% (1021/1437)   Receiving objects:  72% (1035/1437)   Receiving objects:  73% (1050/1437)   Receiving objects:  74% (1064/1437)   Receiving objects:  75% (1078/1437)   Receiving objects:  76% (1093/1437)   Receiving objects:  77% (1107/1437)   Receiving objects:  78% (1121/1437)   Receiving objects:  79% (1136/1437)   Receiving objects:  80% (1150/1437)   Receiving objects:  81% (1164/1437)   Receiving objects:  82% (1179/1437)   Receiving objects:  83% (1193/1437)   Receiving objects:  84% (1208/1437)   Receiving objects:  85% (1222/1437)   Receiving objects:  86% (1236/1437)   Receiving objects:  87% (1251/1437)   Receiving objects:  88% (1265/1437)   Receiving objects:  89% (1279/1437)   Receiving objects:  90% (1294/1437)   Receiving objects:  91% (1308/1437)   Receiving objects:  92% (1323/1437)   Receiving objects:  93% (1337/1437)   remote: Total 1437 (delta 854), reused 1377 (delta 797), pack-reused 0[K
Receiving objects:  94% (1351/1437)   Receiving objects:  95% (1366/1437)   Receiving objects:  96% (1380/1437)   Receiving objects:  97% (1394/1437)   Receiving objects:  98% (1409/1437)   Receiving objects:  99% (1423/1437)   Receiving objects: 100% (1437/1437)   Receiving objects: 100% (1437/1437), 351.51 KiB | 4.29 MiB/s, done.
Resolving deltas:   0% (0/854)   Resolving deltas:   1% (13/854)   Resolving deltas:   2% (20/854)   Resolving deltas:   3% (26/854)   Resolving deltas:   6% (52/854)   Resolving deltas:   7% (60/854)   Resolving deltas:   8% (70/854)   Resolving deltas:   9% (80/854)   Resolving deltas:  11% (102/854)   Resolving deltas:  12% (103/854)   Resolving deltas:  13% (116/854)   Resolving deltas:  14% (127/854)   Resolving deltas:  15% (134/854)   Resolving deltas:  16% (137/854)   Resolving deltas:  18% (158/854)   Resolving deltas:  19% (163/854)   Resolving deltas:  21% (181/854)   Resolving deltas:  23% (198/854)   Resolving deltas:  26% (224/854)   Resolving deltas:  28% (242/854)   Resolving deltas:  29% (254/854)   Resolving deltas:  30% (257/854)   Resolving deltas:  32% (276/854)   Resolving deltas:  33% (282/854)   Resolving deltas:  34% (293/854)   Resolving deltas:  35% (299/854)   Resolving deltas:  36% (311/854)   Resolving deltas:  38% (326/854)   Resolving deltas:  40% (343/854)   Resolving deltas:  41% (358/854)   Resolving deltas:  42% (367/854)   Resolving deltas:  43% (370/854)   Resolving deltas:  44% (376/854)   Resolving deltas:  46% (401/854)   Resolving deltas:  47% (403/854)   Resolving deltas:  48% (414/854)   Resolving deltas:  49% (421/854)   Resolving deltas:  50% (430/854)   Resolving deltas:  66% (567/854)   Resolving deltas:  67% (575/854)   Resolving deltas:  68% (583/854)   Resolving deltas:  69% (591/854)   Resolving deltas:  70% (598/854)   Resolving deltas:  71% (607/854)   Resolving deltas:  72% (617/854)   Resolving deltas:  73% (630/854)   Resolving deltas:  74% (632/854)   Resolving deltas:  75% (641/854)   Resolving deltas:  76% (651/854)   Resolving deltas:  77% (664/854)   Resolving deltas:  78% (669/854)   Resolving deltas:  79% (678/854)   Resolving deltas:  81% (700/854)   Resolving deltas:  84% (724/854)   Resolving deltas:  86% (740/854)   Resolving deltas:  87% (751/854)   Resolving deltas:  88% (752/854)   Resolving deltas:  89% (761/854)   Resolving deltas:  91% (779/854)   Resolving deltas:  92% (786/854)   Resolving deltas:  93% (798/854)   Resolving deltas:  94% (806/854)   Resolving deltas:  95% (813/854)   Resolving deltas:  96% (820/854)   Resolving deltas:  97% (831/854)   Resolving deltas:  98% (838/854)   Resolving deltas:  99% (847/854)   Resolving deltas: 100% (854/854)   Resolving deltas: 100% (854/854), done.
travis_time:end:048dff06:start=1561296198048834272,finish=1561296198880718406,duration=831884134[0K$ cd jwilder/nginx-proxy
travis_time:start:02c5419f[0K$ git fetch origin +refs/pull/1294/merge:
remote: Enumerating objects: 16, done.[K
remote: Counting objects:   6% (1/16)   [Kremote: Counting objects:  12% (2/16)   [Kremote: Counting objects:  18% (3/16)   [Kremote: Counting objects:  25% (4/16)   [Kremote: Counting objects:  31% (5/16)   [Kremote: Counting objects:  37% (6/16)   [Kremote: Counting objects:  43% (7/16)   [Kremote: Counting objects:  50% (8/16)   [Kremote: Counting objects:  56% (9/16)   [Kremote: Counting objects:  62% (10/16)   [Kremote: Counting objects:  68% (11/16)   [Kremote: Counting objects:  75% (12/16)   [Kremote: Counting objects:  81% (13/16)   [Kremote: Counting objects:  87% (14/16)   [Kremote: Counting objects:  93% (15/16)   [Kremote: Counting objects: 100% (16/16)   [Kremote: Counting objects: 100% (16/16), done.[K
remote: Compressing objects:  25% (1/4)   [Kremote: Compressing objects:  50% (2/4)   [Kremote: Compressing objects:  75% (3/4)   [Kremote: Compressing objects: 100% (4/4)   [Kremote: Compressing objects: 100% (4/4), done.[K
remote: Total 4 (delta 2), reused 0 (delta 0), pack-reused 0[K
Unpacking objects:  25% (1/4)   Unpacking objects:  50% (2/4)   Unpacking objects:  75% (3/4)   Unpacking objects: 100% (4/4)   Unpacking objects: 100% (4/4), done.
From https://github.com/jwilder/nginx-proxy
 * branch            refs/pull/1294/merge -> FETCH_HEAD
travis_time:end:02c5419f:start=1561296198885010843,finish=1561296199436458921,duration=551448078[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K

[33;1mSetting environment variables from .travis.yml[0m
$ export TEST_TARGET=test-debian

travis_fold:start:rvm[0Ktravis_time:start:08ddec14[0K$ rvm use default
[32mUsing /home/travis/.rvm/gems/ruby-2.4.1[0m

[32;1m** Updating RubyGems to the latest compatible version for security reasons. **[0m
[32;1m** If you need an older version, you can downgrade with 'gem update --system OLD_VERSION'. **[0m

travis_time:end:08ddec14:start=1561296199458553366,finish=1561296203820645382,duration=4362092016[0Ktravis_fold:end:rvm[0K
travis_fold:start:ruby.versions[0K$ ruby --version
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
$ rvm --version
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
$ bundle --version
Bundler version 1.17.3
$ gem --version
3.0.4
travis_fold:end:ruby.versions[0K
travis_fold:start:before_install.1[0Ktravis_time:start:12d7c2e9[0K$ sudo apt-get -y remove docker docker-engine docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
Package 'docker-engine' is not installed, so not removed
Package 'docker' is not installed, so not removed
The following packages were automatically installed and are no longer required:
  aufs-tools cgroup-lite libsystemd-journal0
Use 'sudo apt autoremove' to remove them.
The following packages will be REMOVED:
  docker-ce
0 upgraded, 0 newly installed, 1 to remove and 303 not upgraded.
After this operation, 99.3 MB disk space will be freed.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93695 files and directories currently installed.)
Removing docker-ce (17.09.0~ce-0~ubuntu) ...
docker stop/waiting
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
travis_time:end:12d7c2e9:start=1561296204272131701,finish=1561296207125084123,duration=2852952422[0Ktravis_fold:end:before_install.1[0Ktravis_fold:start:before_install.2[0Ktravis_time:start:1474eed8[0K$ sudo rm /etc/apt/sources.list.d/docker.list
travis_time:end:1474eed8:start=1561296207129868696,finish=1561296207139132667,duration=9263971[0Ktravis_fold:end:before_install.2[0Ktravis_fold:start:before_install.3[0Ktravis_time:start:0393756c[0K$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
OK
travis_time:end:0393756c:start=1561296207143632998,finish=1561296207430716719,duration=287083721[0Ktravis_fold:end:before_install.3[0Ktravis_fold:start:before_install.4[0Ktravis_time:start:0f5bc03f[0K$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
travis_time:end:0f5bc03f:start=1561296207435318817,finish=1561296207848357788,duration=413038971[0Ktravis_fold:end:before_install.4[0Ktravis_fold:start:before_install.5[0Ktravis_time:start:00c7c116[0K$ sudo apt-get update
0% [Working]0% [Waiting for headers] [Waiting for headers] [Waiting for headers] [Waiting f                                                                               Hit:2 http://security.ubuntu.com/ubuntu trusty-security InRelease
                                                                               Hit:3 http://dl.hhvm.com/ubuntu trusty InRelease
                                                                               Hit:4 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu trusty InRelease
                                                                               Hit:6 http://apt.postgresql.org/pub/repos/apt trusty-pgdg InRelease
0% [Waiting for headers] [Waiting for headers] [Waiting for headers] [Waiting f0% [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Hit:1 http://dl.bintray.com/apache/cassandra 39x InRelease
0% [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Waiting for headers] [Wait0% [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Ign:7 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:8 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 Release
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Ign:9 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:10 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty-updates InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:11 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty-backports InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:12 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty Release
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               0% [Waiting for headers] [Waiting for headers] [Waiting for headers]0% [Waiting for headers] [3 InRelease gpgv 3,106 B] [Waiting for headers] [Wait                                                                               Ign:5 http://heroku-toolbelt.s3.amazonaws.com/apt ./ InRelease
                                                                               0% [3 InRelease gpgv 3,106 B] [Waiting for headers] [Waiting for headers]0% [3 InRelease gpgv 3,106 B] [Waiting for headers] [Waiting for headers]0% [3 InRelease gpgv 3,106 B] [Waiting for headers] [Waiting for headers]                                                                         Hit:13 http://heroku-toolbelt.s3.amazonaws.com/apt ./ Release
0% [3 InRelease gpgv 3,106 B] [Waiting for headers] [Waiting for headers]                                                                         0% [Waiting for headers] [Waiting for headers]0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers]                                                                         Ign:14 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty InRelease
                                                                         0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:15 http://ppa.launchpad.net/git-core/ppa/ubuntu trusty InRelease
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:16 http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty InRelease
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers]                                                                         Hit:17 http://ppa.launchpad.net/pollinate/ppa/ubuntu trusty InRelease
                                                                         0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:18 http://ppa.launchpad.net/webupd8team/java/ubuntu trusty InRelease
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:19 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty Release
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:20 https://download.docker.com/linux/ubuntu trusty InRelease
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   0% [Waiting for headers]0% [6 InRelease gpgv 56.5 kB] [Waiting for headers]                                                   Ign:21 http://dl.google.com/linux/chrome/deb stable InRelease
                                                   0% [6 InRelease gpgv 56.5 kB]                             Hit:22 http://dl.google.com/linux/chrome/deb stable Release
0% [6 InRelease gpgv 56.5 kB]                             0% [Working]0% [1 InRelease gpgv 3,168 B]                             0% [Working]0% [Release.gpg gpgv 2,495 B]                             0% [Working]0% [10 InRelease gpgv 65.9 kB]                              0% [Working]0% [11 InRelease gpgv 65.9 kB]                              0% [Working]0% [Release.gpg gpgv 58.5 kB]                             0% [Working]0% [Release.gpg gpgv 1,609 B]                             0% [Working]0% [15 InRelease gpgv 20.8 kB]                              0% [Working]0% [16 InRelease gpgv 15.4 kB]                              0% [Working]0% [17 InRelease gpgv 15.4 kB]                              0% [Working]0% [18 InRelease gpgv 15.5 kB]                              0% [Working]0% [Release.gpg gpgv 15.1 kB]                             Hit:26 https://packagecloud.io/computology/apt-backport/ubuntu trusty InRelease
0% [Release.gpg gpgv 15.1 kB]                             0% [Working]0% [20 InRelease gpgv 37.1 kB]                              0% [Working]0% [Release.gpg gpgv 943 B]                           0% [Working]0% [26 InRelease gpgv 23.5 kB]                              0% [Working]            Get:29 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease [23.2 kB]
0% [29 InRelease 8,604 B/23.2 kB 37%]                                     0% [Working]0% [29 InRelease gpgv 23.2 kB]                              Ign:29 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease
                              0% [Working]            Hit:30 https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu trusty InRelease
0% [Working]0% [30 InRelease gpgv 23.7 kB]                              20% [Working]             Fetched 23.2 kB in 1s (17.6 kB/s)
Reading package lists... 0%Reading package lists... 0%Reading package lists... 1%Reading package lists... 5%Reading package lists... 5%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 34%Reading package lists... 34%Reading package lists... 43%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 57%Reading package lists... 57%Reading package lists... 63%Reading package lists... 63%Reading package lists... 68%Reading package lists... 68%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 77%Reading package lists... 77%Reading package lists... 79%Reading package lists... 79%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 85%Reading package lists... 85%Reading package lists... 88%Reading package lists... 88%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 95%Reading package lists... 95%Reading package lists... 96%Reading package lists... 96%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... Done
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
W: GPG error: https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 6B05F25D762E3157
W: The repository 'https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease' is not signed.
N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.
N: See apt-secure(8) manpage for repository creation and user configuration details.
W: There is no public key available for the following key IDs:
6B05F25D762E3157  
travis_time:end:00c7c116:start=1561296207853281125,finish=1561296210885674978,duration=3032393853[0Ktravis_fold:end:before_install.5[0Ktravis_fold:start:before_install.6[0Ktravis_time:start:0abe74e8[0K$ sudo apt-get -y install docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
The following additional packages will be installed:
  pigz
The following NEW packages will be installed:
  docker-ce pigz
0 upgraded, 2 newly installed, 0 to remove and 303 not upgraded.
Need to get 39.8 MB of archives.
After this operation, 201 MB of additional disk space will be used.
0% [Working]            Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty/universe amd64 pigz amd64 2.3-2 [59.4 kB]
0% [1 pigz 7,747 B/59.4 kB 13%]                               10% [Working]             Get:2 https://download.docker.com/linux/ubuntu trusty/stable amd64 docker-ce amd64 18.06.3~ce~3-0~ubuntu [39.7 MB]
10% [2 docker-ce 15.8 kB/39.7 MB 0%]40% [2 docker-ce 14.8 MB/39.7 MB 37%]70% [2 docker-ce 29.5 MB/39.7 MB 74%]                                     100% [Working]              Fetched 39.8 MB in 1s (25.5 MB/s)
Selecting previously unselected package pigz.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93493 files and directories currently installed.)
Preparing to unpack .../archives/pigz_2.3-2_amd64.deb ...
Unpacking pigz (2.3-2) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../docker-ce_18.06.3~ce~3-0~ubuntu_amd64.deb ...
Unpacking docker-ce (18.06.3~ce~3-0~ubuntu) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
Setting up pigz (2.3-2) ...
Setting up docker-ce (18.06.3~ce~3-0~ubuntu) ...
Installing new version of config file /etc/bash_completion.d/docker ...
docker start/running, process 7646
travis_time:end:0abe74e8:start=1561296210890426142,finish=1561296221262718945,duration=10372292803[0Ktravis_fold:end:before_install.6[0Ktravis_fold:start:before_install.7[0Ktravis_time:start:1174fcf0[0K$ docker version
Client:
 Version:           18.06.3-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        d7080c1
 Built:             Wed Feb 20 02:27:13 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.3-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       d7080c1
  Built:            Wed Feb 20 02:25:38 2019
  OS/Arch:          linux/amd64
  Experimental:     false
travis_time:end:1174fcf0:start=1561296221267315296,finish=1561296221343943031,duration=76627735[0Ktravis_fold:end:before_install.7[0Ktravis_fold:start:before_install.8[0Ktravis_time:start:208860f6[0K$ docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.3-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e
runc version: a592beb5bc4c4092b1b1bac971afed27687340c5
init version: fec3683
Kernel Version: 4.4.0-101-generic
Operating System: Ubuntu 14.04.5 LTS
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 7.305GiB
Name: travis-job-ee27506c-a223-448b-a2ef-0b0d3a164851
ID: DH3M:23FP:35CF:LCVT:ROBH:CV5W:C5W2:JSP4:7G7W:NH4L:6FOS:WJOW
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false

travis_time:end:208860f6:start=1561296221348992726,finish=1561296221428436299,duration=79443573[0Ktravis_fold:end:before_install.8[0Ktravis_fold:start:before_install.9[0Ktravis_time:start:0bdc6444[0K$ make update-dependencies
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
3: Pulling from library/python

[1A[1K[K6f2f362378c5: Pulling fs layer [1B
[1A[1K[K494c27a8a6b8: Pulling fs layer [1B
[1A[1K[K7596bb83081b: Pulling fs layer [1B
[1A[1K[K372744b62d49: Pulling fs layer [1B
[1A[1K[K615db220d76c: Pulling fs layer [1B
[1A[1K[K39aa0c89bda1: Pulling fs layer [1B
[1A[1K[Kac275157d894: Pulling fs layer [1B
[1A[1K[K98d16dec829a: Pulling fs layer [1B
[1A[1K[Kc8514b1c6524: Pulling fs layer [1B[6A[1K[K372744b62d49: Waiting [6B[5A[1K[K615db220d76c: Waiting [5B[4A[1K[K39aa0c89bda1: Waiting [4B[3A[1K[Kac275157d894: Waiting [3B[2A[1K[K98d16dec829a: Waiting [2B[1A[1K[Kc8514b1c6524: Waiting [1B[7A[1K[K7596bb83081b: Downloading  44.22kB/4.34MB[7B[8A[1K[K494c27a8a6b8: Downloading  110.1kB/10.79MB[8B[9A[1K[K6f2f362378c5: Downloading  458.8kB/45.34MB[9B[7A[1K[K7596bb83081b: Verifying Checksum [7B[7A[1K[K7596bb83081b: Download complete [7B[9A[1K[K6f2f362378c5: Downloading  11.03MB/45.34MB[9B[8A[1K[K494c27a8a6b8: Downloading  6.089MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Downloading  10.79MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Verifying Checksum [8B[8A[1K[K494c27a8a6b8: Download complete [8B[9A[1K[K6f2f362378c5: Downloading  24.36MB/45.34MB[9B[9A[1K[K6f2f362378c5: Downloading  37.69MB/45.34MB[9B[9A[1K[K6f2f362378c5: Verifying Checksum [9B[9A[1K[K6f2f362378c5: Download complete [9B[6A[1K[K372744b62d49: Downloading    507kB/50.07MB[6B[9A[1K[K6f2f362378c5: Extracting  458.8kB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  539.3kB/215.1MB[5B[6A[1K[K372744b62d49: Downloading   8.15MB/50.07MB[6B[5A[1K[K615db220d76c: Downloading  8.584MB/215.1MB[5B[6A[1K[K372744b62d49: Downloading  18.34MB/50.07MB[6B[9A[1K[K6f2f362378c5: Extracting  1.835MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  17.66MB/215.1MB[5B[6A[1K[K372744b62d49: Downloading  27.02MB/50.07MB[6B[4A[1K[K39aa0c89bda1: Downloading  62.41kB/5.834MB[4B[9A[1K[K6f2f362378c5: Extracting  2.294MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  27.32MB/215.1MB[5B[6A[1K[K372744b62d49: Downloading  34.17MB/50.07MB[6B[4A[1K[K39aa0c89bda1: Downloading  1.293MB/5.834MB[4B[5A[1K[K615db220d76c: Downloading  37.03MB/215.1MB[5B[4A[1K[K39aa0c89bda1: Verifying Checksum [4B[4A[1K[K39aa0c89bda1: Download complete [4B[6A[1K[K372744b62d49: Downloading  41.28MB/50.07MB[6B[5A[1K[K615db220d76c: Downloading  47.21MB/215.1MB[5B[6A[1K[K372744b62d49: Downloading  49.42MB/50.07MB[6B[9A[1K[K6f2f362378c5: Extracting  2.753MB/45.34MB[9B[6A[1K[K372744b62d49: Verifying Checksum [6B[6A[1K[K372744b62d49: Download complete [6B[5A[1K[K615db220d76c: Downloading  57.41MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  5.046MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  68.12MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  6.423MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  77.77MB/215.1MB[5B[3A[1K[Kac275157d894: Downloading  232.3kB/22.48MB[3B[2A[1K[K98d16dec829a: Downloading     239B/239B[2B[2A[1K[K98d16dec829a: Verifying Checksum [2B[2A[1K[K98d16dec829a: Download complete [2B[5A[1K[K615db220d76c: Downloading  85.28MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  8.258MB/45.34MB[9B[3A[1K[Kac275157d894: Downloading  6.003MB/22.48MB[3B[5A[1K[K615db220d76c: Downloading  94.42MB/215.1MB[5B[3A[1K[Kac275157d894: Downloading  14.06MB/22.48MB[3B[5A[1K[K615db220d76c: Downloading  103.5MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  9.175MB/45.34MB[9B[3A[1K[Kac275157d894: Verifying Checksum [3B[3A[1K[Kac275157d894: Download complete [3B[9A[1K[K6f2f362378c5: Extracting  10.55MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  111.1MB/215.1MB[5B[1A[1K[Kc8514b1c6524: Downloading  18.29kB/1.821MB[1B[5A[1K[K615db220d76c: Downloading  120.7MB/215.1MB[5B[1A[1K[Kc8514b1c6524: Verifying Checksum [1B[1A[1K[Kc8514b1c6524: Download complete [1B[9A[1K[K6f2f362378c5: Extracting  12.39MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  131.4MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  14.68MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  141.1MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  16.06MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  145.9MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  17.89MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading    154MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  20.19MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  163.1MB/215.1MB[5B[5A[1K[K615db220d76c: Downloading  173.3MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  21.56MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  182.4MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  24.77MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  191.5MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  27.98MB/45.34MB[9B[5A[1K[K615db220d76c: Downloading  201.7MB/215.1MB[5B[5A[1K[K615db220d76c: Downloading  207.6MB/215.1MB[5B[9A[1K[K6f2f362378c5: Extracting  31.65MB/45.34MB[9B[5A[1K[K615db220d76c: Verifying Checksum [5B[5A[1K[K615db220d76c: Download complete [5B[9A[1K[K6f2f362378c5: Extracting  33.95MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting  36.24MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting  38.54MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting  41.75MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting  43.58MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting   44.5MB/45.34MB[9B[9A[1K[K6f2f362378c5: Extracting  45.34MB/45.34MB[9B[9A[1K[K6f2f362378c5: Pull complete [9B[8A[1K[K494c27a8a6b8: Extracting  131.1kB/10.79MB[8B[8A[1K[K494c27a8a6b8: Extracting  2.359MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Extracting  6.554MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Extracting   9.83MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Extracting  10.79MB/10.79MB[8B[8A[1K[K494c27a8a6b8: Pull complete [8B[7A[1K[K7596bb83081b: Extracting  65.54kB/4.34MB[7B[7A[1K[K7596bb83081b: Extracting  2.032MB/4.34MB[7B[7A[1K[K7596bb83081b: Extracting   4.34MB/4.34MB[7B[7A[1K[K7596bb83081b: Pull complete [7B[6A[1K[K372744b62d49: Extracting  524.3kB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  4.719MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  8.913MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  13.63MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  16.78MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  18.87MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  20.45MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  22.54MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  24.12MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  26.21MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  28.84MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  31.98MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting   34.6MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  36.18MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  39.85MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  42.99MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  45.61MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  47.19MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  48.76MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  49.81MB/50.07MB[6B[6A[1K[K372744b62d49: Extracting  50.07MB/50.07MB[6B[6A[1K[K372744b62d49: Pull complete [6B[5A[1K[K615db220d76c: Extracting  557.1kB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  3.899MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  7.799MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  10.03MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  11.14MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  12.26MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  13.37MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  15.04MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  16.71MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting   19.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  23.95MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  26.74MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  31.75MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  35.09MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  38.99MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  41.78MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  46.24MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  49.02MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  51.25MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  52.92MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  55.15MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  56.82MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  59.05MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  61.83MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  65.18MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  68.52MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  71.86MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting   75.2MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  78.54MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  81.33MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  85.23MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  89.13MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  93.59MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  98.04MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  102.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  105.8MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  108.6MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  111.4MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  114.2MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting    117MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  119.8MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  123.1MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting    127MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  128.1MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  130.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  134.3MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  137.6MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  140.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  144.8MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting    151MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  157.1MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  164.3MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting    171MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  177.1MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  181.6MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  184.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  185.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  190.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  193.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  195.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  198.3MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  201.1MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  203.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  206.7MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  209.5MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  212.2MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  213.4MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  213.9MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting    215MB/215.1MB[5B[5A[1K[K615db220d76c: Extracting  215.1MB/215.1MB[5B[5A[1K[K615db220d76c: Pull complete [5B[4A[1K[K39aa0c89bda1: Extracting  65.54kB/5.834MB[4B[4A[1K[K39aa0c89bda1: Extracting  1.245MB/5.834MB[4B[4A[1K[K39aa0c89bda1: Extracting  4.915MB/5.834MB[4B[4A[1K[K39aa0c89bda1: Extracting  5.834MB/5.834MB[4B[4A[1K[K39aa0c89bda1: Pull complete [4B[3A[1K[Kac275157d894: Extracting  229.4kB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  3.441MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  5.734MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  8.716MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  11.93MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  14.22MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  18.12MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  20.87MB/22.48MB[3B[3A[1K[Kac275157d894: Extracting  22.48MB/22.48MB[3B[3A[1K[Kac275157d894: Pull complete [3B[2A[1K[K98d16dec829a: Extracting     239B/239B[2B[2A[1K[K98d16dec829a: Extracting     239B/239B[2B[2A[1K[K98d16dec829a: Pull complete [2B[1A[1K[Kc8514b1c6524: Extracting  32.77kB/1.821MB[1B[1A[1K[Kc8514b1c6524: Extracting    983kB/1.821MB[1B[1A[1K[Kc8514b1c6524: Extracting  1.821MB/1.821MB[1B[1A[1K[Kc8514b1c6524: Pull complete [1BDigest: sha256:9e0b4f32487ca1863b45383420b8db77990debae748e2e875d2f86fa9510d4a5
Status: Downloaded newer image for python:3
 ---> 34a518642c76
Step 2/5 : COPY ./webserver.py /
 ---> c034ad71283c
Step 3/5 : COPY ./entrypoint.sh /
 ---> b80b009f6cb2
Step 4/5 : WORKDIR /opt
 ---> Running in 5369bd56d28b
Removing intermediate container 5369bd56d28b
 ---> de583ecc62e6
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Running in 3e54cef16b06
Removing intermediate container 3e54cef16b06
 ---> c35d81c81019
Successfully built c35d81c81019
Successfully tagged web:latest
travis_time:end:0bdc6444:start=1561296221433101312,finish=1561296240318354763,duration=18885253451[0Ktravis_fold:end:before_install.9[0KNo Gemfile found, skipping bundle install

travis_time:start:0bdb0d50[0K$ make $TEST_TARGET
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
 ---> 34a518642c76
Step 2/5 : COPY ./webserver.py /
 ---> Using cache
 ---> c034ad71283c
Step 3/5 : COPY ./entrypoint.sh /
 ---> Using cache
 ---> b80b009f6cb2
Step 4/5 : WORKDIR /opt
 ---> Using cache
 ---> de583ecc62e6
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Using cache
 ---> c35d81c81019
Successfully built c35d81c81019
Successfully tagged web:latest
Sending build context to Docker daemon  40.45kB
Step 1/15 : FROM nginx:1.14.1
1.14.1: Pulling from library/nginx

[1A[1K[Ka5a6f2f73cd8: Pulling fs layer [1B
[1A[1K[K2343eb083a4e: Pulling fs layer [1B
[1A[1K[K251439d5b33c: Pulling fs layer [1B[1A[1K[K251439d5b33c: Downloading     204B/204B[1B[1A[1K[K251439d5b33c: Verifying Checksum [1B[1A[1K[K251439d5b33c: Download complete [1B[3A[1K[Ka5a6f2f73cd8: Downloading  228.5kB/22.49MB[3B[2A[1K[K2343eb083a4e: Downloading  228.5kB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Downloading  10.09MB/22.49MB[3B[2A[1K[K2343eb083a4e: Downloading  8.064MB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Verifying Checksum [3B[3A[1K[Ka5a6f2f73cd8: Download complete [3B[2A[1K[K2343eb083a4e: Downloading  19.98MB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Extracting  229.4kB/22.49MB[3B[2A[1K[K2343eb083a4e: Verifying Checksum [2B[2A[1K[K2343eb083a4e: Download complete [2B[3A[1K[Ka5a6f2f73cd8: Extracting  2.294MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  6.193MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  9.634MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  13.07MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting   15.6MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  19.27MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  20.41MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  21.56MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.48MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.49MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Pull complete [3B[2A[1K[K2343eb083a4e: Extracting  229.4kB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  4.129MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  8.258MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  13.07MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  16.52MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  20.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  22.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Pull complete [2B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Pull complete [1BDigest: sha256:32fdf92b4e986e109e4db0865758020cb0c3b70d6ba80d02fe87bad5cc3dc228
Status: Downloaded newer image for nginx:1.14.1
 ---> 5f2d4477b7ea
Step 2/15 : LABEL maintainer="Jason Wilder mail@jasonwilder.com"
 ---> Running in 0e380d4faabb
Removing intermediate container 0e380d4faabb
 ---> 1f55c52506b1
Step 3/15 : RUN apt-get update  && apt-get install -y -q --no-install-recommends     ca-certificates     wget  && apt-get clean  && rm -r /var/lib/apt/lists/*
 ---> Running in 6dc4af1ff91e
Ign:2 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:3 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]
Get:1 http://security-cdn.debian.org/debian-security stretch/updates InRelease [94.3 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [27.2 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7082 kB]
Get:8 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 Packages [499 kB]
Fetched 7914 kB in 1s (4792 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0 libnettle6
  libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl
Suggested packages:
  gnutls-bin
Recommended packages:
  publicsuffix
The following NEW packages will be installed:
  ca-certificates libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0
  libnettle6 libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl wget
0 upgraded, 14 newly installed, 0 to remove and 15 not upgraded.
Need to get 3883 kB of archives.
After this operation, 10.6 MB of additional disk space will be used.
Get:1 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgmp10 amd64 2:6.1.2+dfsg-1 [253 kB]
Get:2 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libnettle6 amd64 3.3-1+b2 [192 kB]
Get:3 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libhogweed4 amd64 3.3-1+b2 [136 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn11 amd64 1.33-1 [115 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libffi6 amd64 3.2.1-6 [20.4 kB]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libp11-kit0 amd64 0.23.3-2 [111 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libtasn1-6 amd64 4.10-1.1+deb9u1 [50.6 kB]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgnutls30 amd64 3.5.8-5+deb9u4 [896 kB]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libunistring0 amd64 0.9.6+really0.9.3-0.1 [279 kB]
Get:10 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn2-0 amd64 0.16-1+deb9u1 [60.7 kB]
Get:11 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libpsl5 amd64 0.17.0-3 [41.8 kB]
Get:12 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 wget amd64 1.18-5+deb9u3 [800 kB]
Get:13 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 openssl amd64 1.1.0j-1~deb9u1 [746 kB]
Get:14 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 ca-certificates all 20161130+nmu1+deb9u1 [182 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 3883 kB in 0s (16.9 MB/s)
Selecting previously unselected package libgmp10:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 7026 files and directories currently installed.)
Preparing to unpack .../00-libgmp10_2%3a6.1.2+dfsg-1_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Selecting previously unselected package libnettle6:amd64.
Preparing to unpack .../01-libnettle6_3.3-1+b2_amd64.deb ...
Unpacking libnettle6:amd64 (3.3-1+b2) ...
Selecting previously unselected package libhogweed4:amd64.
Preparing to unpack .../02-libhogweed4_3.3-1+b2_amd64.deb ...
Unpacking libhogweed4:amd64 (3.3-1+b2) ...
Selecting previously unselected package libidn11:amd64.
Preparing to unpack .../03-libidn11_1.33-1_amd64.deb ...
Unpacking libidn11:amd64 (1.33-1) ...
Selecting previously unselected package libffi6:amd64.
Preparing to unpack .../04-libffi6_3.2.1-6_amd64.deb ...
Unpacking libffi6:amd64 (3.2.1-6) ...
Selecting previously unselected package libp11-kit0:amd64.
Preparing to unpack .../05-libp11-kit0_0.23.3-2_amd64.deb ...
Unpacking libp11-kit0:amd64 (0.23.3-2) ...
Selecting previously unselected package libtasn1-6:amd64.
Preparing to unpack .../06-libtasn1-6_4.10-1.1+deb9u1_amd64.deb ...
Unpacking libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Selecting previously unselected package libgnutls30:amd64.
Preparing to unpack .../07-libgnutls30_3.5.8-5+deb9u4_amd64.deb ...
Unpacking libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Selecting previously unselected package libunistring0:amd64.
Preparing to unpack .../08-libunistring0_0.9.6+really0.9.3-0.1_amd64.deb ...
Unpacking libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Selecting previously unselected package libidn2-0:amd64.
Preparing to unpack .../09-libidn2-0_0.16-1+deb9u1_amd64.deb ...
Unpacking libidn2-0:amd64 (0.16-1+deb9u1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../10-libpsl5_0.17.0-3_amd64.deb ...
Unpacking libpsl5:amd64 (0.17.0-3) ...
Selecting previously unselected package wget.
Preparing to unpack .../11-wget_1.18-5+deb9u3_amd64.deb ...
Unpacking wget (1.18-5+deb9u3) ...
Selecting previously unselected package openssl.
Preparing to unpack .../12-openssl_1.1.0j-1~deb9u1_amd64.deb ...
Unpacking openssl (1.1.0j-1~deb9u1) ...
Selecting previously unselected package ca-certificates.
Preparing to unpack .../13-ca-certificates_20161130+nmu1+deb9u1_all.deb ...
Unpacking ca-certificates (20161130+nmu1+deb9u1) ...
Setting up libnettle6:amd64 (3.3-1+b2) ...
Setting up libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Setting up libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Setting up libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Setting up openssl (1.1.0j-1~deb9u1) ...
Setting up libffi6:amd64 (3.2.1-6) ...
Setting up ca-certificates (20161130+nmu1+deb9u1) ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the Term::ReadLine module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.24.1 /usr/local/share/perl/5.24.1 /usr/lib/x86_64-linux-gnu/perl5/5.24 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.24 /usr/share/perl/5.24 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm line 7.)
debconf: falling back to frontend: Teletype
Updating certificates in /etc/ssl/certs...
151 added, 0 removed; done.
Setting up libidn11:amd64 (1.33-1) ...
Setting up libidn2-0:amd64 (0.16-1+deb9u1) ...
Setting up libpsl5:amd64 (0.17.0-3) ...
Setting up libhogweed4:amd64 (3.3-1+b2) ...
Setting up libp11-kit0:amd64 (0.23.3-2) ...
Setting up libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Setting up wget (1.18-5+deb9u3) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Processing triggers for ca-certificates (20161130+nmu1+deb9u1) ...
Updating certificates in /etc/ssl/certs...
0 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.
Removing intermediate container 6dc4af1ff91e
 ---> 96a54b3a2aee
Step 4/15 : RUN echo "daemon off;" >> /etc/nginx/nginx.conf  && sed -i 's/worker_processes  1/worker_processes  auto/' /etc/nginx/nginx.conf
 ---> Running in c1cd11ac13b5
Removing intermediate container c1cd11ac13b5
 ---> bb0e14738a37
Step 5/15 : ADD https://github.com/jwilder/forego/releases/download/v0.16.1/forego /usr/local/bin/forego
[1K[KDownloading    103kB/9.763MB[1K[KDownloading  625.2kB/9.763MB[1K[KDownloading  4.988MB/9.763MB[1K[KDownloading  9.763MB/9.763MB
 ---> c7d6c5fb4267
Step 6/15 : RUN chmod u+x /usr/local/bin/forego
 ---> Running in 8eb81e48b2a2
Removing intermediate container 8eb81e48b2a2
 ---> 4b5f70d23b03
Step 7/15 : ENV DOCKER_GEN_VERSION 0.7.4
 ---> Running in 1e856dde7694
Removing intermediate container 1e856dde7694
 ---> 48dd0164bbef
Step 8/15 : RUN wget https://github.com/jwilder/docker-gen/releases/download/$DOCKER_GEN_VERSION/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && tar -C /usr/local/bin -xvzf docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && rm /docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz
 ---> Running in 35c0dae75825
[91m--2019-06-23 13:24:18--  https://github.com/jwilder/docker-gen/releases/download/0.7.4/docker-gen-linux-amd64-0.7.4.tar.gz
[0m[91mResolving github.com (github.com)... [0m[91m192.30.253.112
[0m[91mConnecting to github.com (github.com)|192.30.253.112|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m302 Found
Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190623%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190623T132418Z&X-Amz-Expires=300&X-Amz-Signature=5d99ae6e38d71bb03dec3ca977807b20254ba498310ee1da061ca2e90ef13a46&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream [following]
[0m[91m--2019-06-23 13:24:18--  https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190623%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190623T132418Z&X-Amz-Expires=300&X-Amz-Signature=5d99ae6e38d71bb03dec3ca977807b20254ba498310ee1da061ca2e90ef13a46&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream
Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... [0m[91m52.216.8.243
Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.8.243|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m200 OK
[0m[91mLength: 3424683 (3.3M) [application/octet-stream]
[0m[91mSaving to: 'docker-gen-linux-amd64-0.7.4.tar.gz'
[0m[91m
     0K [0m[91m.....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m...[0m[91m.[0m[91m.[0m[91m.[0m[91m.... .......... ...[0m[91m....... ..........  1% 1.52M 2s[0m[91m
    50K .......... ......[0m[91m.[0m[91m... ........[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m  2%[0m[91m 1.47M[0m[91m 2s[0m[91m
   100K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m .[0m[91m.......[0m[91m.. .......... .....[0m[91m..... ..........  4% 1.56M 2s
   150K .......... .......... .......... .......... ..........  5%  293M 2s
   200K ...[0m[91m....... .........[0m[91m. ........[0m[91m.. .......... .....[0m[91m.....  7% 67.5M 1s
   250K ...[0m[91m....... ..........[0m[91m .[0m[91m......... .......... ..........  8% 1.55M 1s
   300K .......... ....[0m[91m.[0m[91m..... .[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.......[0m[91m.[0m[91m.[0m[91m. .[0m[91m.....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 10%[0m[91m 34.7M[0m[91m 1s
   350K .[0m[91m.....[0m[91m.[0m[91m..[0m[91m.[0m[91m ..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m....[0m[91m.. 11% 21.3M[0m[91m 1s[0m[91m
   400K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m... .......... .......... .......... .[0m[91m......... 13% 1.70M 1s
   450K .[0m[91m.[0m[91m.[0m[91m....[0m[91m.[0m[91m.. .......... .......... .......... .......... 14% 73.8M 1s
   500K ........[0m[91m.[0m[91m.[0m[91m [0m[91m...[0m[91m.[0m[91m...[0m[91m.[0m[91m.. ......[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m ..[0m[91m.[0m[91m.[0m[91m.[0m[91m..... ...[0m[91m.[0m[91m.[0m[91m....[0m[91m.[0m[91m 16% 40.4M 1s
   550K .[0m[91m.[0m[91m.[0m[91m......[0m[91m.[0m[91m [0m[91m.[0m[91m....[0m[91m.[0m[91m.[0m[91m.[0m[91m.. .[0m[91m.[0m[91m....[0m[91m.[0m[91m.[0m[91m.. [0m[91m.[0m[91m....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m .[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m..[0m[91m 17%[0m[91m 27.4M[0m[91m 1s[0m[91m
   600K[0m[91m [0m[91m..[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m..[0m[91m [0m[91m.[0m[91m.[0m[91m....[0m[91m.[0m[91m..[0m[91m.[0m[91m ...[0m[91m.[0m[91m...[0m[91m.[0m[91m.. [0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m..[0m[91m.[0m[91m ....[0m[91m.[0m[91m..... 19% 27.8M 1s
   650K ...[0m[91m..[0m[91m.[0m[91m.[0m[91m.[0m[91m.. .[0m[91m.[0m[91m.[0m[91m..[0m[91m.[0m[91m.... .[0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m....[0m[91m.[0m[91m.. ...[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m 20%[0m[91m 42.9M 1s[0m[91m
   700K[0m[91m [0m[91m...[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.. .[0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m.. [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m ..[0m[91m.[0m[91m.....[0m[91m.. ..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m..[0m[91m.[0m[91m 22% 37.1M[0m[91m 1s[0m[91m
   750K[0m[91m [0m[91m.[0m[91m.[0m[91m...[0m[91m....[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m...[0m[91m.[0m[91m. ..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.. 23% 2.05M 1s
   800K .......... .......... .......... ..[0m[91m........ .......... 25%  201M 1s
   850K .......... .......... .......... .......... .......... 26%  367M 1s
   900K .......... .......... .......... .......... .......... 28%  349M 0s
   950K .......... .......... .......... .......... .......... 29%  292M 0s
  1000K .......... .........[0m[91m. .......... .......... .......... 31%  245M 0s
  1050K .......... ..........[0m[91m .......... .......... .......... 32%  146M 0s
  1100K .......... .......... .......... .......... .......... 34%  225M 0s
  1150K ....[0m[91m...... .......... .......... .......... .......... 35%  271M 0s
  1200K .......... ....[0m[91m...... .......... .......... .......... 37%  247M 0s
  1250K .......... .......... .......... ..[0m[91m........ .......... 38%  240M 0s
  1300K .......... .......... ....[0m[91m...... .......... .......... 40%  308M 0s
  1350K .......... .......[0m[91m... .......... .......... .......... 41%  279M 0s
  1400K ..........[0m[91m .......... .......... .......... .......... 43%  287M 0s
  1450K .......... .[0m[91m......... ........[0m[91m.. .......... .......... 44%[0m[91m 1.58M 0s
  1500K .......... .......... .......... .......... .......... 46%  208M 0s
  1550K .......... .......... ..........[0m[91m .......... .......[0m[91m... 47%  217M 0s
  1600K .......... ...[0m[91m....... ..[0m[91m........ .......... .[0m[91m......... 49%  236M 0s
  1650K .......... ....[0m[91m.[0m[91m..... .......... ..[0m[91m........ [0m[91m.........[0m[91m. 50%  168M 0s
  1700K .......[0m[91m... ......[0m[91m.... ....[0m[91m...... .......... .......... 52%  138M 0s[0m[91m
  1750K .......... .......... .......... .......... .......... 53%  249M 0s
  1800K .......[0m[91m... .......... .......... .......... .......[0m[91m... 55%  178M 0s
  1850K .......... .......... .......... .......... .......... 56%  351M 0s
  1900K .......... .......... .......... .....[0m[91m..... .......... 58%  148M 0s
  1950K .......... .......... .....[0m[91m..... .......... .......... 59%  243M 0s
  2000K .......[0m[91m... .......... .......... .......... .......... 61%  223M 0s
  2050K .......... .......... .[0m[91m......... .......... .......... 62%  176M 0s
  2100K ...[0m[91m....... .......... .......... .......... ...[0m[91m....... 64%  183M 0s
  2150K .......... .......... .......... ...[0m[91m....... .......... 65%  142M 0s
  2200K .......... .......... .......... .........[0m[91m. .......... 67%  244M 0s
  2250K .......... .......... .......... .......... .....[0m[91m..... 68%  189M 0s
  2300K .......... .......... .......... .......... .......... 70%  157M 0s
  2350K .......... .......... .....[0m[91m..... .......... .......... 71%  198M 0s
  2400K .......... .......... .......... .......... .......... 73%  348M 0s
  2450K .....[0m[91m..... .......... .......... .......... .......... 74%  330M 0s
  2500K .......... .......... .......... .......... .......... 76%  276M 0s
  2550K[0m[91m .......... .......... .......... .......... .......... 77%  256M 0s
  2600K .......... .......... .......... .......... .......[0m[91m... 79%  349M 0s
  2650K .......... .......... .......... .......... .......... 80%  349M 0s
  2700K .......... .......... .......... .......... ...[0m[91m....... 82%  201M 0s
  2750K .......... .......... .......... .......... .......... 83%  310M 0s
  2800K .......... .......... .......... .........[0m[91m. .......... 85%  254M 0s
  2850K .......... .......... .......... .......... .......... 86%  348M 0s
  2900K .......... .......... .......... .....[0m[91m..... .......... 88% 1.87M 0s
  2950K .......... .......[0m[91m... .......... .......... .......... 89%  191M 0s
  3000K .......... .......... .......... .[0m[91m......... .......[0m[91m... 91%  102M 0s
  3050K .......... ...[0m[91m....... .........[0m[91m. .......... .......... 92%  153M 0s
  3100K .......... .......... .......... .......... .......... 94% 88.5M 0s
  3150K .......... .......... .......... .......... .......... 95%  251M 0s
  3200K .......... .......... .......... .......... .......... 97%  334M 0s
  3250K .......... .......... .......... .......... .......... 98%  309M 0s
  3300K .......... .......... .......... .......... ....      100%  260M=0.3s

2019-06-23 13:24:19 (12.5 MB/s) - 'docker-gen-linux-amd64-0.7.4.tar.gz' saved [3424683/3424683]

[0mdocker-gen
Removing intermediate container 35c0dae75825
 ---> 1ba6238f698e
Step 9/15 : COPY network_internal.conf /etc/nginx/
 ---> a3351390104b
Step 10/15 : COPY . /app/
 ---> 0e780f1bf6b2
Step 11/15 : WORKDIR /app/
 ---> Running in 0c31c665f9fa
Removing intermediate container 0c31c665f9fa
 ---> 53beefdfb8ce
Step 12/15 : ENV DOCKER_HOST unix:///tmp/docker.sock
 ---> Running in c8287d5adcc1
Removing intermediate container c8287d5adcc1
 ---> 7ab44da6cab7
Step 13/15 : VOLUME ["/etc/nginx/certs", "/etc/nginx/dhparam"]
 ---> Running in 5d1376329e25
Removing intermediate container 5d1376329e25
 ---> 15db38942572
Step 14/15 : ENTRYPOINT ["/app/docker-entrypoint.sh"]
 ---> Running in fcac990b202a
Removing intermediate container fcac990b202a
 ---> 8844cde60cd8
Step 15/15 : CMD ["forego", "start", "-r"]
 ---> Running in 9dd09affb229
Removing intermediate container 9dd09affb229
 ---> 77e4acc73c1f
Successfully built 77e4acc73c1f
Successfully tagged jwilder/nginx-proxy:test
> Building nginx-proxy-tester image...
Sending build context to Docker daemon  11.26kB
Step 1/6 : FROM python:2.7-alpine
2.7-alpine: Pulling from library/python

[1A[1K[Ke7c96db7181b: Pulling fs layer [1B
[1A[1K[K1819f4b92bc2: Pulling fs layer [1B
[1A[1K[Kda13060a0845: Pulling fs layer [1B
[1A[1K[K2b929b7be260: Pulling fs layer [1B[1A[1K[K2b929b7be260: Waiting [1B[4A[1K[Ke7c96db7181b: Downloading     28kB/2.757MB[4B[3A[1K[K1819f4b92bc2: Downloading  3.236kB/301.9kB[3B[3A[1K[K1819f4b92bc2: Downloading  301.9kB/301.9kB[3B[3A[1K[K1819f4b92bc2: Verifying Checksum [3B[3A[1K[K1819f4b92bc2: Download complete [3B[2A[1K[Kda13060a0845: Downloading  184.1kB/18.28MB[2B[4A[1K[Ke7c96db7181b: Verifying Checksum [4B[4A[1K[Ke7c96db7181b: Download complete [4B[4A[1K[Ke7c96db7181b: Extracting  32.77kB/2.757MB[4B[2A[1K[Kda13060a0845: Downloading  9.305MB/18.28MB[2B[4A[1K[Ke7c96db7181b: Extracting  557.1kB/2.757MB[4B[2A[1K[Kda13060a0845: Verifying Checksum [2B[2A[1K[Kda13060a0845: Download complete [2B[4A[1K[Ke7c96db7181b: Extracting  2.757MB/2.757MB[4B[1A[1K[K2b929b7be260: Downloading  18.29kB/1.818MB[1B[4A[1K[Ke7c96db7181b: Pull complete [4B[3A[1K[K1819f4b92bc2: Extracting  32.77kB/301.9kB[3B[1A[1K[K2b929b7be260: Downloading  1.818MB/1.818MB[1B[1A[1K[K2b929b7be260: Download complete [1B[3A[1K[K1819f4b92bc2: Extracting  301.9kB/301.9kB[3B[3A[1K[K1819f4b92bc2: Extracting  301.9kB/301.9kB[3B[3A[1K[K1819f4b92bc2: Pull complete [3B[2A[1K[Kda13060a0845: Extracting  196.6kB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  2.163MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  5.308MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  9.437MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  12.19MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  15.14MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting   17.5MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  18.28MB/18.28MB[2B[2A[1K[Kda13060a0845: Extracting  18.28MB/18.28MB[2B[2A[1K[Kda13060a0845: Pull complete [2B[1A[1K[K2b929b7be260: Extracting  32.77kB/1.818MB[1B[1A[1K[K2b929b7be260: Extracting  1.147MB/1.818MB[1B[1A[1K[K2b929b7be260: Extracting  1.818MB/1.818MB[1B[1A[1K[K2b929b7be260: Pull complete [1BDigest: sha256:31727beff76ad298022e187ad63fc828a1143e7459b38629ca92e3925dfcf8e9
Status: Downloaded newer image for python:2.7-alpine
 ---> ee70cb11da0d
Step 2/6 : RUN apk add --update bash openssl curl && rm -rf /var/cache/apk/*
 ---> Running in 1489be9c1b44
fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz
(1/6) Installing bash (4.4.19-r1)
Executing bash-4.4.19-r1.post-install
(2/6) Installing nghttp2-libs (1.35.1-r0)
(3/6) Installing libssh2 (1.8.2-r0)
(4/6) Installing libcurl (7.64.0-r2)
(5/6) Installing curl (7.64.0-r2)
(6/6) Installing openssl (1.1.1b-r1)
Executing busybox-1.29.3-r10.trigger
OK: 20 MiB in 39 packages
Removing intermediate container 1489be9c1b44
 ---> 1cfadc548e54
Step 3/6 : COPY python-requirements.txt /requirements.txt
 ---> 4dc056c94e97
Step 4/6 : RUN pip install -r /requirements.txt
 ---> Running in 096113fe327d
[91mDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.
[0mCollecting backoff==1.3.2 (from -r /requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/7a/ba/5786dfda66ee5e4d1fe09164a1e52c68cdb93205c81b8c0f22b4ccb1a1e7/backoff-1.3.2.tar.gz
Collecting docker-compose==1.11.2 (from -r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/66/d4/2b69141a0b5e685659891c04748bbb414bef67c79a46333d915fbda3731d/docker_compose-1.11.2-py2.py3-none-any.whl (85kB)
Collecting docker==2.1.0 (from -r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/42/67/415e39720bfc3ddcb07eb7007598b0f301246c168d3ac0e8cb5a625a1f9c/docker-2.1.0-py2.py3-none-any.whl (105kB)
Collecting pytest==3.0.5 (from -r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/dd/28/4abc547194d8e6ff93d3ef186cb809a413d719cdc21e524af08fe986f7c2/pytest-3.0.5-py2.py3-none-any.whl (170kB)
Collecting requests==2.11.1 (from -r /requirements.txt (line 5))
  Downloading https://files.pythonhosted.org/packages/ea/03/92d3278bf8287c5caa07dbd9ea139027d5a3592b0f4d14abf072f890fab2/requests-2.11.1-py2.py3-none-any.whl (514kB)
Collecting PyYAML<4,>=3.10 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/9e/a3/1d13970c3f36777c583f136c136f804d70f500168edc1edea6daa7200769/PyYAML-3.13.tar.gz (270kB)
Collecting backports.ssl-match-hostname>=3.5; python_version < "3.5" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/ff/2b/8265224812912bc5b7a607c44bf7b027554e1b9775e9ee0de8032e3de4b2/backports.ssl_match_hostname-3.7.0.1.tar.gz
Collecting dockerpty<0.5,>=0.4.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/8d/ee/e9ecce4c32204a6738e0a5d5883d3413794d7498fe8b06f44becc028d3ba/dockerpty-0.4.1.tar.gz
Collecting six<2,>=1.3.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl
Collecting enum34<2,>=1.0.4; python_version < "3.4" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/db/e56e6b4bbac7c4a06de1c50de6fe1ef3810018ae11732a50f15f62c7d050/enum34-1.1.6-py2-none-any.whl
Collecting colorama<0.4,>=0.3.7 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/db/c8/7dcf9dbcb22429512708fe3a547f8b6101c0d02137acbd892505aee57adf/colorama-0.3.9-py2.py3-none-any.whl
Collecting ipaddress>=1.0.16; python_version < "3.3" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/fc/d0/7fc3a811e011d4b388be48a0e381db8d990042df54aa4ef4599a31d39853/ipaddress-1.0.22-py2.py3-none-any.whl
Collecting websocket-client<1.0,>=0.32.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/29/19/44753eab1fdb50770ac69605527e8859468f3c0fd7dc5a76dd9c4dbd7906/websocket_client-0.56.0-py2.py3-none-any.whl (200kB)
Collecting cached-property<2,>=1.2.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/3b/86/85c1be2e8db9e13ef9a350aecd6dea292bd612fa288c2f40d035bb750ded/cached_property-1.5.1-py2.py3-none-any.whl
Collecting docopt<0.7,>=0.6.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz
Collecting jsonschema<3,>=2.5.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl
Collecting texttable<0.9,>=0.8.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/74/49/23d944a6f7d4dd20846b2df2914fe108c96a253567c140c416edbf270f80/texttable-0.8.8.tar.gz
Collecting docker-pycreds>=0.2.1 (from docker==2.1.0->-r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/f5/e8/f6bd1eee09314e7e6dee49cbe2c5e22314ccdb38db16c9fc72d2fa80d054/docker_pycreds-0.4.0-py2.py3-none-any.whl
Collecting py>=1.4.29 (from pytest==3.0.5->-r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/76/bc/394ad449851729244a97857ee14d7cba61ddb268dce3db538ba2f2ba1f0f/py-1.8.0-py2.py3-none-any.whl (83kB)
Collecting functools32; python_version == "2.7" (from jsonschema<3,>=2.5.1->docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/60/6ac26ad05857c601308d8fb9e87fa36d0ebf889423f47c3502ef034365db/functools32-3.2.3-2.tar.gz
Building wheels for collected packages: backoff, PyYAML, backports.ssl-match-hostname, dockerpty, docopt, texttable, functools32
  Building wheel for backoff (setup.py): started
  Building wheel for backoff (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/fc/d8/34/d2bccc8e1a15f611dbd606c69e5d027b62dfcf922fdf8e396d
  Building wheel for PyYAML (setup.py): started
  Building wheel for PyYAML (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/ad/da/0c/74eb680767247273e2cf2723482cb9c924fe70af57c334513f
  Building wheel for backports.ssl-match-hostname (setup.py): started
  Building wheel for backports.ssl-match-hostname (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/f1/ad/d7/c184cf1ef67b07f98565dc52f91ed4f9a759b7b46674b2fd76
  Building wheel for dockerpty (setup.py): started
  Building wheel for dockerpty (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/e5/1e/86/bd0a97a0907c6c654af654d5875d1d4383dd1f575f77cee4aa
  Building wheel for docopt (setup.py): started
  Building wheel for docopt (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/9b/04/dd/7daf4150b6d9b12949298737de9431a324d4b797ffd63f526e
  Building wheel for texttable (setup.py): started
  Building wheel for texttable (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/e6/50/66/cffbd36db351677a36e03cc8f071e519cbf6a907ef9bad117d
  Building wheel for functools32 (setup.py): started
  Building wheel for functools32 (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/b5/18/32/77a1030457155606ba5e3ec3a8a57132b1a04b1c4f765177b2
Successfully built backoff PyYAML backports.ssl-match-hostname dockerpty docopt texttable functools32
Installing collected packages: backoff, PyYAML, backports.ssl-match-hostname, six, dockerpty, enum34, websocket-client, requests, ipaddress, docker-pycreds, docker, colorama, cached-property, docopt, functools32, jsonschema, texttable, docker-compose, py, pytest
Successfully installed PyYAML-3.13 backoff-1.3.2 backports.ssl-match-hostname-3.7.0.1 cached-property-1.5.1 colorama-0.3.9 docker-2.1.0 docker-compose-1.11.2 docker-pycreds-0.4.0 dockerpty-0.4.1 docopt-0.6.2 enum34-1.1.6 functools32-3.2.3.post2 ipaddress-1.0.22 jsonschema-2.6.0 py-1.8.0 pytest-3.0.5 requests-2.11.1 six-1.12.0 texttable-0.8.8 websocket-client-0.56.0
Removing intermediate container 096113fe327d
 ---> 2157cba9eaa1
Step 5/6 : WORKDIR /test
 ---> Running in 86304046fedb
Removing intermediate container 86304046fedb
 ---> 25056c281bc8
Step 6/6 : ENTRYPOINT ["pytest"]
 ---> Running in 7c6f60711abd
Removing intermediate container 7c6f60711abd
 ---> 6683b7a936de
Successfully built 6683b7a936de
Successfully tagged nginx-proxy-tester:latest
[1m============================= test session starts ==============================[0m
platform linux2 -- Python 2.7.16, pytest-3.0.5, py-1.8.0, pluggy-0.4.0 -- /usr/local/bin/python
rootdir: /home/travis/build/jwilder/nginx-proxy/test, inifile: pytest.ini
[1mcollecting 0 items[0m[1mcollecting 3 items[0m[1mcollecting 5 items[0m[1mcollecting 6 items[0m[1mcollecting 8 items[0m[1mcollecting 14 items[0m[1mcollecting 17 items[0m[1mcollecting 20 items[0m[1mcollecting 24 items[0m[1mcollecting 40 items[0m[1mcollecting 47 items[0m[1mcollecting 52 items[0m[1mcollecting 56 items[0m[1mcollecting 59 items[0m[1mcollecting 63 items[0m[1mcollecting 66 items[0m[1mcollecting 69 items[0m[1mcollecting 71 items[0m[1mcollecting 73 items[0m[1mcollecting 85 items[0m[1mcollecting 97 items[0m[1mcollecting 98 items[0m[1mcollecting 99 items[0m[1mcollecting 100 items[0m[1mcollecting 103 items[0m[1mcollecting 104 items[0m[1mcollecting 109 items[0m[1mcollecting 112 items[0m[1mcollecting 114 items[0m[1mcollecting 117 items[0m[1mcollecting 123 items[0m[1mcollecting 129 items[0m[1mcollected 129 items 
[0m
test_DOCKER_HOST_unix_socket.py::test_unknown_virtual_host [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web1 [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web2 [31mFAILED[0m
test_composev2.py::test_unknown_virtual_host [31mFAILED[0m
test_composev2.py::test_forwards_to_whoami [31mFAILED[0m
test_default-host.py::test_fallback_on_default [31mFAILED[0m
test_events.py::test_nginx_proxy_behavior_when_alone [31mFAILED[0m
test_events.py::test_new_container_is_detected [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv4 [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv6 [31mFAILED[0m
test_multiple-hosts.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_multiple-hosts.py::test_webA_is_forwarded [31mFAILED[0m
test_multiple-hosts.py::test_webB_is_forwarded [31mFAILED[0m
test_multiple-networks.py::test_unknown_virtual_host [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web1 [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_unknown_virtual_host [31mFAILED[0m
test_nominal.py::test_forwards_to_web1 [31mFAILED[0m
test_nominal.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_ipv6_is_disabled_by_default [32mPASSED[0m
test_wildcard_host.py::test_wildcard_prefix[f00.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[bar.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.f00-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.bar-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[unexpected.nginx-proxy.tld] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] [31mFAILED[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_301 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_delete_cert_and_restart_reverseproxy [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_still_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_now_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_now_broken_since_there_is_no_cert [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_default_nginx_welcome_page_should_not_be_served [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_a_is_forwarded [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_b_gets_an_error [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_reverseproxy_survive_restart [33mxfail[0m
test_custom/test_defaults-location.py::test_custom_default_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_is_overriden_for_web3 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_block_is_present_in_nginx_generated_conf [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_forwards_to_whoami [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_forwards_to_whoami [31mFAILED[0m
test_headers/test_http.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_http.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_http.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_httpoxy_safe [31mFAILED[0m
test_headers/test_https.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_https.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_https.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_httpoxy_safe [31mFAILED[0m
test_multiple-ports/test_VIRTUAL_PORT.py::test_answer_is_served_from_chosen_port [31mFAILED[0m
test_multiple-ports/test_default-80.py::test_answer_is_served_from_port_80_by_default [31mFAILED[0m
test_multiple-ports/test_single-port-not-80.py::test_answer_is_served_from_exposed_port_even_if_not_80 [31mFAILED[0m
test_ssl/test_dhparam.py::test_dhparam_is_not_generated_if_present [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_https_works [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_dhparam_is_used [31mFAILED[0m
test_ssl/test_dhparam_generation.py::test_dhparam_is_generated_if_missing [31mFAILED[0m
test_ssl/test_hsts.py::test_web1_HSTS_default [31mFAILED[0m
test_ssl/test_hsts.py::test_web1_HSTS_error [31mFAILED[0m
test_ssl/test_hsts.py::test_web2_HSTS_off [31mFAILED[0m
test_ssl/test_hsts.py::test_web3_HSTS_custom [31mFAILED[0m
test_ssl/test_hsts.py::test_web4_HSTS_off_noredirect [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_http_is_not_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_https_is_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_HSTS_policy_is_active [31mFAILED[0m
test_ssl/test_nohttps.py::test_http_is_forwarded [31mFAILED[0m
test_ssl/test_nohttps.py::test_https_is_disabled [32mPASSED[0m
test_ssl/test_noredirect.py::test_web3_http_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web3_https_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web2_HSTS_policy_is_inactive [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[bar] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[1-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[2-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[3-False] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[1] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[2] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_web3_https_is_500_and_SSL_validation_fails [31mFAILED[0m

=================================== FAILURES ===================================
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa7f1650>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa80cc50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6c3990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6c3dd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:35 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa7c7450>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa72a390>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa72a090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6d5210>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:35 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6d56d0>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6d5810>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6d5550>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6d52d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:35 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa63ff90>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_composev2.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa7b4b50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48c190>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa48c090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml up -d
INFO:root:Connecting to docker network: test_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa48cbd0>

[1m    def test_forwards_to_whoami(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.local/port")[0m

[1m[31mtest_composev2.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa48ca10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6b9610>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6b9750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.local')
DEBUG:DNS:'web.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml down
[1m[31m___________________________ test_fallback_on_default ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6b9a10>

[1m    def test_fallback_on_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_default-host.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f6250>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4f6590>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4f6650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:47 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml down
[1m[31m_____________________ test_nginx_proxy_behavior_when_alone _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa675b10>

[1m    def test_nginx_proxy_behavior_when_alone(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_events.py[0m:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa5a09d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5a0c10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa5a0390>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_events.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m________________________ test_new_container_is_detected ________________________[0m

web1 = <Container: 55f27ee649>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa48cf10>

[1m    def test_new_container_is_detected(web1, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy/port")[0m

[1m[31mtest_events.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa5b6150>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa7d3210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa7d3b10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy')
DEBUG:DNS:'web1.nginx-proxy' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_events.yml down
[1m[31m________________________ test_unknown_virtual_host_ipv4 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f6850>

[1m    def test_unknown_virtual_host_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_ipv6.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa48cb50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5b6650>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6b9f50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa58e350>

[1m    def test_forwards_to_web1_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58ecd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa58e5d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa665e50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa537d10>

[1m    def test_forwards_to_web2_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa537790>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa537f90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa537e50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________________ test_unknown_virtual_host_ipv6 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa665950>

[1m    def test_unknown_virtual_host_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa665ed0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4f2690>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4f2250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa5027d0>

[1m    def test_forwards_to_web1_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa502050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5020d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa502610>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa80cb90>

[1m    def test_forwards_to_web2_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa530a50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa530990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa530cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:24:59 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa566ed0>

[1m    def test_unknown_virtual_host_is_503(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa514050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa514e10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa514cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:06 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webA_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa514310>

[1m    def test_webA_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webA.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa530510>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54db10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='weba.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa54db50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:06 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('weba.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('weba.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'weba.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('weba.nginx-proxy.tld')
DEBUG:DNS:'weba.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webB_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa54d090>

[1m    def test_webB_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webB.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa54dd50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54dd10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='webb.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa52b150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:06 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('webb.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('webb.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'webb.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('webb.nginx-proxy.tld')
DEBUG:DNS:'webb.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6c3990>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_multiple-networks.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa7cd450>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4174d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4176d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:12 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml up -d
INFO:root:Connecting to docker network: test_net2
INFO:root:Connecting to docker network: test_net1
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa58a350>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58abd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa58a910>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa7c7d90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:12 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa5c91d0>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6d5410>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6d5a10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa6d5d50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:12 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_net2
INFO:root:Disconnecting from network test_net1
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa7f1650>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_nominal.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f6ad0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4f6210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa54e110>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_nominal.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa511bd0>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa511d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa511890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa511990>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa53fd90>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa53fd10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa53f810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa53f850>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________ test_wildcard_prefix[f00.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa986e90>
host = 'f00.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa573a90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa573fd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='f00.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4ac750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('f00.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('f00.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'f00.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('f00.nginx-proxy.test')
DEBUG:DNS:'f00.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[bar.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa5b6150>
host = 'bar.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa72a650>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa480e90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4accd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.test')
DEBUG:DNS:'bar.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.f00-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6d5710>
host = 'test.nginx-proxy.f00', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6d57d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48c090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.f00', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa48cbd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.f00', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.f00')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.f00'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.f00')
DEBUG:DNS:'test.nginx-proxy.f00' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.bar-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa48c9d0>
host = 'test.nginx-proxy.bar', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58ee90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa58e310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.bar', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa58e550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.bar', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.bar')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.bar'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.bar')
DEBUG:DNS:'test.nginx-proxy.bar' does not match
[1m[31m_____________ test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f22d0>
host = 'web3.123.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f2f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa52bf10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa52b3d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa50fa10>
host = 'web3.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa50f350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa50f710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa530590>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa52be10>
host = 'web3.123.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa52b150>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4cd790>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4cdc90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa55cc50>
host = 'web3.123-ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa55c610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa55cdd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa530550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123-abc.nginx-proxy.regexp' does not match
[1m[31m_ test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] _[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4cd910>
host = 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa605b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa605b90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa605850>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
[1m[31m_____________ test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa530c50>
host = 'web4.123.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa5306d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4afa50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa59b6d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa63aed0>
host = 'web4.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa63ae50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa63ae10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa63a910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa665d90>
host = 'web4.123.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa603310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa603950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa603b90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa7c7a10>
host = 'web4.123-ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa7c7d50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa617210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa617590>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123-abc.nginx-proxy.regexp' does not match
[1m[31m__________ test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa603190>
host = 'web4.whatever.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa514c50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa514e50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa514210>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp' does not match
[1m[31m__________ test_non_matching_host_is_503[unexpected.nginx-proxy.tld] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa617610>
host = 'unexpected.nginx-proxy.tld'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa68c550>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa68cad0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unexpected.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa68cbd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unexpected.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unexpected.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unexpected.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unexpected.nginx-proxy.tld')
DEBUG:DNS:'unexpected.nginx-proxy.tld' does not match
[1m[31m_ test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] _[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa54dd10>
host = 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa54d5d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54db10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa54dc90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:24 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml down
[1m[31m___________ test_custom_default_conf_does_not_apply_to_unknown_vhost ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f6290>

[1m    def test_custom_default_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f6310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4cd590>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4cdb10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web1 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f2c10>

[1m    def test_custom_default_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa503050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4fe2d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4fea10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web2 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa514d50>

[1m    def test_custom_default_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa514d90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa514110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa603450>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m________________ test_custom_default_conf_is_overriden_for_web3 ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6b98d0>

[1m    def test_custom_default_conf_is_overriden_for_web3(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6b9b50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6b9a50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa573c90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.local')
DEBUG:DNS:'web3.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa455790>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa455a50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa52c890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa52c510>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:58 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa566090>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa52b490>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa52bfd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa52bdd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:58 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa54e290>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa537c90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa537950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa537e10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:25:58 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa455590>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f6090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa3b24d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa3b2bd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:05 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa42a210>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa42a5d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa42a9d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa502750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:05 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6d5dd0>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6d52d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4b4b90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4955d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:05 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m_____________ test_custom_block_is_present_in_nginx_generated_conf _____________[0m
No running jwilder/nginx-proxy:test container
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f2d10>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa698c10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54fd10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa54f0d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa58ea90>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa530f10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5305d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa530250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa55abd0>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa55ad50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa55a6d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa7c74d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa511690>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa7c7a90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5a0f90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa5a0c50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa695910>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa695290>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa6651d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4da8d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa43fd50>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa43fe50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa43f7d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa43f9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:18 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa501b10>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:31: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (00659d92a8)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.27.0.3 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4cd6d0>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm c1d56ab91b0b\n"[0m
[1m[31mE         + I'm c1d56ab91b0b[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:38: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (00659d92a8)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.27.0.3 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml down
INFO:root:removing nginx.tmpl
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa480d50>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:54: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (0ce6e5933d)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.28.0.2 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa681190>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm 0d1d726c7a5e\n"[0m
[1m[31mE         + I'm 0d1d726c7a5e[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:61: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (0ce6e5933d)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.28.0.2 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml down
INFO:root:removing nginx.tmpl
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa603310>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_http.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa501290>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa576e10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa576450>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa603850>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa693a10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa535350>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa535b90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa48b2d0>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_http.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa48b450>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48bf90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa48b6d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa47b7d0>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa47bf50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa47b590>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa47b050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa47b0d0>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa514450>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa61d810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa61dcd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa574e50>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa574d50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa7b4ed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa698990>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa503b50>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_http.py[0m:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa455790>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa455f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa455610>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa455510>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa59be10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4f6050>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4f6c10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa3d1b50>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa3d1b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4ac750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4ac3d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa698c50>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa698790>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa66a350>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa66a190>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa502a90>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa48c3d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4a8a10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4a8190>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4f6710>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_http.py[0m:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f6690>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa3ab190>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa3abd50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:41 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml down
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa73a150>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_https.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58a350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa492110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa492150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa580e50>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa580e90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa5803d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa580890>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa72a6d0>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_https.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4af250>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa659b90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa6592d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4cd790>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4cd750>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54e410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa54e850>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa3743d0>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa374610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa374d50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa374dd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa517c50>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa5174d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4fd250>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa4fdb50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa80c710>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_https.py[0m:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa80c610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa530d90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa530c90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa63a3d0>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa52ce10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48b6d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa48b9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa698690>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6983d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa66a1d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa66a310>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa503a90>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa537910>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa537d10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa537690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa52bdd0>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa52bcd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4927d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa492110>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa695250>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_https.py[0m:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4f2f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa576e10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa53ff50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:48 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml down
[1m[31m____________________ test_answer_is_served_from_chosen_port ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa694e50>

[1m    def test_answer_is_served_from_chosen_port(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_VIRTUAL_PORT.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa52c4d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa601090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa601510>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:26:56 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml down
[1m[31m________________ test_answer_is_served_from_port_80_by_default _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa5a0190>

[1m    def test_answer_is_served_from_port_80_by_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_default-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa2163d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa4dacd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa4da9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:01 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml down
[1m[31m____________ test_answer_is_served_from_exposed_port_even_if_not_80 ____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa694190>

[1m    def test_answer_is_served_from_exposed_port_even_if_not_80(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_single-port-not-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58af10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa517d10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa54fc90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:06 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml down
[1m[31m___________________ test_dhparam_is_not_generated_if_present ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>

[1m    def test_dhparam_is_not_generated_if_present(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:69: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml up -d
[1m[31m____________________________ test_web5_https_works _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4fe390>

[1m    def test_web5_https_works(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web5.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_dhparam.py[0m:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa4fe7d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa573ad0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web5.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa502fd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web5.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web5.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web5.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web5.nginx-proxy.tld')
DEBUG:DNS:'web5.nginx-proxy.tld' does not match
[1m[31m__________________________ test_web5_dhparam_is_used ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>

[1m    @require_openssl("1.0.2")[0m
[1m    def test_web5_dhparam_is_used(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:88: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:11 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml down
[1m[31m_____________________ test_dhparam_is_generated_if_missing _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>

[1m    def test_dhparam_is_generated_if_missing(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam_generation.py[0m:36: AssertionError
------------------------------- nginx-proxy logs -------------------------------
WARNING: /etc/nginx/dhparam/dhparam.pem was not found. A pre-generated dhparam.pem will be used for now while a new one
is being generated in the background.  Once the new dhparam.pem is in place, nginx will be reloaded.
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:17 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1
2019/06/23 13:27:17 [notice] 43#43: signal process started
Generating DH parameters, 256 bit long safe prime, generator 2
This is going to take a long time
dhparam generation complete, reloading nginx

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam_generation.yml up -d
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam_generation.yml down
[1m[31m____________________________ test_web1_HSTS_default ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa50f350>

[1m    def test_web1_HSTS_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa2165d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54db50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa355050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:22 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m_____________________________ test_web1_HSTS_error _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa501b50>

[1m    def test_web1_HSTS_error(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/status/500", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa501a10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa501b90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /status/500 (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa6b9cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:22 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m______________________________ test_web2_HSTS_off ______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa6d5d10>

[1m    def test_web2_HSTS_off(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa6d5e10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa362d50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa362fd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:22 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m____________________________ test_web3_HSTS_custom _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa415310>

[1m    def test_web3_HSTS_custom(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa415110>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa415a10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa415050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:22 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m________________________ test_web4_HSTS_off_noredirect _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa597b50>

[1m    def test_web4_HSTS_off_noredirect(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web4.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa597950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa597490>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web4.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa503bd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:22 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web4.nginx-proxy.tld')
DEBUG:DNS:'web4.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml down
[1m[31m_______________________ test_web2_http_is_not_forwarded ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa54e950>

[1m    def test_web2_http_is_not_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa309a50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa309410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa309550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:29 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web2_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa3ab050>

[1m    def test_web2_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa3ab590>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa3abe10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa3ab2d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:29 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_______________________ test_web2_HSTS_policy_is_active ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa59b290>

[1m    def test_web2_HSTS_policy_is_active(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa59b890>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48ba90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa48b050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:29 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml down
[1m[31m____________________________ test_http_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa665a90>

[1m    def test_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttps.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa59a190>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa337050>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa337650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:34 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttps.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_http_is_forwarded __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa337d90>

[1m    def test_web3_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa38ab10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa38aa50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa574e50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:39 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa2c7650>

[1m    def test_web3_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa2c7e90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa2c78d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa574190>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:39 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m______________________ test_web2_HSTS_policy_is_inactive _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa514050>

[1m    def test_web2_HSTS_policy_is_inactive(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa47ba90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa42a290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa42a190>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:39 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml down
[1m[31m____________________ test_web1_http_redirects_to_https[foo] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa566090>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa42ac90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa374110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='foo.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa3741d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m____________________ test_web1_http_redirects_to_https[bar] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa3556d0>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa355190>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa355990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa82d9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[foo] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa583650>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa5833d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa54fb50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa54f650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[bar] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa455790>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa455250>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa48c950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa48c090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[foo] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa343290>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa3433d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa55a1d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa55a710>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[bar] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa58abd0>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa58a590>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa601790>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa601110>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:45 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml down
[1m[31m_____________________ test_http_redirects_to_https[1-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa72a610>
subdomain = 1, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa1d1410>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa387450>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='1.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa5801d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml up -d
INFO:root:Connecting to docker network: wildcardcertandnohttps_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_http_redirects_to_https[2-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa301290>
subdomain = 2, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa301750>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa301a10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='2.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa43f750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m____________________ test_http_redirects_to_https[3-False] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa4fd3d0>
subdomain = 3, should_redirect_to_https = False

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa372610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa372210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='3.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f12aa372dd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[1] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa5112d0>
subdomain = 1

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa68c090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa2c3510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='1.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa2c30d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[2] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa535790>
subdomain = 2

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa535990>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa535e50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='2.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa415c90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m_______________ test_web3_https_is_500_and_SSL_validation_fails ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f12aa979a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f12aa2f6f50>

[1m    def test_web3_https_is_500_and_SSL_validation_fails(docker_compose, nginxproxy):[0m
[1m        with pytest.raises( (CertificateError, SSLError) ) as excinfo:[0m
[1m>           nginxproxy.get("https://3.web.nginx-proxy.tld/port")[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f12aa2f6550>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f12aa2f6d10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='3.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f12aa2f6810>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/06/23 13:27:52 Unable to parse template: template: nginx.tmpl:176: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network wildcardcertandnohttps_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml down
[1m[31m============== 115 failed, 2 passed, 12 xfailed in 206.55 seconds ==============[0m
make: *** [test-debian] Error 1
travis_time:end:0bdb0d50:start=1561296240323739399,finish=1561296480654710733,duration=240330971334[0K[31;1mThe command "make $TEST_TARGET" exited with 2.[0m



Done. Your build exited with 1.
