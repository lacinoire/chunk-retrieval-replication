travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: ddf199f6-bed8-4c1f-b896-eb5a0939fcc8@1.worker-org-5dcc948c89-ldvdr.gce-production-2
version: v6.2.1 https://github.com/travis-ci/worker/tree/4e3246c044eb4915c2378ffacd0b3d3ed0136bba
instance: travis-job-6c68fd61-61bc-45c9-8a1e-c9555b9b90dd travis-ci-garnet-trusty-1512502259-986baf0 (via amqp)
startup: 17.902785953s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: ruby
Build group: stable
Build dist: trusty
Build id: 565138602
Job id: 565138603
Runtime kernel version: 4.4.0-101-generic
travis-build version: 24c88d12b
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 19:58:13 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:38 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:41:20 2017
 OS/Arch:      linux/amd64
 Experimental: false
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	10.240.0.28/255.255.255.255
	172.17.0.1/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-98-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-98-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Kdocker stop/waiting
docker start/running, process 4374
travis_fold:end:docker_mtu[0Ktravis_fold:start:resolvconf[0Kresolvconf stop/waiting
resolvconf start/running
travis_fold:end:resolvconf[0K
travis_fold:start:git.checkout[0Ktravis_time:start:028dc55a[0K$ git clone --depth=50 https://github.com/jwilder/nginx-proxy.git jwilder/nginx-proxy
Cloning into 'jwilder/nginx-proxy'...
remote: Enumerating objects: 1437, done.[K
remote: Counting objects:   0% (1/1437)   [Kremote: Counting objects:   1% (15/1437)   [Kremote: Counting objects:   2% (29/1437)   [Kremote: Counting objects:   3% (44/1437)   [Kremote: Counting objects:   4% (58/1437)   [Kremote: Counting objects:   5% (72/1437)   [Kremote: Counting objects:   6% (87/1437)   [Kremote: Counting objects:   7% (101/1437)   [Kremote: Counting objects:   8% (115/1437)   [Kremote: Counting objects:   9% (130/1437)   [Kremote: Counting objects:  10% (144/1437)   [Kremote: Counting objects:  11% (159/1437)   [Kremote: Counting objects:  12% (173/1437)   [Kremote: Counting objects:  13% (187/1437)   [Kremote: Counting objects:  14% (202/1437)   [Kremote: Counting objects:  15% (216/1437)   [Kremote: Counting objects:  16% (230/1437)   [Kremote: Counting objects:  17% (245/1437)   [Kremote: Counting objects:  18% (259/1437)   [Kremote: Counting objects:  19% (274/1437)   [Kremote: Counting objects:  20% (288/1437)   [Kremote: Counting objects:  21% (302/1437)   [Kremote: Counting objects:  22% (317/1437)   [Kremote: Counting objects:  23% (331/1437)   [Kremote: Counting objects:  24% (345/1437)   [Kremote: Counting objects:  25% (360/1437)   [Kremote: Counting objects:  26% (374/1437)   [Kremote: Counting objects:  27% (388/1437)   [Kremote: Counting objects:  28% (403/1437)   [Kremote: Counting objects:  29% (417/1437)   [Kremote: Counting objects:  30% (432/1437)   [Kremote: Counting objects:  31% (446/1437)   [Kremote: Counting objects:  32% (460/1437)   [Kremote: Counting objects:  33% (475/1437)   [Kremote: Counting objects:  34% (489/1437)   [Kremote: Counting objects:  35% (503/1437)   [Kremote: Counting objects:  36% (518/1437)   [Kremote: Counting objects:  37% (532/1437)   [Kremote: Counting objects:  38% (547/1437)   [Kremote: Counting objects:  39% (561/1437)   [Kremote: Counting objects:  40% (575/1437)   [Kremote: Counting objects:  41% (590/1437)   [Kremote: Counting objects:  42% (604/1437)   [Kremote: Counting objects:  43% (618/1437)   [Kremote: Counting objects:  44% (633/1437)   [Kremote: Counting objects:  45% (647/1437)   [Kremote: Counting objects:  46% (662/1437)   [Kremote: Counting objects:  47% (676/1437)   [Kremote: Counting objects:  48% (690/1437)   [Kremote: Counting objects:  49% (705/1437)   [Kremote: Counting objects:  50% (719/1437)   [Kremote: Counting objects:  51% (733/1437)   [Kremote: Counting objects:  52% (748/1437)   [Kremote: Counting objects:  53% (762/1437)   [Kremote: Counting objects:  54% (776/1437)   [Kremote: Counting objects:  55% (791/1437)   [Kremote: Counting objects:  56% (805/1437)   [Kremote: Counting objects:  57% (820/1437)   [Kremote: Counting objects:  58% (834/1437)   [Kremote: Counting objects:  59% (848/1437)   [Kremote: Counting objects:  60% (863/1437)   [Kremote: Counting objects:  61% (877/1437)   [Kremote: Counting objects:  62% (891/1437)   [Kremote: Counting objects:  63% (906/1437)   [Kremote: Counting objects:  64% (920/1437)   [Kremote: Counting objects:  65% (935/1437)   [Kremote: Counting objects:  66% (949/1437)   [Kremote: Counting objects:  67% (963/1437)   [Kremote: Counting objects:  68% (978/1437)   [Kremote: Counting objects:  69% (992/1437)   [Kremote: Counting objects:  70% (1006/1437)   [Kremote: Counting objects:  71% (1021/1437)   [Kremote: Counting objects:  72% (1035/1437)   [Kremote: Counting objects:  73% (1050/1437)   [Kremote: Counting objects:  74% (1064/1437)   [Kremote: Counting objects:  75% (1078/1437)   [Kremote: Counting objects:  76% (1093/1437)   [Kremote: Counting objects:  77% (1107/1437)   [Kremote: Counting objects:  78% (1121/1437)   [Kremote: Counting objects:  79% (1136/1437)   [Kremote: Counting objects:  80% (1150/1437)   [Kremote: Counting objects:  81% (1164/1437)   [Kremote: Counting objects:  82% (1179/1437)   [Kremote: Counting objects:  83% (1193/1437)   [Kremote: Counting objects:  84% (1208/1437)   [Kremote: Counting objects:  85% (1222/1437)   [Kremote: Counting objects:  86% (1236/1437)   [Kremote: Counting objects:  87% (1251/1437)   [Kremote: Counting objects:  88% (1265/1437)   [Kremote: Counting objects:  89% (1279/1437)   [Kremote: Counting objects:  90% (1294/1437)   [Kremote: Counting objects:  91% (1308/1437)   [Kremote: Counting objects:  92% (1323/1437)   [Kremote: Counting objects:  93% (1337/1437)   [Kremote: Counting objects:  94% (1351/1437)   [Kremote: Counting objects:  95% (1366/1437)   [Kremote: Counting objects:  96% (1380/1437)   [Kremote: Counting objects:  97% (1394/1437)   [Kremote: Counting objects:  98% (1409/1437)   [Kremote: Counting objects:  99% (1423/1437)   [Kremote: Counting objects: 100% (1437/1437)   [Kremote: Counting objects: 100% (1437/1437), done.[K
remote: Compressing objects:   0% (1/625)   [Kremote: Compressing objects:   1% (7/625)   [Kremote: Compressing objects:   2% (13/625)   [Kremote: Compressing objects:   3% (19/625)   [Kremote: Compressing objects:   4% (25/625)   [Kremote: Compressing objects:   5% (32/625)   [Kremote: Compressing objects:   6% (38/625)   [Kremote: Compressing objects:   7% (44/625)   [Kremote: Compressing objects:   8% (50/625)   [Kremote: Compressing objects:   9% (57/625)   [Kremote: Compressing objects:  10% (63/625)   [Kremote: Compressing objects:  11% (69/625)   [Kremote: Compressing objects:  12% (75/625)   [Kremote: Compressing objects:  13% (82/625)   [Kremote: Compressing objects:  14% (88/625)   [Kremote: Compressing objects:  15% (94/625)   [Kremote: Compressing objects:  16% (100/625)   [Kremote: Compressing objects:  17% (107/625)   [Kremote: Compressing objects:  18% (113/625)   [Kremote: Compressing objects:  19% (119/625)   [Kremote: Compressing objects:  20% (125/625)   [Kremote: Compressing objects:  21% (132/625)   [Kremote: Compressing objects:  22% (138/625)   [Kremote: Compressing objects:  23% (144/625)   [Kremote: Compressing objects:  24% (150/625)   [Kremote: Compressing objects:  25% (157/625)   [Kremote: Compressing objects:  26% (163/625)   [Kremote: Compressing objects:  27% (169/625)   [Kremote: Compressing objects:  28% (175/625)   [Kremote: Compressing objects:  29% (182/625)   [Kremote: Compressing objects:  30% (188/625)   [Kremote: Compressing objects:  31% (194/625)   [Kremote: Compressing objects:  32% (200/625)   [Kremote: Compressing objects:  33% (207/625)   [Kremote: Compressing objects:  34% (213/625)   [Kremote: Compressing objects:  35% (219/625)   [Kremote: Compressing objects:  36% (225/625)   [Kremote: Compressing objects:  37% (232/625)   [Kremote: Compressing objects:  38% (238/625)   [Kremote: Compressing objects:  39% (244/625)   [Kremote: Compressing objects:  40% (250/625)   [Kremote: Compressing objects:  41% (257/625)   [Kremote: Compressing objects:  42% (263/625)   [Kremote: Compressing objects:  43% (269/625)   [Kremote: Compressing objects:  44% (275/625)   [Kremote: Compressing objects:  45% (282/625)   [Kremote: Compressing objects:  46% (288/625)   [Kremote: Compressing objects:  47% (294/625)   [Kremote: Compressing objects:  48% (300/625)   [Kremote: Compressing objects:  49% (307/625)   [Kremote: Compressing objects:  50% (313/625)   [Kremote: Compressing objects:  51% (319/625)   [Kremote: Compressing objects:  52% (325/625)   [Kremote: Compressing objects:  53% (332/625)   [Kremote: Compressing objects:  54% (338/625)   [Kremote: Compressing objects:  55% (344/625)   [Kremote: Compressing objects:  56% (350/625)   [Kremote: Compressing objects:  57% (357/625)   [Kremote: Compressing objects:  58% (363/625)   [Kremote: Compressing objects:  59% (369/625)   [Kremote: Compressing objects:  60% (375/625)   [Kremote: Compressing objects:  61% (382/625)   [Kremote: Compressing objects:  62% (388/625)   [Kremote: Compressing objects:  63% (394/625)   [Kremote: Compressing objects:  64% (400/625)   [Kremote: Compressing objects:  65% (407/625)   [Kremote: Compressing objects:  66% (413/625)   [Kremote: Compressing objects:  67% (419/625)   [Kremote: Compressing objects:  68% (425/625)   [Kremote: Compressing objects:  69% (432/625)   [Kremote: Compressing objects:  70% (438/625)   [Kremote: Compressing objects:  71% (444/625)   [Kremote: Compressing objects:  72% (450/625)   [Kremote: Compressing objects:  73% (457/625)   [Kremote: Compressing objects:  74% (463/625)   [Kremote: Compressing objects:  75% (469/625)   [Kremote: Compressing objects:  76% (475/625)   [Kremote: Compressing objects:  77% (482/625)   [Kremote: Compressing objects:  78% (488/625)   [Kremote: Compressing objects:  79% (494/625)   [Kremote: Compressing objects:  80% (500/625)   [Kremote: Compressing objects:  81% (507/625)   [Kremote: Compressing objects:  82% (513/625)   [Kremote: Compressing objects:  83% (519/625)   [Kremote: Compressing objects:  84% (525/625)   [Kremote: Compressing objects:  85% (532/625)   [Kremote: Compressing objects:  86% (538/625)   [Kremote: Compressing objects:  87% (544/625)   [Kremote: Compressing objects:  88% (550/625)   [Kremote: Compressing objects:  89% (557/625)   [Kremote: Compressing objects:  90% (563/625)   [Kremote: Compressing objects:  91% (569/625)   [Kremote: Compressing objects:  92% (575/625)   [Kremote: Compressing objects:  93% (582/625)   [Kremote: Compressing objects:  94% (588/625)   [Kremote: Compressing objects:  95% (594/625)   [Kremote: Compressing objects:  96% (600/625)   [Kremote: Compressing objects:  97% (607/625)   [Kremote: Compressing objects:  98% (613/625)   [Kremote: Compressing objects:  99% (619/625)   [Kremote: Compressing objects: 100% (625/625)   [Kremote: Compressing objects: 100% (625/625), done.[K
Receiving objects:   0% (1/1437)   Receiving objects:   1% (15/1437)   Receiving objects:   2% (29/1437)   Receiving objects:   3% (44/1437)   Receiving objects:   4% (58/1437)   Receiving objects:   5% (72/1437)   Receiving objects:   6% (87/1437)   Receiving objects:   7% (101/1437)   Receiving objects:   8% (115/1437)   Receiving objects:   9% (130/1437)   Receiving objects:  10% (144/1437)   Receiving objects:  11% (159/1437)   Receiving objects:  12% (173/1437)   Receiving objects:  13% (187/1437)   Receiving objects:  14% (202/1437)   Receiving objects:  15% (216/1437)   Receiving objects:  16% (230/1437)   Receiving objects:  17% (245/1437)   Receiving objects:  18% (259/1437)   Receiving objects:  19% (274/1437)   Receiving objects:  20% (288/1437)   Receiving objects:  21% (302/1437)   Receiving objects:  22% (317/1437)   Receiving objects:  23% (331/1437)   Receiving objects:  24% (345/1437)   Receiving objects:  25% (360/1437)   Receiving objects:  26% (374/1437)   Receiving objects:  27% (388/1437)   Receiving objects:  28% (403/1437)   Receiving objects:  29% (417/1437)   Receiving objects:  30% (432/1437)   Receiving objects:  31% (446/1437)   Receiving objects:  32% (460/1437)   Receiving objects:  33% (475/1437)   Receiving objects:  34% (489/1437)   Receiving objects:  35% (503/1437)   Receiving objects:  36% (518/1437)   Receiving objects:  37% (532/1437)   Receiving objects:  38% (547/1437)   Receiving objects:  39% (561/1437)   Receiving objects:  40% (575/1437)   Receiving objects:  41% (590/1437)   Receiving objects:  42% (604/1437)   Receiving objects:  43% (618/1437)   Receiving objects:  44% (633/1437)   Receiving objects:  45% (647/1437)   Receiving objects:  46% (662/1437)   Receiving objects:  47% (676/1437)   Receiving objects:  48% (690/1437)   Receiving objects:  49% (705/1437)   Receiving objects:  50% (719/1437)   Receiving objects:  51% (733/1437)   Receiving objects:  52% (748/1437)   Receiving objects:  53% (762/1437)   Receiving objects:  54% (776/1437)   Receiving objects:  55% (791/1437)   Receiving objects:  56% (805/1437)   Receiving objects:  57% (820/1437)   Receiving objects:  58% (834/1437)   Receiving objects:  59% (848/1437)   Receiving objects:  60% (863/1437)   Receiving objects:  61% (877/1437)   Receiving objects:  62% (891/1437)   Receiving objects:  63% (906/1437)   Receiving objects:  64% (920/1437)   Receiving objects:  65% (935/1437)   Receiving objects:  66% (949/1437)   Receiving objects:  67% (963/1437)   Receiving objects:  68% (978/1437)   Receiving objects:  69% (992/1437)   Receiving objects:  70% (1006/1437)   Receiving objects:  71% (1021/1437)   Receiving objects:  72% (1035/1437)   Receiving objects:  73% (1050/1437)   Receiving objects:  74% (1064/1437)   Receiving objects:  75% (1078/1437)   Receiving objects:  76% (1093/1437)   Receiving objects:  77% (1107/1437)   Receiving objects:  78% (1121/1437)   Receiving objects:  79% (1136/1437)   Receiving objects:  80% (1150/1437)   Receiving objects:  81% (1164/1437)   Receiving objects:  82% (1179/1437)   Receiving objects:  83% (1193/1437)   Receiving objects:  84% (1208/1437)   Receiving objects:  85% (1222/1437)   Receiving objects:  86% (1236/1437)   Receiving objects:  87% (1251/1437)   Receiving objects:  88% (1265/1437)   Receiving objects:  89% (1279/1437)   Receiving objects:  90% (1294/1437)   Receiving objects:  91% (1308/1437)   Receiving objects:  92% (1323/1437)   Receiving objects:  93% (1337/1437)   Receiving objects:  94% (1351/1437)   remote: Total 1437 (delta 854), reused 1377 (delta 797), pack-reused 0[K
Receiving objects:  95% (1366/1437)   Receiving objects:  96% (1380/1437)   Receiving objects:  97% (1394/1437)   Receiving objects:  98% (1409/1437)   Receiving objects:  99% (1423/1437)   Receiving objects: 100% (1437/1437)   Receiving objects: 100% (1437/1437), 351.51 KiB | 4.39 MiB/s, done.
Resolving deltas:   0% (0/854)   Resolving deltas:   1% (16/854)   Resolving deltas:   2% (20/854)   Resolving deltas:   5% (48/854)   Resolving deltas:   6% (56/854)   Resolving deltas:   7% (60/854)   Resolving deltas:   8% (70/854)   Resolving deltas:   9% (77/854)   Resolving deltas:  12% (106/854)   Resolving deltas:  14% (128/854)   Resolving deltas:  16% (138/854)   Resolving deltas:  17% (149/854)   Resolving deltas:  18% (155/854)   Resolving deltas:  19% (169/854)   Resolving deltas:  20% (171/854)   Resolving deltas:  21% (182/854)   Resolving deltas:  24% (212/854)   Resolving deltas:  25% (220/854)   Resolving deltas:  27% (231/854)   Resolving deltas:  30% (258/854)   Resolving deltas:  31% (265/854)   Resolving deltas:  33% (287/854)   Resolving deltas:  34% (294/854)   Resolving deltas:  35% (307/854)   Resolving deltas:  36% (308/854)   Resolving deltas:  37% (323/854)   Resolving deltas:  39% (337/854)   Resolving deltas:  40% (350/854)   Resolving deltas:  41% (358/854)   Resolving deltas:  42% (366/854)   Resolving deltas:  43% (369/854)   Resolving deltas:  47% (406/854)   Resolving deltas:  48% (413/854)   Resolving deltas:  49% (421/854)   Resolving deltas:  50% (429/854)   Resolving deltas:  64% (552/854)   Resolving deltas:  65% (557/854)   Resolving deltas:  66% (565/854)   Resolving deltas:  67% (576/854)   Resolving deltas:  68% (584/854)   Resolving deltas:  69% (595/854)   Resolving deltas:  70% (604/854)   Resolving deltas:  71% (608/854)   Resolving deltas:  72% (616/854)   Resolving deltas:  75% (645/854)   Resolving deltas:  76% (652/854)   Resolving deltas:  78% (671/854)   Resolving deltas:  83% (711/854)   Resolving deltas:  84% (723/854)   Resolving deltas:  85% (732/854)   Resolving deltas:  86% (735/854)   Resolving deltas:  90% (775/854)   Resolving deltas:  91% (778/854)   Resolving deltas:  92% (786/854)   Resolving deltas:  93% (801/854)   Resolving deltas:  94% (803/854)   Resolving deltas:  95% (814/854)   Resolving deltas:  96% (821/854)   Resolving deltas:  97% (829/854)   Resolving deltas:  98% (840/854)   Resolving deltas:  99% (847/854)   Resolving deltas: 100% (854/854)   Resolving deltas: 100% (854/854), done.
travis_time:end:028dc55a:start=1564428408469657031,finish=1564428409247782955,duration=778125924[0K$ cd jwilder/nginx-proxy
travis_time:start:0cf8837a[0K$ git fetch origin +refs/pull/1308/merge:
remote: Enumerating objects: 62, done.[K
remote: Counting objects:   1% (1/58)   [Kremote: Counting objects:   3% (2/58)   [Kremote: Counting objects:   5% (3/58)   [Kremote: Counting objects:   6% (4/58)   [Kremote: Counting objects:   8% (5/58)   [Kremote: Counting objects:  10% (6/58)   [Kremote: Counting objects:  12% (7/58)   [Kremote: Counting objects:  13% (8/58)   [Kremote: Counting objects:  15% (9/58)   [Kremote: Counting objects:  17% (10/58)   [Kremote: Counting objects:  18% (11/58)   [Kremote: Counting objects:  20% (12/58)   [Kremote: Counting objects:  22% (13/58)   [Kremote: Counting objects:  24% (14/58)   [Kremote: Counting objects:  25% (15/58)   [Kremote: Counting objects:  27% (16/58)   [Kremote: Counting objects:  29% (17/58)   [Kremote: Counting objects:  31% (18/58)   [Kremote: Counting objects:  32% (19/58)   [Kremote: Counting objects:  34% (20/58)   [Kremote: Counting objects:  36% (21/58)   [Kremote: Counting objects:  37% (22/58)   [Kremote: Counting objects:  39% (23/58)   [Kremote: Counting objects:  41% (24/58)   [Kremote: Counting objects:  43% (25/58)   [Kremote: Counting objects:  44% (26/58)   [Kremote: Counting objects:  46% (27/58)   [Kremote: Counting objects:  48% (28/58)   [Kremote: Counting objects:  50% (29/58)   [Kremote: Counting objects:  51% (30/58)   [Kremote: Counting objects:  53% (31/58)   [Kremote: Counting objects:  55% (32/58)   [Kremote: Counting objects:  56% (33/58)   [Kremote: Counting objects:  58% (34/58)   [Kremote: Counting objects:  60% (35/58)   [Kremote: Counting objects:  62% (36/58)   [Kremote: Counting objects:  63% (37/58)   [Kremote: Counting objects:  65% (38/58)   [Kremote: Counting objects:  67% (39/58)   [Kremote: Counting objects:  68% (40/58)   [Kremote: Counting objects:  70% (41/58)   [Kremote: Counting objects:  72% (42/58)   [Kremote: Counting objects:  74% (43/58)   [Kremote: Counting objects:  75% (44/58)   [Kremote: Counting objects:  77% (45/58)   [Kremote: Counting objects:  79% (46/58)   [Kremote: Counting objects:  81% (47/58)   [Kremote: Counting objects:  82% (48/58)   [Kremote: Counting objects:  84% (49/58)   [Kremote: Counting objects:  86% (50/58)   [Kremote: Counting objects:  87% (51/58)   [Kremote: Counting objects:  89% (52/58)   [Kremote: Counting objects:  91% (53/58)   [Kremote: Counting objects:  93% (54/58)   [Kremote: Counting objects:  94% (55/58)   [Kremote: Counting objects:  96% (56/58)   [Kremote: Counting objects:  98% (57/58)   [Kremote: Counting objects: 100% (58/58)   [Kremote: Counting objects: 100% (58/58), done.[K
remote: Compressing objects:   7% (1/13)   [Kremote: Compressing objects:  15% (2/13)   [Kremote: Compressing objects:  23% (3/13)   [Kremote: Compressing objects:  30% (4/13)   [Kremote: Compressing objects:  38% (5/13)   [Kremote: Compressing objects:  46% (6/13)   [Kremote: Compressing objects:  53% (7/13)   [Kremote: Compressing objects:  61% (8/13)   [Kremote: Compressing objects:  69% (9/13)   [Kremote: Compressing objects:  76% (10/13)   [Kremote: Compressing objects:  84% (11/13)   [Kremote: Compressing objects:  92% (12/13)   [Kremote: Compressing objects: 100% (13/13)   [Kremote: Compressing objects: 100% (13/13), done.[K
remote: Total 25 (delta 15), reused 20 (delta 11), pack-reused 0[K
Unpacking objects:   4% (1/25)   Unpacking objects:   8% (2/25)   Unpacking objects:  12% (3/25)   Unpacking objects:  16% (4/25)   Unpacking objects:  20% (5/25)   Unpacking objects:  24% (6/25)   Unpacking objects:  28% (7/25)   Unpacking objects:  32% (8/25)   Unpacking objects:  36% (9/25)   Unpacking objects:  40% (10/25)   Unpacking objects:  44% (11/25)   Unpacking objects:  48% (12/25)   Unpacking objects:  52% (13/25)   Unpacking objects:  56% (14/25)   Unpacking objects:  60% (15/25)   Unpacking objects:  64% (16/25)   Unpacking objects:  68% (17/25)   Unpacking objects:  72% (18/25)   Unpacking objects:  76% (19/25)   Unpacking objects:  80% (20/25)   Unpacking objects:  84% (21/25)   Unpacking objects:  88% (22/25)   Unpacking objects:  92% (23/25)   Unpacking objects:  96% (24/25)   Unpacking objects: 100% (25/25)   Unpacking objects: 100% (25/25), done.
From https://github.com/jwilder/nginx-proxy
 * branch            refs/pull/1308/merge -> FETCH_HEAD
travis_time:end:0cf8837a:start=1564428409260718651,finish=1564428409737201234,duration=476482583[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K

[33;1mSetting environment variables from .travis.yml[0m
$ export TEST_TARGET=test-debian

travis_fold:start:rvm[0Ktravis_time:start:08dd61d0[0K$ rvm use default
[32mUsing /home/travis/.rvm/gems/ruby-2.4.1[0m

[32;1m** Updating RubyGems to the latest compatible version for security reasons. **[0m
[32;1m** If you need an older version, you can downgrade with 'gem update --system OLD_VERSION'. **[0m

travis_time:end:08dd61d0:start=1564428409756767842,finish=1564428413912151456,duration=4155383614[0Ktravis_fold:end:rvm[0K
travis_fold:start:ruby.versions[0K$ ruby --version
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
$ rvm --version
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
$ bundle --version
Bundler version 1.17.3
$ gem --version
3.0.4
travis_fold:end:ruby.versions[0K
travis_fold:start:before_install.1[0Ktravis_time:start:17599b61[0K$ sudo apt-get -y remove docker docker-engine docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
Package 'docker-engine' is not installed, so not removed
Package 'docker' is not installed, so not removed
The following packages were automatically installed and are no longer required:
  aufs-tools cgroup-lite libsystemd-journal0
Use 'sudo apt autoremove' to remove them.
The following packages will be REMOVED:
  docker-ce
0 upgraded, 0 newly installed, 1 to remove and 303 not upgraded.
After this operation, 99.3 MB disk space will be freed.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93695 files and directories currently installed.)
Removing docker-ce (17.09.0~ce-0~ubuntu) ...
docker stop/waiting
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
travis_time:end:17599b61:start=1564428414353673864,finish=1564428417005083397,duration=2651409533[0Ktravis_fold:end:before_install.1[0Ktravis_fold:start:before_install.2[0Ktravis_time:start:0c16b34b[0K$ sudo rm /etc/apt/sources.list.d/docker.list
travis_time:end:0c16b34b:start=1564428417009684157,finish=1564428417017824936,duration=8140779[0Ktravis_fold:end:before_install.2[0Ktravis_fold:start:before_install.3[0Ktravis_time:start:004b754d[0K$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
OK
travis_time:end:004b754d:start=1564428417021666847,finish=1564428417221915841,duration=200248994[0Ktravis_fold:end:before_install.3[0Ktravis_fold:start:before_install.4[0Ktravis_time:start:058ff485[0K$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
travis_time:end:058ff485:start=1564428417226423081,finish=1564428417619633359,duration=393210278[0Ktravis_fold:end:before_install.4[0Ktravis_fold:start:before_install.5[0Ktravis_time:start:005718f6[0K$ sudo apt-get update
0% [Working]0% [Connecting to apt.cache.travis-ci.com (34.96.81.152)] [Waiting for headers]                                                                               Hit:2 http://security.ubuntu.com/ubuntu trusty-security InRelease
0% [Connecting to apt.cache.travis-ci.com (34.96.81.152)] [Waiting for headers]                                                                               Hit:4 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu trusty InRelease
                                                                               Hit:5 http://apt.postgresql.org/pub/repos/apt trusty-pgdg InRelease
0% [Waiting for headers] [Waiting for headers] [Waiting for headers] [Waiting f                                                                               Hit:6 http://dl.hhvm.com/ubuntu trusty InRelease
0% [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Hit:3 http://dl.bintray.com/apache/cassandra 39x InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Ign:7 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:8 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 Release
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait0% [Waiting for headers] [Waiting for headers] [Waiting for headers] [Waiting f0% [Waiting for headers] [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Wait                                                                               Ign:1 http://heroku-toolbelt.s3.amazonaws.com/apt ./ InRelease
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers] [Wait0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers] [Wait0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Hit:9 http://heroku-toolbelt.s3.amazonaws.com/apt ./ Release
0% [4 InRelease gpgv 15.4 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               0% [Waiting for headers] [Waiting for headers] [Waiting for headers]0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Ign:10 http://archive.ubuntu.com/ubuntu trusty InRelease
                                                                               0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers]                                                                         Ign:11 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers]                                                                         Hit:12 http://archive.ubuntu.com/ubuntu trusty-updates InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers]                                                                         Hit:13 https://download.docker.com/linux/ubuntu trusty InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Hit:14 http://archive.ubuntu.com/ubuntu trusty-backports InRelease
                                                                               0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers]                                                                         Hit:15 http://ppa.launchpad.net/git-core/ppa/ubuntu trusty InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Hit:16 http://archive.ubuntu.com/ubuntu trusty Release
                                                                               0% [5 InRelease gpgv 56.5 kB] [Waiting for headers] [Waiting for headers]                                                                         Hit:17 http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty InRelease
                                                                         0% [5 InRelease gpgv 56.5 kB] [Waiting for headers]                                                   Hit:18 http://ppa.launchpad.net/pollinate/ppa/ubuntu trusty InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers]                                                   Hit:19 http://ppa.launchpad.net/webupd8team/java/ubuntu trusty InRelease
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers]                                                   Hit:20 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty Release
0% [5 InRelease gpgv 56.5 kB] [Waiting for headers]                                                   0% [Waiting for headers]0% [6 InRelease gpgv 3,106 B] [Waiting for headers]                                                   Ign:21 http://dl.google.com/linux/chrome/deb stable InRelease
                                                   0% [6 InRelease gpgv 3,106 B]                             Hit:22 http://dl.google.com/linux/chrome/deb stable Release
0% [6 InRelease gpgv 3,106 B]                             0% [Working]0% [3 InRelease gpgv 3,168 B]                             0% [Working]0% [Release.gpg gpgv 2,495 B]                             0% [Working]0% [Release.gpg gpgv 1,609 B]                             0% [Working]0% [12 InRelease gpgv 65.9 kB]                              0% [Working]0% [13 InRelease gpgv 37.1 kB]                              0% [Working]0% [14 InRelease gpgv 65.9 kB]                              0% [Working]0% [15 InRelease gpgv 20.8 kB]                              0% [Working]0% [Release.gpg gpgv 58.5 kB]                             Hit:25 https://packagecloud.io/computology/apt-backport/ubuntu trusty InRelease
0% [Release.gpg gpgv 58.5 kB]                             0% [Working]0% [17 InRelease gpgv 15.4 kB]                              0% [Working]0% [18 InRelease gpgv 15.4 kB]                              0% [Working]0% [19 InRelease gpgv 15.5 kB]                              0% [Working]0% [Release.gpg gpgv 15.1 kB]                             0% [Working]0% [Release.gpg gpgv 943 B]                           0% [Working]0% [25 InRelease gpgv 23.5 kB]                              Get:29 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease [23.2 kB]
0% [25 InRelease gpgv 23.5 kB] [29 InRelease 8,604 B/23.2 kB 37%]                                                                 0% [29 InRelease 8,604 B/23.2 kB 37%]                                     0% [Working]0% [29 InRelease gpgv 23.2 kB]                              Ign:29 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease
                              0% [Working]            Hit:30 https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu trusty InRelease
0% [Working]0% [30 InRelease gpgv 23.7 kB]                              20% [Working]             Fetched 23.2 kB in 1s (18.1 kB/s)
Reading package lists... 0%Reading package lists... 0%Reading package lists... 1%Reading package lists... 5%Reading package lists... 5%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 34%Reading package lists... 34%Reading package lists... 43%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 57%Reading package lists... 57%Reading package lists... 63%Reading package lists... 63%Reading package lists... 68%Reading package lists... 68%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 77%Reading package lists... 77%Reading package lists... 79%Reading package lists... 79%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 85%Reading package lists... 85%Reading package lists... 88%Reading package lists... 88%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 95%Reading package lists... 95%Reading package lists... 96%Reading package lists... 96%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 98%Reading package lists... 98%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... Done
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
W: GPG error: https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 6B05F25D762E3157
W: The repository 'https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease' is not signed.
N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.
N: See apt-secure(8) manpage for repository creation and user configuration details.
W: There is no public key available for the following key IDs:
6B05F25D762E3157  
travis_time:end:005718f6:start=1564428417624126090,finish=1564428420588564205,duration=2964438115[0Ktravis_fold:end:before_install.5[0Ktravis_fold:start:before_install.6[0Ktravis_time:start:15f95e24[0K$ sudo apt-get -y install docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
The following additional packages will be installed:
  pigz
The following NEW packages will be installed:
  docker-ce pigz
0 upgraded, 2 newly installed, 0 to remove and 303 not upgraded.
Need to get 39.8 MB of archives.
After this operation, 201 MB of additional disk space will be used.
0% [Working]            Get:1 http://archive.ubuntu.com/ubuntu trusty/universe amd64 pigz amd64 2.3-2 [59.4 kB]
0% [1 pigz 13.4 kB/59.4 kB 23%]                               10% [Working]             Get:2 https://download.docker.com/linux/ubuntu trusty/stable amd64 docker-ce amd64 18.06.3~ce~3-0~ubuntu [39.7 MB]
10% [2 docker-ce 0 B/39.7 MB 0%]41% [2 docker-ce 15.3 MB/39.7 MB 39%]74% [2 docker-ce 31.9 MB/39.7 MB 80%]                                     100% [Working]              Fetched 39.8 MB in 1s (28.6 MB/s)
Selecting previously unselected package pigz.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93493 files and directories currently installed.)
Preparing to unpack .../archives/pigz_2.3-2_amd64.deb ...
Unpacking pigz (2.3-2) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../docker-ce_18.06.3~ce~3-0~ubuntu_amd64.deb ...
Unpacking docker-ce (18.06.3~ce~3-0~ubuntu) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
Setting up pigz (2.3-2) ...
Setting up docker-ce (18.06.3~ce~3-0~ubuntu) ...
Installing new version of config file /etc/bash_completion.d/docker ...
docker start/running, process 7579
travis_time:end:15f95e24:start=1564428420593164338,finish=1564428429740929491,duration=9147765153[0Ktravis_fold:end:before_install.6[0Ktravis_fold:start:before_install.7[0Ktravis_time:start:2653e294[0K$ docker version
Client:
 Version:           18.06.3-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        d7080c1
 Built:             Wed Feb 20 02:27:13 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.3-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       d7080c1
  Built:            Wed Feb 20 02:25:38 2019
  OS/Arch:          linux/amd64
  Experimental:     false
travis_time:end:2653e294:start=1564428429745503121,finish=1564428429819320401,duration=73817280[0Ktravis_fold:end:before_install.7[0Ktravis_fold:start:before_install.8[0Ktravis_time:start:031aa00b[0K$ docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.3-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e
runc version: a592beb5bc4c4092b1b1bac971afed27687340c5
init version: fec3683
Kernel Version: 4.4.0-101-generic
Operating System: Ubuntu 14.04.5 LTS
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 7.305GiB
Name: travis-job-6c68fd61-61bc-45c9-8a1e-c9555b9b90dd
ID: DH3M:23FP:35CF:LCVT:ROBH:CV5W:C5W2:JSP4:7G7W:NH4L:6FOS:WJOW
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false

travis_time:end:031aa00b:start=1564428429823814439,finish=1564428429902715075,duration=78900636[0Ktravis_fold:end:before_install.8[0Ktravis_fold:start:before_install.9[0Ktravis_time:start:10cc2b0c[0K$ make update-dependencies
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
3: Pulling from library/python

[1A[1K[K5ae19949497e: Pulling fs layer [1B
[1A[1K[Ked3d96a2798e: Pulling fs layer [1B
[1A[1K[Kf12136850781: Pulling fs layer [1B
[1A[1K[K1a9ad5d5550b: Pulling fs layer [1B
[1A[1K[K6f18049a0455: Pulling fs layer [1B
[1A[1K[Kce39fa9d79d1: Pulling fs layer [1B
[1A[1K[K3a91ffcf88ea: Pulling fs layer [1B
[1A[1K[Kee82cc8e1506: Pulling fs layer [1B
[1A[1K[Kbf0dbf90a115: Pulling fs layer [1B[6A[1K[K1a9ad5d5550b: Waiting [6B[5A[1K[K6f18049a0455: Waiting [5B[4A[1K[Kce39fa9d79d1: Waiting [4B[3A[1K[K3a91ffcf88ea: Waiting [3B[2A[1K[Kee82cc8e1506: Waiting [2B[1A[1K[Kbf0dbf90a115: Waiting [1B[7A[1K[Kf12136850781: Downloading  101.6kB/9.978MB[7B[8A[1K[Ked3d96a2798e: Downloading  81.57kB/7.804MB[8B[9A[1K[K5ae19949497e: Downloading  514.7kB/50.38MB[9B[7A[1K[Kf12136850781: Downloading  7.814MB/9.978MB[7B[7A[1K[Kf12136850781: Downloading  9.978MB/9.978MB[7B[7A[1K[Kf12136850781: Verifying Checksum [7B[7A[1K[Kf12136850781: Download complete [7B[8A[1K[Ked3d96a2798e: Downloading  7.056MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Verifying Checksum [8B[8A[1K[Ked3d96a2798e: Download complete [8B[9A[1K[K5ae19949497e: Downloading  1.547MB/50.38MB[9B[9A[1K[K5ae19949497e: Downloading  14.31MB/50.38MB[9B[9A[1K[K5ae19949497e: Downloading  26.53MB/50.38MB[9B[6A[1K[K1a9ad5d5550b: Downloading  523.4kB/51.77MB[6B[9A[1K[K5ae19949497e: Downloading  39.28MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  539.9kB/192.3MB[5B[9A[1K[K5ae19949497e: Downloading  49.97MB/50.38MB[9B[9A[1K[K5ae19949497e: Verifying Checksum [9B[9A[1K[K5ae19949497e: Download complete [9B[6A[1K[K1a9ad5d5550b: Downloading   9.44MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  5.373MB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  18.35MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  16.13MB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  26.76MB/51.77MB[6B[9A[1K[K5ae19949497e: Extracting  524.3kB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  24.17MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  1.573MB/50.38MB[9B[6A[1K[K1a9ad5d5550b: Downloading  37.78MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  27.38MB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  46.19MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Verifying Checksum [6B[6A[1K[K1a9ad5d5550b: Download complete [6B[9A[1K[K5ae19949497e: Extracting  2.097MB/50.38MB[9B[4A[1K[Kce39fa9d79d1: Downloading  59.38kB/5.792MB[4B[5A[1K[K6f18049a0455: Downloading  36.47MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  3.146MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  45.03MB/192.3MB[5B[4A[1K[Kce39fa9d79d1: Downloading   1.49MB/5.792MB[4B[9A[1K[K5ae19949497e: Extracting  6.291MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  52.53MB/192.3MB[5B[4A[1K[Kce39fa9d79d1: Downloading  4.222MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Downloading  5.792MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Verifying Checksum [4B[4A[1K[Kce39fa9d79d1: Download complete [4B[9A[1K[K5ae19949497e: Extracting  7.864MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  59.99MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Downloading  277.6kB/26.57MB[3B[5A[1K[K6f18049a0455: Downloading  68.01MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  9.437MB/50.38MB[9B[3A[1K[K3a91ffcf88ea: Downloading  8.772MB/26.57MB[3B[5A[1K[K6f18049a0455: Downloading  77.65MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Downloading   19.5MB/26.57MB[3B[9A[1K[K5ae19949497e: Extracting  9.961MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  86.22MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Verifying Checksum [3B[3A[1K[K3a91ffcf88ea: Download complete [3B[9A[1K[K5ae19949497e: Extracting  10.49MB/50.38MB[9B[2A[1K[Kee82cc8e1506: Downloading     235B/235B[2B[2A[1K[Kee82cc8e1506: Verifying Checksum [2B[2A[1K[Kee82cc8e1506: Download complete [2B[5A[1K[K6f18049a0455: Downloading  94.78MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  13.11MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  99.06MB/192.3MB[5B[5A[1K[K6f18049a0455: Downloading  109.8MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  14.68MB/50.38MB[9B[1A[1K[Kbf0dbf90a115: Downloading  18.28kB/1.821MB[1B[9A[1K[K5ae19949497e: Extracting  16.78MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  118.4MB/192.3MB[5B[1A[1K[Kbf0dbf90a115: Verifying Checksum [1B[1A[1K[Kbf0dbf90a115: Download complete [1B[9A[1K[K5ae19949497e: Extracting  18.87MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  126.4MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  22.02MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  135.5MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  24.64MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  143.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Downloading  154.7MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  26.21MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  165.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Downloading    174MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  29.36MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  33.55MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  186.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Verifying Checksum [5B[5A[1K[K6f18049a0455: Download complete [5B[9A[1K[K5ae19949497e: Extracting  37.22MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  39.85MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  42.47MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  44.56MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  45.09MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  47.71MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  49.28MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  49.81MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  50.38MB/50.38MB[9B[9A[1K[K5ae19949497e: Pull complete [9B[8A[1K[Ked3d96a2798e: Extracting   98.3kB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  1.868MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  5.898MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  7.804MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Pull complete [8B[7A[1K[Kf12136850781: Extracting  131.1kB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  2.621MB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  9.044MB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  9.978MB/9.978MB[7B[7A[1K[Kf12136850781: Pull complete [7B[6A[1K[K1a9ad5d5550b: Extracting  524.3kB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  4.719MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  9.437MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  14.16MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  18.35MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting   19.4MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting   21.5MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  23.59MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  25.17MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  26.74MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  29.36MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  31.98MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  33.55MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  36.18MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  38.27MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  42.47MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  45.61MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  47.71MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  49.28MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  50.86MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  51.38MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  51.77MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Pull complete [6B[5A[1K[K6f18049a0455: Extracting  557.1kB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  4.456MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  8.356MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  10.58MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting   11.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  12.81MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  13.93MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting   15.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  16.71MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  17.83MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  22.28MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  26.74MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  30.08MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  35.09MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  40.11MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  42.34MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  46.24MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  49.58MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  54.59MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  58.49MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  61.28MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  62.95MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  64.62MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  66.85MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  70.19MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  73.53MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  77.43MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  80.77MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  84.12MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  87.46MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting   90.8MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  94.14MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  99.16MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  103.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  108.1MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  112.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  116.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  119.8MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  123.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    127MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  130.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  133.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  137.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  139.8MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  142.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  147.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  152.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  160.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  167.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  173.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  176.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  179.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  182.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  184.9MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  187.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    190MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  190.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  191.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  192.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  192.3MB/192.3MB[5B[5A[1K[K6f18049a0455: Pull complete [5B[4A[1K[Kce39fa9d79d1: Extracting  65.54kB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting  917.5kB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting  4.653MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting  5.792MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Pull complete [4B[3A[1K[K3a91ffcf88ea: Extracting  294.9kB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  4.129MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  6.488MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  9.142MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting   11.5MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  14.16MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting   17.1MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  20.05MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting   23.3MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  25.95MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  26.57MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Pull complete [3B[2A[1K[Kee82cc8e1506: Extracting     235B/235B[2B[2A[1K[Kee82cc8e1506: Extracting     235B/235B[2B[2A[1K[Kee82cc8e1506: Pull complete [2B[1A[1K[Kbf0dbf90a115: Extracting  32.77kB/1.821MB[1B[1A[1K[Kbf0dbf90a115: Extracting  1.016MB/1.821MB[1B[1A[1K[Kbf0dbf90a115: Extracting  1.821MB/1.821MB[1B[1A[1K[Kbf0dbf90a115: Pull complete [1BDigest: sha256:d8718f4c8f28360c88d2d8b53681edb3c95e6a7bacedabd32eb5b1d120a75dc5
Status: Downloaded newer image for python:3
 ---> 42d620af35be
Step 2/5 : COPY ./webserver.py /
 ---> 6827dae0ca0b
Step 3/5 : COPY ./entrypoint.sh /
 ---> 1c138798ca34
Step 4/5 : WORKDIR /opt
 ---> Running in 48312b732a4f
Removing intermediate container 48312b732a4f
 ---> ea74aaf8ae84
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Running in 8ee0d5ef801e
Removing intermediate container 8ee0d5ef801e
 ---> 8f98df654e1b
Successfully built 8f98df654e1b
Successfully tagged web:latest
travis_time:end:10cc2b0c:start=1564428429907260119,finish=1564428450215910824,duration=20308650705[0Ktravis_fold:end:before_install.9[0KNo Gemfile found, skipping bundle install

travis_time:start:32b25748[0K$ make $TEST_TARGET
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
 ---> 42d620af35be
Step 2/5 : COPY ./webserver.py /
 ---> Using cache
 ---> 6827dae0ca0b
Step 3/5 : COPY ./entrypoint.sh /
 ---> Using cache
 ---> 1c138798ca34
Step 4/5 : WORKDIR /opt
 ---> Using cache
 ---> ea74aaf8ae84
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Using cache
 ---> 8f98df654e1b
Successfully built 8f98df654e1b
Successfully tagged web:latest
Sending build context to Docker daemon  39.42kB
Step 1/17 : FROM nginx:1.14.1
1.14.1: Pulling from library/nginx

[1A[1K[Ka5a6f2f73cd8: Pulling fs layer [1B
[1A[1K[K2343eb083a4e: Pulling fs layer [1B
[1A[1K[K251439d5b33c: Pulling fs layer [1B[1A[1K[K251439d5b33c: Downloading     204B/204B[1B[1A[1K[K251439d5b33c: Verifying Checksum [1B[1A[1K[K251439d5b33c: Download complete [1B[2A[1K[K2343eb083a4e: Downloading  236.8kB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Downloading  228.7kB/22.49MB[3B[2A[1K[K2343eb083a4e: Downloading  9.891MB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Downloading  5.999MB/22.49MB[3B[2A[1K[K2343eb083a4e: Verifying Checksum [2B[2A[1K[K2343eb083a4e: Download complete [2B[3A[1K[Ka5a6f2f73cd8: Downloading  18.39MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Verifying Checksum [3B[3A[1K[Ka5a6f2f73cd8: Download complete [3B[3A[1K[Ka5a6f2f73cd8: Extracting  229.4kB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  2.523MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  5.964MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  8.946MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  12.39MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  15.14MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  18.81MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  20.41MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  21.56MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.48MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.49MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Pull complete [3B[2A[1K[K2343eb083a4e: Extracting  229.4kB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  4.358MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  8.716MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting   13.3MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  16.97MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  20.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  22.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Pull complete [2B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Pull complete [1BDigest: sha256:32fdf92b4e986e109e4db0865758020cb0c3b70d6ba80d02fe87bad5cc3dc228
Status: Downloaded newer image for nginx:1.14.1
 ---> 5f2d4477b7ea
Step 2/17 : LABEL maintainer="Jason Wilder mail@jasonwilder.com"
 ---> Running in 7c6e1bbf3f4d
Removing intermediate container 7c6e1bbf3f4d
 ---> d49380c7089f
Step 3/17 : RUN apt-get update  && apt-get install -y -q --no-install-recommends     ca-certificates     wget  && apt-get clean  && rm -r /var/lib/apt/lists/*
 ---> Running in 6a56822b47cb
Get:1 http://security-cdn.debian.org/debian-security stretch/updates InRelease [94.3 kB]
Get:3 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 Packages [500 kB]
Ign:2 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:4 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [27.4 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7082 kB]
Fetched 7915 kB in 1s (4201 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0 libnettle6
  libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl
Suggested packages:
  gnutls-bin
Recommended packages:
  publicsuffix
The following NEW packages will be installed:
  ca-certificates libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0
  libnettle6 libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl wget
0 upgraded, 14 newly installed, 0 to remove and 17 not upgraded.
Need to get 3885 kB of archives.
After this operation, 10.6 MB of additional disk space will be used.
Get:1 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 openssl amd64 1.1.0k-1~deb9u1 [747 kB]
Get:2 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgmp10 amd64 2:6.1.2+dfsg-1 [253 kB]
Get:3 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libnettle6 amd64 3.3-1+b2 [192 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libhogweed4 amd64 3.3-1+b2 [136 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn11 amd64 1.33-1 [115 kB]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libffi6 amd64 3.2.1-6 [20.4 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libp11-kit0 amd64 0.23.3-2 [111 kB]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libtasn1-6 amd64 4.10-1.1+deb9u1 [50.6 kB]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgnutls30 amd64 3.5.8-5+deb9u4 [896 kB]
Get:10 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libunistring0 amd64 0.9.6+really0.9.3-0.1 [279 kB]
Get:11 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn2-0 amd64 0.16-1+deb9u1 [60.7 kB]
Get:12 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libpsl5 amd64 0.17.0-3 [41.8 kB]
Get:13 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 wget amd64 1.18-5+deb9u3 [800 kB]
Get:14 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 ca-certificates all 20161130+nmu1+deb9u1 [182 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 3885 kB in 0s (6916 kB/s)
Selecting previously unselected package libgmp10:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 7026 files and directories currently installed.)
Preparing to unpack .../00-libgmp10_2%3a6.1.2+dfsg-1_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Selecting previously unselected package libnettle6:amd64.
Preparing to unpack .../01-libnettle6_3.3-1+b2_amd64.deb ...
Unpacking libnettle6:amd64 (3.3-1+b2) ...
Selecting previously unselected package libhogweed4:amd64.
Preparing to unpack .../02-libhogweed4_3.3-1+b2_amd64.deb ...
Unpacking libhogweed4:amd64 (3.3-1+b2) ...
Selecting previously unselected package libidn11:amd64.
Preparing to unpack .../03-libidn11_1.33-1_amd64.deb ...
Unpacking libidn11:amd64 (1.33-1) ...
Selecting previously unselected package libffi6:amd64.
Preparing to unpack .../04-libffi6_3.2.1-6_amd64.deb ...
Unpacking libffi6:amd64 (3.2.1-6) ...
Selecting previously unselected package libp11-kit0:amd64.
Preparing to unpack .../05-libp11-kit0_0.23.3-2_amd64.deb ...
Unpacking libp11-kit0:amd64 (0.23.3-2) ...
Selecting previously unselected package libtasn1-6:amd64.
Preparing to unpack .../06-libtasn1-6_4.10-1.1+deb9u1_amd64.deb ...
Unpacking libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Selecting previously unselected package libgnutls30:amd64.
Preparing to unpack .../07-libgnutls30_3.5.8-5+deb9u4_amd64.deb ...
Unpacking libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Selecting previously unselected package libunistring0:amd64.
Preparing to unpack .../08-libunistring0_0.9.6+really0.9.3-0.1_amd64.deb ...
Unpacking libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Selecting previously unselected package libidn2-0:amd64.
Preparing to unpack .../09-libidn2-0_0.16-1+deb9u1_amd64.deb ...
Unpacking libidn2-0:amd64 (0.16-1+deb9u1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../10-libpsl5_0.17.0-3_amd64.deb ...
Unpacking libpsl5:amd64 (0.17.0-3) ...
Selecting previously unselected package wget.
Preparing to unpack .../11-wget_1.18-5+deb9u3_amd64.deb ...
Unpacking wget (1.18-5+deb9u3) ...
Selecting previously unselected package openssl.
Preparing to unpack .../12-openssl_1.1.0k-1~deb9u1_amd64.deb ...
Unpacking openssl (1.1.0k-1~deb9u1) ...
Selecting previously unselected package ca-certificates.
Preparing to unpack .../13-ca-certificates_20161130+nmu1+deb9u1_all.deb ...
Unpacking ca-certificates (20161130+nmu1+deb9u1) ...
Setting up libnettle6:amd64 (3.3-1+b2) ...
Setting up libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Setting up libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Setting up libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Setting up openssl (1.1.0k-1~deb9u1) ...
Setting up libffi6:amd64 (3.2.1-6) ...
Setting up ca-certificates (20161130+nmu1+deb9u1) ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the Term::ReadLine module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.24.1 /usr/local/share/perl/5.24.1 /usr/lib/x86_64-linux-gnu/perl5/5.24 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.24 /usr/share/perl/5.24 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm line 7.)
debconf: falling back to frontend: Teletype
Updating certificates in /etc/ssl/certs...
151 added, 0 removed; done.
Setting up libidn11:amd64 (1.33-1) ...
Setting up libidn2-0:amd64 (0.16-1+deb9u1) ...
Setting up libpsl5:amd64 (0.17.0-3) ...
Setting up libhogweed4:amd64 (3.3-1+b2) ...
Setting up libp11-kit0:amd64 (0.23.3-2) ...
Setting up libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Setting up wget (1.18-5+deb9u3) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Processing triggers for ca-certificates (20161130+nmu1+deb9u1) ...
Updating certificates in /etc/ssl/certs...
0 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.
Removing intermediate container 6a56822b47cb
 ---> 9d18c76c8b46
Step 4/17 : RUN echo "daemon off;" >> /etc/nginx/nginx.conf  && sed -i 's/worker_processes  1/worker_processes  auto/' /etc/nginx/nginx.conf
 ---> Running in 92615260714b
Removing intermediate container 92615260714b
 ---> 67b0f4e6572c
Step 5/17 : ADD https://github.com/jwilder/forego/releases/download/v0.16.1/forego /usr/local/bin/forego
[1K[KDownloading    103kB/9.763MB[1K[KDownloading  1.147MB/9.763MB[1K[KDownloading  9.408MB/9.763MB[1K[KDownloading  9.763MB/9.763MB
 ---> 70898b23ce25
Step 6/17 : RUN chmod u+x /usr/local/bin/forego
 ---> Running in 8788ab555642
Removing intermediate container 8788ab555642
 ---> df46655fd08b
Step 7/17 : ENV DOCKER_GEN_VERSION 0.7.4
 ---> Running in 781f9ec26d65
Removing intermediate container 781f9ec26d65
 ---> 2697a51cd4b4
Step 8/17 : RUN wget https://github.com/jwilder/docker-gen/releases/download/$DOCKER_GEN_VERSION/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && tar -C /usr/local/bin -xvzf docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && rm /docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz
 ---> Running in e08d36a21bc0
[91m--2019-07-29 19:27:47--  https://github.com/jwilder/docker-gen/releases/download/0.7.4/docker-gen-linux-amd64-0.7.4.tar.gz
[0m[91mResolving github.com (github.com)... [0m[91m140.82.113.4
Connecting to github.com (github.com)|140.82.113.4|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m302 Found
Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190729T192747Z&X-Amz-Expires=300&X-Amz-Signature=36d872635acb1d4c5019a5074a115508133179c42e35cc1f2d1d25c155eb9b24&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream [following]
[0m[91m--2019-07-29 19:27:47--  https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190729T192747Z&X-Amz-Expires=300&X-Amz-Signature=36d872635acb1d4c5019a5074a115508133179c42e35cc1f2d1d25c155eb9b24&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream
Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... [0m[91m52.216.171.147
Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.171.147|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m200 OK
[0m[91mLength: 3424683 (3.3M) [application/octet-stream]
[0m[91mSaving to: 'docker-gen-linux-amd64-0.7.4.tar.gz'
[0m[91m
     0K ........[0m[91m.. ......[0m[91m.... .......... ...[0m[91m....... .........[0m[91m.  1% 1.61M 2s[0m[91m
    50K .......... ....[0m[91m...... .......... ....[0m[91m...... ..........  2% 1.60M[0m[91m 2s
   100K .......... ........[0m[91m.. .......... .....[0m[91m..... ..........  4% 1.66M 2s
   150K ..........[0m[91m .........[0m[91m. .......... .......... ....[0m[91m......  5% 81.9M 1s
   200K ...[0m[91m....... .......... .......... .......... ..........  7%[0m[91m  104M 1s
   250K ....[0m[91m...... ..........[0m[91m .......... .......... ..........  8% 1.66M 1s
   300K .......... .......... .......... .........[0m[91m. .......... 10%  104M 1s
   350K ......[0m[91m.... .......... .......... ..........[0m[91m .......... 11%  115M 1s
   400K .......[0m[91m... .......... ....[0m[91m...... .......... .......... 13%  125M 1s
   450K ........[0m[91m.. .......... ....[0m[91m...... .......... .[0m[91m......... 14% 81.5M 1s[0m[91m
   500K .........[0m[91m. .......... .......... .......... ...[0m[91m....... 16% 1.77M 1s
   550K .........[0m[91m. .......... .......[0m[91m... .......... .......... 17%  100M 1s
   600K .......... .......... .......... .......... .......... 19%  273M 1s
   650K .......... .......... .......... .......... .......... 20%  311M 1s
   700K .......... .......... .......... .......... .......... 22%  320M 1s
   750K .......... .......... .......... .......... .......... 23%  222M 0s
   800K .......... .......... .......... .......... .......... 25%  284M 0s
   850K .......... .......... .......... ...[0m[91m....... .......... 26%  214M 0s
   900K .......... .......... .......... .......... .......... 28%  239M 0s
   950K .......... .......... .......... .......... .......... 29%  219M 0s
  1000K .......... .......... .......... .......... .......... 31%  265M 0s
  1050K ..[0m[91m........ .......... .......... .......... .......... 32%  253M 0s
  1100K .......... .......... .[0m[91m......... ........[0m[91m.. .......... 34% 1.71M 0s
  1150K .......... .......... .......... .......... .......... 35%  188M 0s
  1200K .......... .......... ...[0m[91m....... .......... .......... 37%  133M 0s
  1250K .......... .......... .......... .......... .......... 38%  204M 0s
  1300K .......... .......... .......... ...[0m[91m....... .[0m[91m......... 40%  207M 0s
  1350K .........[0m[91m. .......... .......... .......... .......... 41%  133M 0s
  1400K .......... .......... .......[0m[91m... .......... .......... 43%  180M 0s
  1450K .......... .......... ........[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 44%[0m[91m 33.6M[0m[91m 0s[0m[91m
  1500K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 46%[0m[91m 19.8M[0m[91m 0s[0m[91m
  1550K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 47%[0m[91m 19.2M[0m[91m 0s[0m[91m
  1600K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.. ..........[0m[91m .....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m...... ........[0m[91m.[0m[91m.[0m[91m 49%[0m[91m 16.3M[0m[91m 0s[0m[91m
  1650K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m. ........[0m[91m.[0m[91m.[0m[91m [0m[91m..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m........[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 50%[0m[91m 25.0M[0m[91m 0s
  1700K ........[0m[91m.[0m[91m. ......[0m[91m.[0m[91m... .....[0m[91m...[0m[91m.[0m[91m. ..[0m[91m........ .[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 52% 33.7M 0s
  1750K ......[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.. ..........[0m[91m .[0m[91m.[0m[91m........ 53% 29.3M 0s[0m[91m
  1800K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m. [0m[91m.......... ......[0m[91m..[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.... ...[0m[91m....... 55% 28.9M 0s
  1850K .......... .......... .......... .[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m. .......... 56% 83.4M 0s
  1900K .......... ..[0m[91m.[0m[91m.[0m[91m...... .......[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.....[0m[91m.[0m[91m.[0m[91m ....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.. 58% 52.3M 0s
  1950K .......... .......... .......... ....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m..[0m[91m.. 59% 55.1M 0s
  2000K .......... .......... ....[0m[91m.[0m[91m..... .......[0m[91m... .......... 61% 58.1M 0s
  2050K .......... ...[0m[91m.[0m[91m.[0m[91m..... .....[0m[91m.[0m[91m.[0m[91m... .......... ......[0m[91m.[0m[91m... 62% 70.9M 0s
  2100K ....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m. ..[0m[91m.[0m[91m.......[0m[91m ..........[0m[91m .......[0m[91m.[0m[91m.[0m[91m. .......... 64% 57.5M 0s
  2150K .......... ..[0m[91m......[0m[91m.[0m[91m.[0m[91m [0m[91m......[0m[91m.[0m[91m.[0m[91m.. ....[0m[91m.[0m[91m.[0m[91m.[0m[91m... ..[0m[91m.[0m[91m.[0m[91m...... 65% 54.4M 0s
  2200K .......... .......... ....[0m[91m.[0m[91m..... ..[0m[91m........ ........[0m[91m.. 67% 7.16M 0s
  2250K .......... ....[0m[91m...... .......... .......... ......[0m[91m.... 68% 15.1M 0s
  2300K .......... .......... .......... .......... .......... 70%  296M 0s
  2350K .......... ........[0m[91m.. .......... .......... .......... 71%  196M 0s
  2400K .......... .......... .......... .......... .......... 73%  242M 0s
  2450K ....[0m[91m...... .......... .......... .......... .......... 74%  198M 0s
  2500K .......... .......... .......... .......... .......... 76%  243M 0s
  2550K ..........[0m[91m .......... .......... .......... .......... 77%  289M 0s
  2600K .......... .......... ....[0m[91m...... ..[0m[91m........ .......... 79%  133M 0s
  2650K .......... .......... .......... .......... .......... 80%  316M 0s
  2700K .......... ..[0m[91m........ .......... .......... .......... 82%  210M 0s
  2750K .......... .......... ......[0m[91m.... .......... .......... 83%  208M 0s
  2800K .......... ........[0m[91m.. ....[0m[91m...... .......... .......... 85%  206M 0s
  2850K .......... .......... .......... ........[0m[91m.. .......... 86%  171M 0s
  2900K .......... .......... .......... .......... ....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 88%[0m[91m  208M 0s
  2950K ..[0m[91m..[0m[91m..[0m[91m..[0m[91m..[0m[91m [0m[91m.[0m[91m......... ......[0m[91m...[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m. .[0m[91m.[0m[91m........ 89% 41.2M 0s
  3000K .......... ......[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m... .......... 91%[0m[91m 29.1M 0s[0m[91m
  3050K[0m[91m [0m[91m......[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m... ..[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m [0m[91m.[0m[91m......... [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m 92%[0m[91m 28.5M[0m[91m 0s[0m[91m
  3100K[0m[91m [0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m.....[0m[91m. ..[0m[91m........ ........[0m[91m.. .......... ....[0m[91m...... 94% 52.1M 0s
  3150K .......... .......... ......[0m[91m.... .......... ..[0m[91m........ 95%  203M 0s
  3200K ........[0m[91m.. .......... .......... .......... .......... 97%  178M 0s
  3250K ......[0m[91m.... ..........[0m[91m .......... ........[0m[91m.. .......... 98%  152M 0s
  3300K .......... ..........[0m[91m .......... .......[0m[91m... ....      100%  166M=0.2s

[0m[91m2019-07-29 19:27:47 (14.5 MB/s) - 'docker-gen-linux-amd64-0.7.4.tar.gz' saved [3424683/3424683]

[0mdocker-gen
Removing intermediate container e08d36a21bc0
 ---> 82332b782dca
Step 9/17 : COPY network_internal.conf /etc/nginx/
 ---> 7ae3a0c82a8b
Step 10/17 : COPY . /app/
 ---> ae2761955835
Step 11/17 : WORKDIR /app/
 ---> Running in d644edd53f22
Removing intermediate container d644edd53f22
 ---> d86ed9371c5b
Step 12/17 : RUN touch /app/htpasswd_generator.sh && chmod +x /app/htpasswd_generator.sh
 ---> Running in 837c0cdb9cfa
Removing intermediate container 837c0cdb9cfa
 ---> ecc49bd8b583
Step 13/17 : ENV DOCKER_HOST unix:///tmp/docker.sock
 ---> Running in 75ce6c5c4aa7
Removing intermediate container 75ce6c5c4aa7
 ---> fd8ebe16b6e3
Step 14/17 : ENV RESOLVERS="127.0.0.11 valid=5s"
 ---> Running in 3314bfa754b6
Removing intermediate container 3314bfa754b6
 ---> 607a0226d9c3
Step 15/17 : VOLUME ["/etc/nginx/certs", "/etc/nginx/dhparam"]
 ---> Running in 990b26fcab65
Removing intermediate container 990b26fcab65
 ---> 5b7f94a72dbb
Step 16/17 : ENTRYPOINT ["/app/docker-entrypoint.sh"]
 ---> Running in 1b08512069fb
Removing intermediate container 1b08512069fb
 ---> 95b1a11259a6
Step 17/17 : CMD ["forego", "start", "-r"]
 ---> Running in e31589a16b41
Removing intermediate container e31589a16b41
 ---> 466cb0ac07b1
Successfully built 466cb0ac07b1
Successfully tagged jwilder/nginx-proxy:test
> Building nginx-proxy-tester image...
Sending build context to Docker daemon  11.26kB
Step 1/6 : FROM python:2.7-alpine
2.7-alpine: Pulling from library/python

[1A[1K[K050382585609: Pulling fs layer [1B
[1A[1K[K39e8b6a82737: Pulling fs layer [1B
[1A[1K[K9c3480ede676: Pulling fs layer [1B
[1A[1K[K7dbf571e3a56: Pulling fs layer [1B[1A[1K[K7dbf571e3a56: Waiting [1B[4A[1K[K050382585609: Downloading  29.23kB/2.79MB[4B[2A[1K[K9c3480ede676: Downloading  184.4kB/18.35MB[2B[3A[1K[K39e8b6a82737: Downloading  3.222kB/301.7kB[3B[4A[1K[K050382585609: Verifying Checksum [4B[4A[1K[K050382585609: Download complete [4B[3A[1K[K39e8b6a82737: Downloading  301.7kB/301.7kB[3B[3A[1K[K39e8b6a82737: Verifying Checksum [3B[3A[1K[K39e8b6a82737: Download complete [3B[4A[1K[K050382585609: Extracting  32.77kB/2.79MB[4B[2A[1K[K9c3480ede676: Downloading  8.289MB/18.35MB[2B[4A[1K[K050382585609: Extracting  622.6kB/2.79MB[4B[2A[1K[K9c3480ede676: Downloading  18.35MB/18.35MB[2B[2A[1K[K9c3480ede676: Verifying Checksum [2B[2A[1K[K9c3480ede676: Download complete [2B[4A[1K[K050382585609: Extracting   2.79MB/2.79MB[4B[4A[1K[K050382585609: Pull complete [4B[3A[1K[K39e8b6a82737: Extracting  32.77kB/301.7kB[3B[3A[1K[K39e8b6a82737: Extracting  301.7kB/301.7kB[3B[1A[1K[K7dbf571e3a56: Downloading  18.43kB/1.818MB[1B[3A[1K[K39e8b6a82737: Extracting  301.7kB/301.7kB[3B[3A[1K[K39e8b6a82737: Pull complete [3B[1A[1K[K7dbf571e3a56: Downloading  1.818MB/1.818MB[1B[1A[1K[K7dbf571e3a56: Verifying Checksum [1B[1A[1K[K7dbf571e3a56: Download complete [1B[2A[1K[K9c3480ede676: Extracting  196.6kB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  1.966MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  5.308MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  9.241MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  12.39MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  15.34MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting   17.5MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  18.28MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  18.35MB/18.35MB[2B[2A[1K[K9c3480ede676: Pull complete [2B[1A[1K[K7dbf571e3a56: Extracting  32.77kB/1.818MB[1B[1A[1K[K7dbf571e3a56: Extracting  1.081MB/1.818MB[1B[1A[1K[K7dbf571e3a56: Extracting  1.818MB/1.818MB[1B[1A[1K[K7dbf571e3a56: Pull complete [1BDigest: sha256:d7c6f1698979667a2cae2fb78a103ee6d391ac83858e50e65483bae8f4510ec2
Status: Downloaded newer image for python:2.7-alpine
 ---> df2b31967ad0
Step 2/6 : RUN apk add --update bash openssl curl && rm -rf /var/cache/apk/*
 ---> Running in 87e9ee7f8554
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/community/x86_64/APKINDEX.tar.gz
(1/5) Installing bash (5.0.0-r0)
Executing bash-5.0.0-r0.post-install
(2/5) Installing nghttp2-libs (1.38.0-r0)
(3/5) Installing libcurl (7.65.1-r0)
(4/5) Installing curl (7.65.1-r0)
(5/5) Installing openssl (1.1.1c-r0)
Executing busybox-1.30.1-r2.trigger
OK: 20 MiB in 38 packages
Removing intermediate container 87e9ee7f8554
 ---> 7f5189a309eb
Step 3/6 : COPY python-requirements.txt /requirements.txt
 ---> f85053578986
Step 4/6 : RUN pip install -r /requirements.txt
 ---> Running in c7494a47665b
[91mDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7.
[0mCollecting backoff==1.3.2 (from -r /requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/7a/ba/5786dfda66ee5e4d1fe09164a1e52c68cdb93205c81b8c0f22b4ccb1a1e7/backoff-1.3.2.tar.gz
Collecting docker-compose==1.11.2 (from -r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/66/d4/2b69141a0b5e685659891c04748bbb414bef67c79a46333d915fbda3731d/docker_compose-1.11.2-py2.py3-none-any.whl (85kB)
Collecting docker==2.1.0 (from -r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/42/67/415e39720bfc3ddcb07eb7007598b0f301246c168d3ac0e8cb5a625a1f9c/docker-2.1.0-py2.py3-none-any.whl (105kB)
Collecting pytest==3.0.5 (from -r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/dd/28/4abc547194d8e6ff93d3ef186cb809a413d719cdc21e524af08fe986f7c2/pytest-3.0.5-py2.py3-none-any.whl (170kB)
Collecting requests==2.11.1 (from -r /requirements.txt (line 5))
  Downloading https://files.pythonhosted.org/packages/ea/03/92d3278bf8287c5caa07dbd9ea139027d5a3592b0f4d14abf072f890fab2/requests-2.11.1-py2.py3-none-any.whl (514kB)
Collecting PyYAML<4,>=3.10 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/9e/a3/1d13970c3f36777c583f136c136f804d70f500168edc1edea6daa7200769/PyYAML-3.13.tar.gz (270kB)
Collecting backports.ssl-match-hostname>=3.5; python_version < "3.5" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/ff/2b/8265224812912bc5b7a607c44bf7b027554e1b9775e9ee0de8032e3de4b2/backports.ssl_match_hostname-3.7.0.1.tar.gz
Collecting dockerpty<0.5,>=0.4.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/8d/ee/e9ecce4c32204a6738e0a5d5883d3413794d7498fe8b06f44becc028d3ba/dockerpty-0.4.1.tar.gz
Collecting six<2,>=1.3.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl
Collecting enum34<2,>=1.0.4; python_version < "3.4" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/db/e56e6b4bbac7c4a06de1c50de6fe1ef3810018ae11732a50f15f62c7d050/enum34-1.1.6-py2-none-any.whl
Collecting colorama<0.4,>=0.3.7 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/db/c8/7dcf9dbcb22429512708fe3a547f8b6101c0d02137acbd892505aee57adf/colorama-0.3.9-py2.py3-none-any.whl
Collecting ipaddress>=1.0.16; python_version < "3.3" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/fc/d0/7fc3a811e011d4b388be48a0e381db8d990042df54aa4ef4599a31d39853/ipaddress-1.0.22-py2.py3-none-any.whl
Collecting websocket-client<1.0,>=0.32.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/29/19/44753eab1fdb50770ac69605527e8859468f3c0fd7dc5a76dd9c4dbd7906/websocket_client-0.56.0-py2.py3-none-any.whl (200kB)
Collecting cached-property<2,>=1.2.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/3b/86/85c1be2e8db9e13ef9a350aecd6dea292bd612fa288c2f40d035bb750ded/cached_property-1.5.1-py2.py3-none-any.whl
Collecting docopt<0.7,>=0.6.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz
Collecting jsonschema<3,>=2.5.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl
Collecting texttable<0.9,>=0.8.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/74/49/23d944a6f7d4dd20846b2df2914fe108c96a253567c140c416edbf270f80/texttable-0.8.8.tar.gz
Collecting docker-pycreds>=0.2.1 (from docker==2.1.0->-r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/f5/e8/f6bd1eee09314e7e6dee49cbe2c5e22314ccdb38db16c9fc72d2fa80d054/docker_pycreds-0.4.0-py2.py3-none-any.whl
Collecting py>=1.4.29 (from pytest==3.0.5->-r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/76/bc/394ad449851729244a97857ee14d7cba61ddb268dce3db538ba2f2ba1f0f/py-1.8.0-py2.py3-none-any.whl (83kB)
Collecting functools32; python_version == "2.7" (from jsonschema<3,>=2.5.1->docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/60/6ac26ad05857c601308d8fb9e87fa36d0ebf889423f47c3502ef034365db/functools32-3.2.3-2.tar.gz
Building wheels for collected packages: backoff, PyYAML, backports.ssl-match-hostname, dockerpty, docopt, texttable, functools32
  Building wheel for backoff (setup.py): started
  Building wheel for backoff (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/fc/d8/34/d2bccc8e1a15f611dbd606c69e5d027b62dfcf922fdf8e396d
  Building wheel for PyYAML (setup.py): started
  Building wheel for PyYAML (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/ad/da/0c/74eb680767247273e2cf2723482cb9c924fe70af57c334513f
  Building wheel for backports.ssl-match-hostname (setup.py): started
  Building wheel for backports.ssl-match-hostname (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/f1/ad/d7/c184cf1ef67b07f98565dc52f91ed4f9a759b7b46674b2fd76
  Building wheel for dockerpty (setup.py): started
  Building wheel for dockerpty (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/e5/1e/86/bd0a97a0907c6c654af654d5875d1d4383dd1f575f77cee4aa
  Building wheel for docopt (setup.py): started
  Building wheel for docopt (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/9b/04/dd/7daf4150b6d9b12949298737de9431a324d4b797ffd63f526e
  Building wheel for texttable (setup.py): started
  Building wheel for texttable (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/e6/50/66/cffbd36db351677a36e03cc8f071e519cbf6a907ef9bad117d
  Building wheel for functools32 (setup.py): started
  Building wheel for functools32 (setup.py): finished with status 'done'
  Stored in directory: /root/.cache/pip/wheels/b5/18/32/77a1030457155606ba5e3ec3a8a57132b1a04b1c4f765177b2
Successfully built backoff PyYAML backports.ssl-match-hostname dockerpty docopt texttable functools32
Installing collected packages: backoff, PyYAML, backports.ssl-match-hostname, six, dockerpty, enum34, websocket-client, requests, ipaddress, docker-pycreds, docker, colorama, cached-property, docopt, functools32, jsonschema, texttable, docker-compose, py, pytest
Successfully installed PyYAML-3.13 backoff-1.3.2 backports.ssl-match-hostname-3.7.0.1 cached-property-1.5.1 colorama-0.3.9 docker-2.1.0 docker-compose-1.11.2 docker-pycreds-0.4.0 dockerpty-0.4.1 docopt-0.6.2 enum34-1.1.6 functools32-3.2.3.post2 ipaddress-1.0.22 jsonschema-2.6.0 py-1.8.0 pytest-3.0.5 requests-2.11.1 six-1.12.0 texttable-0.8.8 websocket-client-0.56.0
[91mWARNING: You are using pip version 19.1.1, however version 19.2.1 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
[0mRemoving intermediate container c7494a47665b
 ---> c39d2709626a
Step 5/6 : WORKDIR /test
 ---> Running in e5ba5be90a83
Removing intermediate container e5ba5be90a83
 ---> a4d59e358f14
Step 6/6 : ENTRYPOINT ["pytest"]
 ---> Running in f33e2cc128ed
Removing intermediate container f33e2cc128ed
 ---> 9e8364dbc111
Successfully built 9e8364dbc111
Successfully tagged nginx-proxy-tester:latest
[1m============================= test session starts ==============================[0m
platform linux2 -- Python 2.7.16, pytest-3.0.5, py-1.8.0, pluggy-0.4.0 -- /usr/local/bin/python
rootdir: /home/travis/build/jwilder/nginx-proxy/test, inifile: pytest.ini
[1mcollecting 0 items[0m[1mcollecting 3 items[0m[1mcollecting 5 items[0m[1mcollecting 6 items[0m[1mcollecting 8 items[0m[1mcollecting 14 items[0m[1mcollecting 17 items[0m[1mcollecting 20 items[0m[1mcollecting 24 items[0m[1mcollecting 40 items[0m[1mcollecting 47 items[0m[1mcollecting 52 items[0m[1mcollecting 56 items[0m[1mcollecting 59 items[0m[1mcollecting 63 items[0m[1mcollecting 66 items[0m[1mcollecting 69 items[0m[1mcollecting 71 items[0m[1mcollecting 73 items[0m[1mcollecting 85 items[0m[1mcollecting 97 items[0m[1mcollecting 98 items[0m[1mcollecting 99 items[0m[1mcollecting 100 items[0m[1mcollecting 103 items[0m[1mcollecting 104 items[0m[1mcollecting 109 items[0m[1mcollecting 112 items[0m[1mcollecting 114 items[0m[1mcollecting 117 items[0m[1mcollecting 123 items[0m[1mcollecting 129 items[0m[1mcollected 129 items 
[0m
test_DOCKER_HOST_unix_socket.py::test_unknown_virtual_host [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web1 [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web2 [31mFAILED[0m
test_composev2.py::test_unknown_virtual_host [31mFAILED[0m
test_composev2.py::test_forwards_to_whoami [31mFAILED[0m
test_default-host.py::test_fallback_on_default [31mFAILED[0m
test_events.py::test_nginx_proxy_behavior_when_alone [32mPASSED[0m
test_events.py::test_new_container_is_detected [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv4 [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv6 [31mFAILED[0m
test_multiple-hosts.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_multiple-hosts.py::test_webA_is_forwarded [31mFAILED[0m
test_multiple-hosts.py::test_webB_is_forwarded [31mFAILED[0m
test_multiple-networks.py::test_unknown_virtual_host [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web1 [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_unknown_virtual_host [31mFAILED[0m
test_nominal.py::test_forwards_to_web1 [31mFAILED[0m
test_nominal.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_ipv6_is_disabled_by_default [32mPASSED[0m
test_wildcard_host.py::test_wildcard_prefix[f00.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[bar.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.f00-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.bar-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[unexpected.nginx-proxy.tld] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] [31mFAILED[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_301 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_delete_cert_and_restart_reverseproxy [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_still_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_now_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_now_broken_since_there_is_no_cert [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_default_nginx_welcome_page_should_not_be_served [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_a_is_forwarded [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_b_gets_an_error [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_reverseproxy_survive_restart [33mxfail[0m
test_custom/test_defaults-location.py::test_custom_default_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_is_overriden_for_web3 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_block_is_present_in_nginx_generated_conf [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_forwards_to_whoami [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_forwards_to_whoami [31mFAILED[0m
test_headers/test_http.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_http.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_http.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_httpoxy_safe [31mFAILED[0m
test_headers/test_https.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_https.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_https.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_httpoxy_safe [31mFAILED[0m
test_multiple-ports/test_VIRTUAL_PORT.py::test_answer_is_served_from_chosen_port [31mFAILED[0m
test_multiple-ports/test_default-80.py::test_answer_is_served_from_port_80_by_default [31mFAILED[0m
test_multiple-ports/test_single-port-not-80.py::test_answer_is_served_from_exposed_port_even_if_not_80 [31mFAILED[0m
test_ssl/test_dhparam.py::test_dhparam_is_not_generated_if_present [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_https_works [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_dhparam_is_used [31mFAILED[0m
test_ssl/test_dhparam_generation.py::test_dhparam_is_generated_if_missing [32mPASSED[0m
test_ssl/test_hsts.py::test_web1_HSTS_default [31mFAILED[0m
test_ssl/test_hsts.py::test_web1_HSTS_error [31mFAILED[0m
test_ssl/test_hsts.py::test_web2_HSTS_off [31mFAILED[0m
test_ssl/test_hsts.py::test_web3_HSTS_custom [31mFAILED[0m
test_ssl/test_hsts.py::test_web4_HSTS_off_noredirect [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_http_is_not_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_https_is_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_HSTS_policy_is_active [31mFAILED[0m
test_ssl/test_nohttps.py::test_http_is_forwarded [31mFAILED[0m
test_ssl/test_nohttps.py::test_https_is_disabled [32mPASSED[0m
test_ssl/test_noredirect.py::test_web3_http_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web3_https_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web2_HSTS_policy_is_inactive [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[bar] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[1-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[2-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[3-False] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[1] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[2] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_web3_https_is_500_and_SSL_validation_fails [31mFAILED[0m

=================================== FAILURES ===================================
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4218650>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4233110>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40eaa50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40ea950>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:04 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Running '/app/htpasswd_generator.sh'
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f41ee450>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4151390>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4151090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40fc210>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:04 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Running '/app/htpasswd_generator.sh'
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40fc6d0>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40fc810>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40fc550>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40fc2d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:04 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:04 Running '/app/htpasswd_generator.sh'
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40674d0>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_composev2.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f41db810>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3eb3190>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3eb3090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:10 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml up -d
INFO:root:Connecting to docker network: test_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3eb3bd0>

[1m    def test_forwards_to_whoami(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.local/port")[0m

[1m[31mtest_composev2.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3eb3a10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40e1610>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40e1750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:10 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.local')
DEBUG:DNS:'web.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml down
[1m[31m___________________________ test_fallback_on_default ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40e1b90>

[1m    def test_fallback_on_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_default-host.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f1d110>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f1d5d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f1d690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:16 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml down
[1m[31m________________________ test_new_container_is_detected ________________________[0m

web1 = <Container: 47623d7d76>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3faf510>

[1m    def test_new_container_is_detected(web1, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy/port")[0m

[1m[31mtest_events.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f5e650>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5e950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f5edd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:21 Generated '/app/htpasswd_generator.sh' from 2 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:21 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:21 Generated '/etc/nginx/conf.d/default.conf' from 2 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:21 Watching docker events
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:21 Watching docker events
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:21 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:21 Contents of /etc/nginx/conf.d/default.conf did not change. Skipping notification 'nginx -s reload'
[0m[0;32;1mnginx.1      | [0mnginx-proxy 172.17.0.2 - - [29/Jul/2019:19:28:24 +0000] "GET / HTTP/1.1" 503 213 "-" "python-requests/2.11.1"
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:24 Received event start for container 47623d7d7650
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:24 Received event start for container 47623d7d7650
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:24 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:24 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:24 Running '/app/htpasswd_generator.sh'
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:24 Received signal: terminated
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:24 Error running notify command: /app/htpasswd_generator.sh, signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
resolver 169.254.169.254;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	listen 80;
	access_log /var/log/nginx/access.log vhost;
	return 503;
}

----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy')
DEBUG:DNS:'web1.nginx-proxy' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_events.yml down
[1m[31m________________________ test_unknown_virtual_host_ipv4 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40a1d10>

[1m    def test_unknown_virtual_host_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_ipv6.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ff1210>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3faf090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40fcd90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f41515d0>

[1m    def test_forwards_to_web1_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f41ee710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f41ee550>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40ea910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4161b50>

[1m    def test_forwards_to_web2_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4233850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4233810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40fc0d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________________ test_unknown_virtual_host_ipv6 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40ea050>

[1m    def test_unknown_virtual_host_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fdda90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3eb3d50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3eb3590>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ff1510>

[1m    def test_forwards_to_web1_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4088310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5ead0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fb1710>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f41db790>

[1m    def test_forwards_to_web2_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3eb3550>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3eb3690>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3eb3e50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:29 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40a0dd0>

[1m    def test_unknown_virtual_host_is_503(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40b93d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40b9450>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40b9610>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Running '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Watching docker events
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:35 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webA_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd4390>

[1m    def test_webA_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webA.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40b9f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40b9f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='weba.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f19790>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Running '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Watching docker events
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:35 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('weba.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('weba.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'weba.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('weba.nginx-proxy.tld')
DEBUG:DNS:'weba.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webB_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f19990>

[1m    def test_webB_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webB.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f19e10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4072150>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='webb.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4072090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Running '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Watching docker events
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:35 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:35 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('webb.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('webb.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'webb.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('webb.nginx-proxy.tld')
DEBUG:DNS:'webb.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3eaafd0>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_multiple-networks.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3eaa390>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fc2250>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fc2810>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:41 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml up -d
INFO:root:Connecting to docker network: test_net2
INFO:root:Connecting to docker network: test_net1
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3efc1d0>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3efcb90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3efc890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ed9450>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:41 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40ea790>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fb1fd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fb1b90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fb1350>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:41 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:41 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_net2
INFO:root:Disconnecting from network test_net1
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40b9550>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_nominal.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef5c90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f41516d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3faf750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:47 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:47 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_nominal.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4088a10>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef5650>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e46f90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e46dd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:47 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:47 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40d9ed0>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40d9d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40d9410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3efe050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:47 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:47 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________ test_wildcard_prefix[f00.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e50710>
host = 'f00.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e50b50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f25e10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='f00.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f25bd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('f00.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('f00.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'f00.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('f00.nginx-proxy.test')
DEBUG:DNS:'f00.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[bar.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fb5c50>
host = 'bar.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fb5e90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fab210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fabcd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.test')
DEBUG:DNS:'bar.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.f00-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd3750>
host = 'test.nginx-proxy.f00', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd3190>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fd3150>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.f00', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f25750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.f00', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.f00')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.f00'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.f00')
DEBUG:DNS:'test.nginx-proxy.f00' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.bar-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40a1ed0>
host = 'test.nginx-proxy.bar', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40a1390>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40a1690>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.bar', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fab750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.bar', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.bar')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.bar'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.bar')
DEBUG:DNS:'test.nginx-proxy.bar' does not match
[1m[31m_____________ test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ff1110>
host = 'web3.123.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fab190>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fab290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40d6b50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e3f410>
host = 'web3.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e3fc90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e3fd90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e3f0d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f42330d0>
host = 'web3.123.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4233e50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3eedf90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3eed790>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fc2910>
host = 'web3.123-ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fc2710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fc28d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fc2d90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123-abc.nginx-proxy.regexp' does not match
[1m[31m_ test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] _[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd41d0>
host = 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd4210>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f19d90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f196d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
[1m[31m_____________ test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3eed710>
host = 'web4.123.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3efcb90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3efc510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3efc090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3efc950>
host = 'web4.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef8310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ef8490>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ef82d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f1c750>
host = 'web4.123.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f1cf90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f1cb10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f1ce10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f156d0>
host = 'web4.123-ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f15f50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f41eee10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f41ee850>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123-abc.nginx-proxy.regexp' does not match
[1m[31m__________ test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40e15d0>
host = 'web4.whatever.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40e1c90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ded810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3dedc10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp' does not match
[1m[31m__________ test_non_matching_host_is_503[unexpected.nginx-proxy.tld] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fb1a10>
host = 'unexpected.nginx-proxy.tld'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fb1950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fb1a50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unexpected.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3df6d10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unexpected.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unexpected.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unexpected.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unexpected.nginx-proxy.tld')
DEBUG:DNS:'unexpected.nginx-proxy.tld' does not match
[1m[31m_ test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] _[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3dedd50>
host = 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ded7d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fd3cd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fd3810>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:28:53 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:28:53 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml down
[1m[31m___________ test_custom_default_conf_does_not_apply_to_unknown_vhost ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e50450>

[1m    def test_custom_default_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fafad0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ed9090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ed9f10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:20 Generated '/app/htpasswd_generator.sh' from 5 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:20 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web1 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40fc050>

[1m    def test_custom_default_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd4f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f41dbed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ff1090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:20 Generated '/app/htpasswd_generator.sh' from 5 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:20 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web2 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef8a90>

[1m    def test_custom_default_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef8350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ef8510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ef5550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:20 Generated '/app/htpasswd_generator.sh' from 5 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:20 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m________________ test_custom_default_conf_is_overriden_for_web3 ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4031090>

[1m    def test_custom_default_conf_is_overriden_for_web3(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4031dd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4031cd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40316d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:20 Generated '/app/htpasswd_generator.sh' from 5 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:20 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.local')
DEBUG:DNS:'web3.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f15550>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4185410>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fdd7d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fdd790>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:27 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ea5950>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ea50d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ea5fd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ea5cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:27 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f405d910>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f405d3d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f405d850>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40e1bd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:27 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:27 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f1cb50>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3faf790>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40347d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4034090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:33 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4072c10>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f5dd50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5d810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f5d950>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:33 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40d66d0>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40d6610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40d6c10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4091ed0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:33 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:33 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m_____________ test_custom_block_is_present_in_nginx_generated_conf _____________[0m
No running jwilder/nginx-proxy:test container
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4067fd0>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3dfe990>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3efe650>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3efe4d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:40 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:40 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4098910>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e50c10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e50a50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4233b50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:40 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:40 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3efe7d0>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40653d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40655d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4233a50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:40 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:40 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40a1490>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3eee090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fb1e50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fb1f50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:46 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e3f590>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e3fd10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e3f290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e19550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:46 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd3cd0>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd3150>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f0abd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f0a3d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Generated '/app/htpasswd_generator.sh' from 4 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:29:46 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:29:46 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f15250>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:31: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (3e5dad5317)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.27.0.3 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fb5150>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm 1d2b8efd70c3\n"[0m
[1m[31mE         + I'm 1d2b8efd70c3[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:38: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (3e5dad5317)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.27.0.3 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml down
INFO:root:removing nginx.tmpl
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ee7e50>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:54: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (85d9091d86)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.28.0.3 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd4350>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm b5ff578c7f26\n"[0m
[1m[31mE         + I'm b5ff578c7f26[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:61: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (85d9091d86)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.28.0.3 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml down
INFO:root:removing nginx.tmpl
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f15dd0>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_http.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3dd90d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ee7990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ee7f10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3dcd810>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3da0e10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3da0790>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3da0690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef64d0>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_http.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f78710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f78d10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f78ad0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40d93d0>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40e17d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f402c310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f402c750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e0f3d0>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e0fb90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e0f2d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e0fe90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3da0410>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e3f4d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e3fbd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e3f050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fb5150>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_http.py[0m:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40a1fd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f1c450>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f1c550>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ea56d0>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f5d890>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5dd90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f5d150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3faf790>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40b9a90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f40b9ad0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40b9cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e04ed0>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e04d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5e150>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f5e290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e56110>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f1c250>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f1ce10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f1c090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f19b90>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_http.py[0m:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f5d350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5d090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f5dad0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:09 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:09 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml down
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40b9b10>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_https.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f0cf10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5e810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3df6610>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4091dd0>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4091050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fc2510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3fc2790>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3c4ec10>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_https.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3c4e810>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3c4eed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3c4ee90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f18350>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f18ad0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f2eed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3f2e910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fd3e90>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd3a50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ded910>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3ded290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f402c290>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f402cad0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f5e310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3f5ec50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4065990>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_https.py[0m:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4065850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4098b10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f4098490>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3eaac90>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3eaa9d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e19e50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e19950>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3fae450>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3faea50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fae5d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3faed50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ed9610>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ed9910>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3dfeb10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3dfe210>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e56690>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e56950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e0f050>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e0f9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e877d0>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_https.py[0m:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e87fd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e87cd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e87910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:16 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Watching docker events
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:16 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml down
[1m[31m____________________ test_answer_is_served_from_chosen_port ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4091050>

[1m    def test_answer_is_served_from_chosen_port(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_VIRTUAL_PORT.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f18d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ef5110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3ef5590>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:23 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Watching docker events
[0m[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Received signal: terminated
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Contents of /app/htpasswd_generator.sh did not change. Skipping notification '/app/htpasswd_generator.sh'
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:23 Received signal: terminated
[0m
------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml down
[1m[31m________________ test_answer_is_served_from_port_80_by_default _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef5e10>

[1m    def test_answer_is_served_from_port_80_by_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_default-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef6dd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e7a810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3e7ae10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:29 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:29 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:29 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml down
[1m[31m____________ test_answer_is_served_from_exposed_port_even_if_not_80 ____________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f25fd0>

[1m    def test_answer_is_served_from_exposed_port_even_if_not_80(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_single-port-not-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4034e10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4034ad0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f4034990>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:34 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:34 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml down
[1m[31m___________________ test_dhparam_is_not_generated_if_present ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>

[1m    def test_dhparam_is_not_generated_if_present(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:69: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:39 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:39 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml up -d
[1m[31m____________________________ test_web5_https_works _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3d7d850>

[1m    def test_web5_https_works(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web5.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_dhparam.py[0m:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3d7d490>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3d7d950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web5.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3d7d210>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:39 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:39 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web5.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web5.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web5.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web5.nginx-proxy.tld')
DEBUG:DNS:'web5.nginx-proxy.tld' does not match
[1m[31m__________________________ test_web5_dhparam_is_used ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>

[1m    @require_openssl("1.0.2")[0m
[1m    def test_web5_dhparam_is_used(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:88: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:39 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:39 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml down
[1m[31m____________________________ test_web1_HSTS_default ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4088410>

[1m    def test_web1_HSTS_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fbe090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3deda90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3df69d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:50 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m_____________________________ test_web1_HSTS_error _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3c3e350>

[1m    def test_web1_HSTS_error(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/status/500", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3c3ef10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3c3efd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /status/500 (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3c3e510>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:50 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m______________________________ test_web2_HSTS_off ______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40a1090>

[1m    def test_web2_HSTS_off(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f40a1c50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4098750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e3f910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:50 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m____________________________ test_web3_HSTS_custom _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef8b50>

[1m    def test_web3_HSTS_custom(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef8610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ef80d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f40d5250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:50 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m________________________ test_web4_HSTS_off_noredirect _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e5d850>

[1m    def test_web4_HSTS_off_noredirect(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web4.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e5d350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e5d710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web4.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3ee7990>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Generated '/app/htpasswd_generator.sh' from 6 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:50 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:50 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to nginx.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web4.nginx-proxy.tld')
DEBUG:DNS:'web4.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml down
[1m[31m_______________________ test_web2_http_is_not_forwarded ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4088290>

[1m    def test_web2_http_is_not_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3fd3090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3efe990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f18f50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:57 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web2_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ed9e10>

[1m    def test_web2_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ed9d50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e986d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e98e10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:57 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_______________________ test_web2_HSTS_policy_is_active ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f780d0>

[1m    def test_web2_HSTS_policy_is_active(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f785d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f78650>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3f78cd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:30:57 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:30:57 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml down
[1m[31m____________________________ test_http_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ff1210>

[1m    def test_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttps.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3c368d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3c36850>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3f77950>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:02 Template error: template: nginx.tmpl:285:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:02 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttps.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_http_is_forwarded __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ed9b10>

[1m    def test_web3_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e50f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3d56810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3d56510>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:07 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3f5e810>

[1m    def test_web3_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3f5e390>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3c41650>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3c413d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:07 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m______________________ test_web2_HSTS_policy_is_inactive _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f40e1f10>

[1m    def test_web2_HSTS_policy_is_inactive(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4065850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3efde90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3efd7d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:07 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml down
[1m[31m____________________ test_web1_http_redirects_to_https[foo] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e50b10>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3d33690>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3d33750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='foo.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3d33a50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m____________________ test_web1_http_redirects_to_https[bar] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e43910>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f402ca50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3fab090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f40b9910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[foo] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef8d10>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef8610>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f4031310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f4031150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[bar] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f405d750>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f405d850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3d7d810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3d7d5d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[foo] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ef6b90>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ef6b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3ef5ad0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3ef5910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[bar] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e19e90>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3e197d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f2e7d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3f2e050>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Generated '/app/htpasswd_generator.sh' from 3 containers
[0m[0;36;1mhtpasswdgen.1 | [0;31;1m2019/07/29 19:31:13 Running '/app/htpasswd_generator.sh'
[0m[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:13 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml down
[1m[31m_____________________ test_http_redirects_to_https[1-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e50fd0>
subdomain = 1, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3d129d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3d12d10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='1.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3fb1f50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml up -d
INFO:root:Connecting to docker network: wildcardcertandnohttps_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_http_redirects_to_https[2-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3e462d0>
subdomain = 2, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3c3e410>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3c3e390>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='2.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3c3ecd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m____________________ test_http_redirects_to_https[3-False] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3ed9e10>
subdomain = 3, should_redirect_to_https = False

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3ed9910>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3f18290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='3.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7f67f3dcda90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[1] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3da0550>
subdomain = 1

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3da0750>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3da0190>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='1.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3da0250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[2] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f4098c50>
subdomain = 2

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f4098950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3e04390>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='2.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3e046d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m_______________ test_web3_https_is_500_and_SSL_validation_fails ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7f67f43a0a90>
nginxproxy = <conftest.requests_for_docker object at 0x7f67f3cf7cd0>

[1m    def test_web3_https_is_500_and_SSL_validation_fails(docker_compose, nginxproxy):[0m
[1m        with pytest.raises( (CertificateError, SSLError) ) as excinfo:[0m
[1m>           nginxproxy.get("https://3.web.nginx-proxy.tld/port")[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7f67f3cf7f50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7f67f3cf7a10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='3.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7f67f3cf7b50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego       | [0mstarting htpasswdgen.1 on port 5000
[0;37;1mforego       | [0mstarting dockergen.1 on port 5100
[0;37;1mforego       | [0mstarting nginx.1 on port 5300
[0;33;1mdockergen.1  | [0;31;1m2019/07/29 19:31:20 Template error: template: nginx.tmpl:229:7: executing "nginx.tmpl" at <not>: wrong number of args for not: want 1 got 3
[0m[0;37;1mforego       | [0mstarting dockergen.1 on port 5400
[0;37;1mforego       | [0msending SIGTERM to nginx.1
[0;37;1mforego       | [0msending SIGTERM to dockergen.1
[0;37;1mforego       | [0msending SIGTERM to htpasswdgen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network wildcardcertandnohttps_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml down
[1m[31m============== 113 failed, 4 passed, 12 xfailed in 205.39 seconds ==============[0m
make: *** [test-debian] Error 1
travis_time:end:32b25748:start=1564428450220739436,finish=1564428688657030132,duration=238436290696[0K[31;1mThe command "make $TEST_TARGET" exited with 2.[0m



Done. Your build exited with 1.
