travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: 09e5be48-5cf9-44d3-90a2-e405f8db4cd7@1.worker-org-b6c9dcb4d-sdg4f.gce-production-1
version: v6.2.1 https://github.com/travis-ci/worker/tree/4e3246c044eb4915c2378ffacd0b3d3ed0136bba
instance: travis-job-d0956359-e700-4869-a179-73a78fd96c12 travis-ci-garnet-trusty-1512502259-986baf0 (via amqp)
startup: 6.280025819s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: ruby
Build group: stable
Build dist: trusty
Build id: 565363151
Job id: 565363152
Runtime kernel version: 4.4.0-101-generic
travis-build version: 24c88d12b
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 19:58:13 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:38 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:41:20 2017
 OS/Arch:      linux/amd64
 Experimental: false
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	10.240.0.28/255.255.255.255
	172.17.0.1/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-98-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-98-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Kdocker stop/waiting
docker start/running, process 4444
travis_fold:end:docker_mtu[0Ktravis_fold:start:resolvconf[0Kresolvconf stop/waiting
resolvconf start/running
travis_fold:end:resolvconf[0K
travis_fold:start:git.checkout[0Ktravis_time:start:1197cd69[0K$ git clone --depth=50 https://github.com/jwilder/nginx-proxy.git jwilder/nginx-proxy
Cloning into 'jwilder/nginx-proxy'...
remote: Enumerating objects: 1437, done.[K
remote: Counting objects:   0% (1/1437)   [Kremote: Counting objects:   1% (15/1437)   [Kremote: Counting objects:   2% (29/1437)   [Kremote: Counting objects:   3% (44/1437)   [Kremote: Counting objects:   4% (58/1437)   [Kremote: Counting objects:   5% (72/1437)   [Kremote: Counting objects:   6% (87/1437)   [Kremote: Counting objects:   7% (101/1437)   [Kremote: Counting objects:   8% (115/1437)   [Kremote: Counting objects:   9% (130/1437)   [Kremote: Counting objects:  10% (144/1437)   [Kremote: Counting objects:  11% (159/1437)   [Kremote: Counting objects:  12% (173/1437)   [Kremote: Counting objects:  13% (187/1437)   [Kremote: Counting objects:  14% (202/1437)   [Kremote: Counting objects:  15% (216/1437)   [Kremote: Counting objects:  16% (230/1437)   [Kremote: Counting objects:  17% (245/1437)   [Kremote: Counting objects:  18% (259/1437)   [Kremote: Counting objects:  19% (274/1437)   [Kremote: Counting objects:  20% (288/1437)   [Kremote: Counting objects:  21% (302/1437)   [Kremote: Counting objects:  22% (317/1437)   [Kremote: Counting objects:  23% (331/1437)   [Kremote: Counting objects:  24% (345/1437)   [Kremote: Counting objects:  25% (360/1437)   [Kremote: Counting objects:  26% (374/1437)   [Kremote: Counting objects:  27% (388/1437)   [Kremote: Counting objects:  28% (403/1437)   [Kremote: Counting objects:  29% (417/1437)   [Kremote: Counting objects:  30% (432/1437)   [Kremote: Counting objects:  31% (446/1437)   [Kremote: Counting objects:  32% (460/1437)   [Kremote: Counting objects:  33% (475/1437)   [Kremote: Counting objects:  34% (489/1437)   [Kremote: Counting objects:  35% (503/1437)   [Kremote: Counting objects:  36% (518/1437)   [Kremote: Counting objects:  37% (532/1437)   [Kremote: Counting objects:  38% (547/1437)   [Kremote: Counting objects:  39% (561/1437)   [Kremote: Counting objects:  40% (575/1437)   [Kremote: Counting objects:  41% (590/1437)   [Kremote: Counting objects:  42% (604/1437)   [Kremote: Counting objects:  43% (618/1437)   [Kremote: Counting objects:  44% (633/1437)   [Kremote: Counting objects:  45% (647/1437)   [Kremote: Counting objects:  46% (662/1437)   [Kremote: Counting objects:  47% (676/1437)   [Kremote: Counting objects:  48% (690/1437)   [Kremote: Counting objects:  49% (705/1437)   [Kremote: Counting objects:  50% (719/1437)   [Kremote: Counting objects:  51% (733/1437)   [Kremote: Counting objects:  52% (748/1437)   [Kremote: Counting objects:  53% (762/1437)   [Kremote: Counting objects:  54% (776/1437)   [Kremote: Counting objects:  55% (791/1437)   [Kremote: Counting objects:  56% (805/1437)   [Kremote: Counting objects:  57% (820/1437)   [Kremote: Counting objects:  58% (834/1437)   [Kremote: Counting objects:  59% (848/1437)   [Kremote: Counting objects:  60% (863/1437)   [Kremote: Counting objects:  61% (877/1437)   [Kremote: Counting objects:  62% (891/1437)   [Kremote: Counting objects:  63% (906/1437)   [Kremote: Counting objects:  64% (920/1437)   [Kremote: Counting objects:  65% (935/1437)   [Kremote: Counting objects:  66% (949/1437)   [Kremote: Counting objects:  67% (963/1437)   [Kremote: Counting objects:  68% (978/1437)   [Kremote: Counting objects:  69% (992/1437)   [Kremote: Counting objects:  70% (1006/1437)   [Kremote: Counting objects:  71% (1021/1437)   [Kremote: Counting objects:  72% (1035/1437)   [Kremote: Counting objects:  73% (1050/1437)   [Kremote: Counting objects:  74% (1064/1437)   [Kremote: Counting objects:  75% (1078/1437)   [Kremote: Counting objects:  76% (1093/1437)   [Kremote: Counting objects:  77% (1107/1437)   [Kremote: Counting objects:  78% (1121/1437)   [Kremote: Counting objects:  79% (1136/1437)   [Kremote: Counting objects:  80% (1150/1437)   [Kremote: Counting objects:  81% (1164/1437)   [Kremote: Counting objects:  82% (1179/1437)   [Kremote: Counting objects:  83% (1193/1437)   [Kremote: Counting objects:  84% (1208/1437)   [Kremote: Counting objects:  85% (1222/1437)   [Kremote: Counting objects:  86% (1236/1437)   [Kremote: Counting objects:  87% (1251/1437)   [Kremote: Counting objects:  88% (1265/1437)   [Kremote: Counting objects:  89% (1279/1437)   [Kremote: Counting objects:  90% (1294/1437)   [Kremote: Counting objects:  91% (1308/1437)   [Kremote: Counting objects:  92% (1323/1437)   [Kremote: Counting objects:  93% (1337/1437)   [Kremote: Counting objects:  94% (1351/1437)   [Kremote: Counting objects:  95% (1366/1437)   [Kremote: Counting objects:  96% (1380/1437)   [Kremote: Counting objects:  97% (1394/1437)   [Kremote: Counting objects:  98% (1409/1437)   [Kremote: Counting objects:  99% (1423/1437)   [Kremote: Counting objects: 100% (1437/1437)   [Kremote: Counting objects: 100% (1437/1437), done.[K
remote: Compressing objects:   0% (1/625)   [Kremote: Compressing objects:   1% (7/625)   [Kremote: Compressing objects:   2% (13/625)   [Kremote: Compressing objects:   3% (19/625)   [Kremote: Compressing objects:   4% (25/625)   [Kremote: Compressing objects:   5% (32/625)   [Kremote: Compressing objects:   6% (38/625)   [Kremote: Compressing objects:   7% (44/625)   [Kremote: Compressing objects:   8% (50/625)   [Kremote: Compressing objects:   9% (57/625)   [Kremote: Compressing objects:  10% (63/625)   [Kremote: Compressing objects:  11% (69/625)   [Kremote: Compressing objects:  12% (75/625)   [Kremote: Compressing objects:  13% (82/625)   [Kremote: Compressing objects:  14% (88/625)   [Kremote: Compressing objects:  15% (94/625)   [Kremote: Compressing objects:  16% (100/625)   [Kremote: Compressing objects:  17% (107/625)   [Kremote: Compressing objects:  18% (113/625)   [Kremote: Compressing objects:  19% (119/625)   [Kremote: Compressing objects:  20% (125/625)   [Kremote: Compressing objects:  21% (132/625)   [Kremote: Compressing objects:  22% (138/625)   [Kremote: Compressing objects:  23% (144/625)   [Kremote: Compressing objects:  24% (150/625)   [Kremote: Compressing objects:  25% (157/625)   [Kremote: Compressing objects:  26% (163/625)   [Kremote: Compressing objects:  27% (169/625)   [Kremote: Compressing objects:  28% (175/625)   [Kremote: Compressing objects:  29% (182/625)   [Kremote: Compressing objects:  30% (188/625)   [Kremote: Compressing objects:  31% (194/625)   [Kremote: Compressing objects:  32% (200/625)   [Kremote: Compressing objects:  33% (207/625)   [Kremote: Compressing objects:  34% (213/625)   [Kremote: Compressing objects:  35% (219/625)   [Kremote: Compressing objects:  36% (225/625)   [Kremote: Compressing objects:  37% (232/625)   [Kremote: Compressing objects:  38% (238/625)   [Kremote: Compressing objects:  39% (244/625)   [Kremote: Compressing objects:  40% (250/625)   [Kremote: Compressing objects:  41% (257/625)   [Kremote: Compressing objects:  42% (263/625)   [Kremote: Compressing objects:  43% (269/625)   [Kremote: Compressing objects:  44% (275/625)   [Kremote: Compressing objects:  45% (282/625)   [Kremote: Compressing objects:  46% (288/625)   [Kremote: Compressing objects:  47% (294/625)   [Kremote: Compressing objects:  48% (300/625)   [Kremote: Compressing objects:  49% (307/625)   [Kremote: Compressing objects:  50% (313/625)   [Kremote: Compressing objects:  51% (319/625)   [Kremote: Compressing objects:  52% (325/625)   [Kremote: Compressing objects:  53% (332/625)   [Kremote: Compressing objects:  54% (338/625)   [Kremote: Compressing objects:  55% (344/625)   [Kremote: Compressing objects:  56% (350/625)   [Kremote: Compressing objects:  57% (357/625)   [Kremote: Compressing objects:  58% (363/625)   [Kremote: Compressing objects:  59% (369/625)   [Kremote: Compressing objects:  60% (375/625)   [Kremote: Compressing objects:  61% (382/625)   [Kremote: Compressing objects:  62% (388/625)   [Kremote: Compressing objects:  63% (394/625)   [Kremote: Compressing objects:  64% (400/625)   [Kremote: Compressing objects:  65% (407/625)   [Kremote: Compressing objects:  66% (413/625)   [Kremote: Compressing objects:  67% (419/625)   [Kremote: Compressing objects:  68% (425/625)   [Kremote: Compressing objects:  69% (432/625)   [Kremote: Compressing objects:  70% (438/625)   [Kremote: Compressing objects:  71% (444/625)   [Kremote: Compressing objects:  72% (450/625)   [Kremote: Compressing objects:  73% (457/625)   [Kremote: Compressing objects:  74% (463/625)   [Kremote: Compressing objects:  75% (469/625)   [Kremote: Compressing objects:  76% (475/625)   [Kremote: Compressing objects:  77% (482/625)   [Kremote: Compressing objects:  78% (488/625)   [Kremote: Compressing objects:  79% (494/625)   [Kremote: Compressing objects:  80% (500/625)   [Kremote: Compressing objects:  81% (507/625)   [Kremote: Compressing objects:  82% (513/625)   [Kremote: Compressing objects:  83% (519/625)   [Kremote: Compressing objects:  84% (525/625)   [Kremote: Compressing objects:  85% (532/625)   [Kremote: Compressing objects:  86% (538/625)   [Kremote: Compressing objects:  87% (544/625)   [Kremote: Compressing objects:  88% (550/625)   [Kremote: Compressing objects:  89% (557/625)   [Kremote: Compressing objects:  90% (563/625)   [Kremote: Compressing objects:  91% (569/625)   [Kremote: Compressing objects:  92% (575/625)   [Kremote: Compressing objects:  93% (582/625)   [Kremote: Compressing objects:  94% (588/625)   [Kremote: Compressing objects:  95% (594/625)   [Kremote: Compressing objects:  96% (600/625)   [Kremote: Compressing objects:  97% (607/625)   [Kremote: Compressing objects:  98% (613/625)   [Kremote: Compressing objects:  99% (619/625)   [Kremote: Compressing objects: 100% (625/625)   [Kremote: Compressing objects: 100% (625/625), done.[K
Receiving objects:   0% (1/1437)   Receiving objects:   1% (15/1437)   Receiving objects:   2% (29/1437)   Receiving objects:   3% (44/1437)   Receiving objects:   4% (58/1437)   Receiving objects:   5% (72/1437)   Receiving objects:   6% (87/1437)   Receiving objects:   7% (101/1437)   Receiving objects:   8% (115/1437)   Receiving objects:   9% (130/1437)   Receiving objects:  10% (144/1437)   Receiving objects:  11% (159/1437)   Receiving objects:  12% (173/1437)   Receiving objects:  13% (187/1437)   Receiving objects:  14% (202/1437)   Receiving objects:  15% (216/1437)   Receiving objects:  16% (230/1437)   Receiving objects:  17% (245/1437)   Receiving objects:  18% (259/1437)   Receiving objects:  19% (274/1437)   Receiving objects:  20% (288/1437)   Receiving objects:  21% (302/1437)   Receiving objects:  22% (317/1437)   Receiving objects:  23% (331/1437)   Receiving objects:  24% (345/1437)   Receiving objects:  25% (360/1437)   Receiving objects:  26% (374/1437)   Receiving objects:  27% (388/1437)   Receiving objects:  28% (403/1437)   Receiving objects:  29% (417/1437)   Receiving objects:  30% (432/1437)   Receiving objects:  31% (446/1437)   Receiving objects:  32% (460/1437)   Receiving objects:  33% (475/1437)   Receiving objects:  34% (489/1437)   Receiving objects:  35% (503/1437)   Receiving objects:  36% (518/1437)   Receiving objects:  37% (532/1437)   Receiving objects:  38% (547/1437)   Receiving objects:  39% (561/1437)   Receiving objects:  40% (575/1437)   Receiving objects:  41% (590/1437)   Receiving objects:  42% (604/1437)   Receiving objects:  43% (618/1437)   Receiving objects:  44% (633/1437)   Receiving objects:  45% (647/1437)   Receiving objects:  46% (662/1437)   Receiving objects:  47% (676/1437)   Receiving objects:  48% (690/1437)   Receiving objects:  49% (705/1437)   Receiving objects:  50% (719/1437)   Receiving objects:  51% (733/1437)   Receiving objects:  52% (748/1437)   Receiving objects:  53% (762/1437)   Receiving objects:  54% (776/1437)   Receiving objects:  55% (791/1437)   Receiving objects:  56% (805/1437)   Receiving objects:  57% (820/1437)   Receiving objects:  58% (834/1437)   Receiving objects:  59% (848/1437)   Receiving objects:  60% (863/1437)   Receiving objects:  61% (877/1437)   Receiving objects:  62% (891/1437)   Receiving objects:  63% (906/1437)   Receiving objects:  64% (920/1437)   Receiving objects:  65% (935/1437)   Receiving objects:  66% (949/1437)   Receiving objects:  67% (963/1437)   Receiving objects:  68% (978/1437)   Receiving objects:  69% (992/1437)   Receiving objects:  70% (1006/1437)   Receiving objects:  71% (1021/1437)   Receiving objects:  72% (1035/1437)   Receiving objects:  73% (1050/1437)   Receiving objects:  74% (1064/1437)   Receiving objects:  75% (1078/1437)   Receiving objects:  76% (1093/1437)   Receiving objects:  77% (1107/1437)   Receiving objects:  78% (1121/1437)   Receiving objects:  79% (1136/1437)   Receiving objects:  80% (1150/1437)   Receiving objects:  81% (1164/1437)   Receiving objects:  82% (1179/1437)   Receiving objects:  83% (1193/1437)   Receiving objects:  84% (1208/1437)   Receiving objects:  85% (1222/1437)   Receiving objects:  86% (1236/1437)   Receiving objects:  87% (1251/1437)   Receiving objects:  88% (1265/1437)   Receiving objects:  89% (1279/1437)   Receiving objects:  90% (1294/1437)   Receiving objects:  91% (1308/1437)   Receiving objects:  92% (1323/1437)   Receiving objects:  93% (1337/1437)   Receiving objects:  94% (1351/1437)   Receiving objects:  95% (1366/1437)   remote: Total 1437 (delta 854), reused 1377 (delta 797), pack-reused 0[K
Receiving objects:  96% (1380/1437)   Receiving objects:  97% (1394/1437)   Receiving objects:  98% (1409/1437)   Receiving objects:  99% (1423/1437)   Receiving objects: 100% (1437/1437)   Receiving objects: 100% (1437/1437), 351.51 KiB | 4.88 MiB/s, done.
Resolving deltas:   0% (0/854)   Resolving deltas:   1% (9/854)   Resolving deltas:   2% (20/854)   Resolving deltas:   3% (27/854)   Resolving deltas:   4% (37/854)   Resolving deltas:   5% (43/854)   Resolving deltas:   7% (61/854)   Resolving deltas:   8% (71/854)   Resolving deltas:  10% (91/854)   Resolving deltas:  12% (103/854)   Resolving deltas:  13% (117/854)   Resolving deltas:  14% (123/854)   Resolving deltas:  18% (160/854)   Resolving deltas:  19% (165/854)   Resolving deltas:  20% (174/854)   Resolving deltas:  23% (204/854)   Resolving deltas:  24% (211/854)   Resolving deltas:  25% (221/854)   Resolving deltas:  27% (234/854)   Resolving deltas:  28% (245/854)   Resolving deltas:  29% (248/854)   Resolving deltas:  31% (267/854)   Resolving deltas:  32% (278/854)   Resolving deltas:  33% (284/854)   Resolving deltas:  34% (294/854)   Resolving deltas:  35% (307/854)   Resolving deltas:  37% (321/854)   Resolving deltas:  38% (333/854)   Resolving deltas:  39% (340/854)   Resolving deltas:  41% (351/854)   Resolving deltas:  42% (360/854)   Resolving deltas:  46% (394/854)   Resolving deltas:  47% (403/854)   Resolving deltas:  48% (414/854)   Resolving deltas:  49% (421/854)   Resolving deltas:  50% (429/854)   Resolving deltas:  63% (540/854)   Resolving deltas:  64% (550/854)   Resolving deltas:  65% (556/854)   Resolving deltas:  66% (567/854)   Resolving deltas:  67% (575/854)   Resolving deltas:  68% (586/854)   Resolving deltas:  69% (591/854)   Resolving deltas:  70% (599/854)   Resolving deltas:  71% (607/854)   Resolving deltas:  74% (632/854)   Resolving deltas:  75% (644/854)   Resolving deltas:  76% (652/854)   Resolving deltas:  81% (699/854)   Resolving deltas:  83% (712/854)   Resolving deltas:  84% (721/854)   Resolving deltas:  85% (729/854)   Resolving deltas:  89% (762/854)   Resolving deltas:  91% (781/854)   Resolving deltas:  92% (787/854)   Resolving deltas:  93% (796/854)   Resolving deltas:  94% (805/854)   Resolving deltas:  95% (813/854)   Resolving deltas:  96% (820/854)   Resolving deltas:  97% (829/854)   Resolving deltas:  98% (837/854)   Resolving deltas:  99% (848/854)   Resolving deltas: 100% (854/854)   Resolving deltas: 100% (854/854), done.
travis_time:end:1197cd69:start=1564473695903029494,finish=1564473696705237093,duration=802207599[0K$ cd jwilder/nginx-proxy
travis_time:start:0c1840e6[0K$ git fetch origin +refs/pull/1296/merge:
remote: Enumerating objects: 40, done.[K
remote: Counting objects:   2% (1/39)   [Kremote: Counting objects:   5% (2/39)   [Kremote: Counting objects:   7% (3/39)   [Kremote: Counting objects:  10% (4/39)   [Kremote: Counting objects:  12% (5/39)   [Kremote: Counting objects:  15% (6/39)   [Kremote: Counting objects:  17% (7/39)   [Kremote: Counting objects:  20% (8/39)   [Kremote: Counting objects:  23% (9/39)   [Kremote: Counting objects:  25% (10/39)   [Kremote: Counting objects:  28% (11/39)   [Kremote: Counting objects:  30% (12/39)   [Kremote: Counting objects:  33% (13/39)   [Kremote: Counting objects:  35% (14/39)   [Kremote: Counting objects:  38% (15/39)   [Kremote: Counting objects:  41% (16/39)   [Kremote: Counting objects:  43% (17/39)   [Kremote: Counting objects:  46% (18/39)   [Kremote: Counting objects:  48% (19/39)   [Kremote: Counting objects:  51% (20/39)   [Kremote: Counting objects:  53% (21/39)   [Kremote: Counting objects:  56% (22/39)   [Kremote: Counting objects:  58% (23/39)   [Kremote: Counting objects:  61% (24/39)   [Kremote: Counting objects:  64% (25/39)   [Kremote: Counting objects:  66% (26/39)   [Kremote: Counting objects:  69% (27/39)   [Kremote: Counting objects:  71% (28/39)   [Kremote: Counting objects:  74% (29/39)   [Kremote: Counting objects:  76% (30/39)   [Kremote: Counting objects:  79% (31/39)   [Kremote: Counting objects:  82% (32/39)   [Kremote: Counting objects:  84% (33/39)   [Kremote: Counting objects:  87% (34/39)   [Kremote: Counting objects:  89% (35/39)   [Kremote: Counting objects:  92% (36/39)   [Kremote: Counting objects:  94% (37/39)   [Kremote: Counting objects:  97% (38/39)   [Kremote: Counting objects: 100% (39/39)   [Kremote: Counting objects: 100% (39/39), done.[K
remote: Compressing objects:  10% (1/10)   [Kremote: Compressing objects:  20% (2/10)   [Kremote: Compressing objects:  30% (3/10)   [Kremote: Compressing objects:  40% (4/10)   [Kremote: Compressing objects:  50% (5/10)   [Kremote: Compressing objects:  60% (6/10)   [Kremote: Compressing objects:  70% (7/10)   [Kremote: Compressing objects:  80% (8/10)   [Kremote: Compressing objects:  90% (9/10)   [Kremote: Compressing objects: 100% (10/10)   [Kremote: Compressing objects: 100% (10/10), done.[K
remote: Total 17 (delta 9), reused 12 (delta 6), pack-reused 0[K
Unpacking objects:   5% (1/17)   Unpacking objects:  11% (2/17)   Unpacking objects:  17% (3/17)   Unpacking objects:  23% (4/17)   Unpacking objects:  29% (5/17)   Unpacking objects:  35% (6/17)   Unpacking objects:  41% (7/17)   Unpacking objects:  47% (8/17)   Unpacking objects:  52% (9/17)   Unpacking objects:  58% (10/17)   Unpacking objects:  64% (11/17)   Unpacking objects:  70% (12/17)   Unpacking objects:  76% (13/17)   Unpacking objects:  82% (14/17)   Unpacking objects:  88% (15/17)   Unpacking objects:  94% (16/17)   Unpacking objects: 100% (17/17)   Unpacking objects: 100% (17/17), done.
From https://github.com/jwilder/nginx-proxy
 * branch            refs/pull/1296/merge -> FETCH_HEAD
travis_time:end:0c1840e6:start=1564473696710442010,finish=1564473697185336307,duration=474894297[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K

[33;1mSetting environment variables from .travis.yml[0m
$ export TEST_TARGET=test-debian

travis_fold:start:rvm[0Ktravis_time:start:0624b2aa[0K$ rvm use default
[32mUsing /home/travis/.rvm/gems/ruby-2.4.1[0m

[32;1m** Updating RubyGems to the latest compatible version for security reasons. **[0m
[32;1m** If you need an older version, you can downgrade with 'gem update --system OLD_VERSION'. **[0m

travis_time:end:0624b2aa:start=1564473697206221333,finish=1564473701557766249,duration=4351544916[0Ktravis_fold:end:rvm[0K
travis_fold:start:ruby.versions[0K$ ruby --version
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
$ rvm --version
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
$ bundle --version
Bundler version 1.17.3
$ gem --version
3.0.4
travis_fold:end:ruby.versions[0K
travis_fold:start:before_install.1[0Ktravis_time:start:02f1ec5b[0K$ sudo apt-get -y remove docker docker-engine docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
Package 'docker-engine' is not installed, so not removed
Package 'docker' is not installed, so not removed
The following packages were automatically installed and are no longer required:
  aufs-tools cgroup-lite libsystemd-journal0
Use 'sudo apt autoremove' to remove them.
The following packages will be REMOVED:
  docker-ce
0 upgraded, 0 newly installed, 1 to remove and 303 not upgraded.
After this operation, 99.3 MB disk space will be freed.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93695 files and directories currently installed.)
Removing docker-ce (17.09.0~ce-0~ubuntu) ...
docker stop/waiting
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
travis_time:end:02f1ec5b:start=1564473702019492662,finish=1564473704931944640,duration=2912451978[0Ktravis_fold:end:before_install.1[0Ktravis_fold:start:before_install.2[0Ktravis_time:start:05c18e14[0K$ sudo rm /etc/apt/sources.list.d/docker.list
travis_time:end:05c18e14:start=1564473704936553115,finish=1564473704944605944,duration=8052829[0Ktravis_fold:end:before_install.2[0Ktravis_fold:start:before_install.3[0Ktravis_time:start:0e63064d[0K$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
OK
travis_time:end:0e63064d:start=1564473704948530232,finish=1564473705175232502,duration=226702270[0Ktravis_fold:end:before_install.3[0Ktravis_fold:start:before_install.4[0Ktravis_time:start:212504a4[0K$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
travis_time:end:212504a4:start=1564473705179664311,finish=1564473705589844290,duration=410179979[0Ktravis_fold:end:before_install.4[0Ktravis_fold:start:before_install.5[0Ktravis_time:start:1c91c7a7[0K$ sudo apt-get update
0% [Working]0% [Connecting to apt.cache.travis-ci.com (34.96.81.152)] [Waiting for headers]                                                                               Hit:2 http://security.ubuntu.com/ubuntu trusty-security InRelease
0% [Connecting to apt.cache.travis-ci.com (34.96.81.152)] [Waiting for headers]                                                                               Hit:3 http://dl.hhvm.com/ubuntu trusty InRelease
                                                                               Hit:5 http://ppa.launchpad.net/chris-lea/redis-server/ubuntu trusty InRelease
                                                                               Hit:6 http://apt.postgresql.org/pub/repos/apt trusty-pgdg InRelease
0% [Waiting for headers] [Waiting for headers] [Waiting for headers] [Waiting f0% [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Waiting for headers] [Wait                                                                               Ign:7 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 InRelease
0% [Waiting for headers] [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Wait                                                                               Hit:8 http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 Release
0% [Waiting for headers] [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Wait                                                                               Hit:4 http://dl.bintray.com/apache/cassandra 39x InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Ign:9 http://dl.google.com/linux/chrome/deb stable InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:10 http://dl.google.com/linux/chrome/deb stable Release
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Ign:11 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:12 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty-updates InRelease
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers] [Wait                                                                               Hit:13 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty-backports InRelease
                                                                               0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers]                                                                         Hit:14 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty Release
0% [Waiting for headers] [2 InRelease gpgv 65.9 kB] [Waiting for headers]                                                                         Ign:1 http://heroku-toolbelt.s3.amazonaws.com/apt ./ InRelease
                                                                         0% [2 InRelease gpgv 65.9 kB] [Waiting for headers]0% [2 InRelease gpgv 65.9 kB] [Waiting for headers]0% [2 InRelease gpgv 65.9 kB] [Waiting for headers]                                                   Hit:15 http://heroku-toolbelt.s3.amazonaws.com/apt ./ Release
0% [2 InRelease gpgv 65.9 kB] [Waiting for headers]                                                   0% [Waiting for headers]0% [3 InRelease gpgv 3,106 B] [Waiting for headers]                                                   Ign:16 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty InRelease
0% [3 InRelease gpgv 3,106 B] [Waiting for headers]                                                   Hit:17 http://ppa.launchpad.net/git-core/ppa/ubuntu trusty InRelease
0% [3 InRelease gpgv 3,106 B] [Waiting for headers]                                                   Hit:18 http://ppa.launchpad.net/openjdk-r/ppa/ubuntu trusty InRelease
0% [3 InRelease gpgv 3,106 B] [Waiting for headers]                                                   Hit:19 http://ppa.launchpad.net/pollinate/ppa/ubuntu trusty InRelease
                                                   0% [3 InRelease gpgv 3,106 B]                             Hit:20 http://ppa.launchpad.net/webupd8team/java/ubuntu trusty InRelease
0% [3 InRelease gpgv 3,106 B]                             0% [Waiting for headers]0% [5 InRelease gpgv 15.4 kB] [Waiting for headers]                                                   Hit:21 http://ppa.launchpad.net/couchdb/stable/ubuntu trusty Release
                                                   0% [5 InRelease gpgv 15.4 kB]                             Hit:22 https://download.docker.com/linux/ubuntu trusty InRelease
0% [5 InRelease gpgv 15.4 kB]                             0% [Working]0% [6 InRelease gpgv 56.5 kB]                             0% [Working]0% [Release.gpg gpgv 2,495 B]                             0% [Working]0% [4 InRelease gpgv 3,168 B]                             0% [Working]0% [Release.gpg gpgv 943 B]                           0% [Working]0% [12 InRelease gpgv 65.9 kB]                              0% [Working]0% [13 InRelease gpgv 65.9 kB]                              0% [Working]0% [Release.gpg gpgv 58.5 kB]                             0% [Working]0% [Release.gpg gpgv 1,609 B]                             0% [Working]0% [17 InRelease gpgv 20.8 kB]                              Hit:27 https://packagecloud.io/computology/apt-backport/ubuntu trusty InRelease
0% [17 InRelease gpgv 20.8 kB]                              0% [Working]0% [18 InRelease gpgv 15.4 kB]                              0% [Working]0% [19 InRelease gpgv 15.4 kB]                              0% [Working]0% [20 InRelease gpgv 15.5 kB]                              0% [Working]0% [Release.gpg gpgv 15.1 kB]                             Get:28 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease [23.2 kB]
0% [Release.gpg gpgv 15.1 kB] [28 InRelease 8,604 B/23.2 kB 37%]                                                                0% [Release.gpg gpgv 15.1 kB]                             0% [Working]0% [22 InRelease gpgv 37.1 kB]                              0% [Working]0% [27 InRelease gpgv 23.5 kB]                              0% [Working]0% [28 InRelease gpgv 23.2 kB]                              Ign:28 https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease
                              0% [Working]            Hit:30 https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu trusty InRelease
0% [Working]0% [30 InRelease gpgv 23.7 kB]                              20% [Working]             Fetched 23.2 kB in 1s (18.1 kB/s)
Reading package lists... 0%Reading package lists... 0%Reading package lists... 1%Reading package lists... 5%Reading package lists... 5%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 11%Reading package lists... 34%Reading package lists... 34%Reading package lists... 42%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 56%Reading package lists... 57%Reading package lists... 57%Reading package lists... 63%Reading package lists... 63%Reading package lists... 68%Reading package lists... 68%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 74%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 75%Reading package lists... 77%Reading package lists... 77%Reading package lists... 79%Reading package lists... 79%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 80%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 81%Reading package lists... 85%Reading package lists... 85%Reading package lists... 88%Reading package lists... 88%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 94%Reading package lists... 95%Reading package lists... 95%Reading package lists... 96%Reading package lists... 96%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 97%Reading package lists... 98%Reading package lists... 98%Reading package lists... 98%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... 99%Reading package lists... Done
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
W: GPG error: https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 6B05F25D762E3157
W: The repository 'https://packagecloud.io/github/git-lfs/ubuntu trusty InRelease' is not signed.
N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.
N: See apt-secure(8) manpage for repository creation and user configuration details.
W: There is no public key available for the following key IDs:
6B05F25D762E3157  
travis_time:end:1c91c7a7:start=1564473705594294208,finish=1564473708590011159,duration=2995716951[0Ktravis_fold:end:before_install.5[0Ktravis_fold:start:before_install.6[0Ktravis_time:start:25835854[0K$ sudo apt-get -y install docker-ce
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
The following additional packages will be installed:
  pigz
The following NEW packages will be installed:
  docker-ce pigz
0 upgraded, 2 newly installed, 0 to remove and 303 not upgraded.
Need to get 39.8 MB of archives.
After this operation, 201 MB of additional disk space will be used.
0% [Working]            Get:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu trusty/universe amd64 pigz amd64 2.3-2 [59.4 kB]
0% [1 pigz 9,728 B/59.4 kB 16%]                               10% [Working]             Get:2 https://download.docker.com/linux/ubuntu trusty/stable amd64 docker-ce amd64 18.06.3~ce~3-0~ubuntu [39.7 MB]
10% [2 docker-ce 0 B/39.7 MB 0%]41% [2 docker-ce 15.4 MB/39.7 MB 39%]74% [2 docker-ce 31.7 MB/39.7 MB 80%]                                     100% [Working]              Fetched 39.8 MB in 1s (28.5 MB/s)
Selecting previously unselected package pigz.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 93493 files and directories currently installed.)
Preparing to unpack .../archives/pigz_2.3-2_amd64.deb ...
Unpacking pigz (2.3-2) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../docker-ce_18.06.3~ce~3-0~ubuntu_amd64.deb ...
Unpacking docker-ce (18.06.3~ce~3-0~ubuntu) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
Setting up pigz (2.3-2) ...
Setting up docker-ce (18.06.3~ce~3-0~ubuntu) ...
Installing new version of config file /etc/bash_completion.d/docker ...
docker start/running, process 7651
travis_time:end:25835854:start=1564473708594415058,finish=1564473717351079219,duration=8756664161[0Ktravis_fold:end:before_install.6[0Ktravis_fold:start:before_install.7[0Ktravis_time:start:05801ed4[0K$ docker version
Client:
 Version:           18.06.3-ce
 API version:       1.38
 Go version:        go1.10.3
 Git commit:        d7080c1
 Built:             Wed Feb 20 02:27:13 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server:
 Engine:
  Version:          18.06.3-ce
  API version:      1.38 (minimum version 1.12)
  Go version:       go1.10.3
  Git commit:       d7080c1
  Built:            Wed Feb 20 02:25:38 2019
  OS/Arch:          linux/amd64
  Experimental:     false
travis_time:end:05801ed4:start=1564473717355860511,finish=1564473717431903451,duration=76042940[0Ktravis_fold:end:before_install.7[0Ktravis_fold:start:before_install.8[0Ktravis_time:start:1efe8062[0K$ docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.06.3-ce
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: 468a545b9edcd5932818eb9de8e72413e616e86e
runc version: a592beb5bc4c4092b1b1bac971afed27687340c5
init version: fec3683
Kernel Version: 4.4.0-101-generic
Operating System: Ubuntu 14.04.5 LTS
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 7.305GiB
Name: travis-job-d0956359-e700-4869-a179-73a78fd96c12
ID: DH3M:23FP:35CF:LCVT:ROBH:CV5W:C5W2:JSP4:7G7W:NH4L:6FOS:WJOW
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false

travis_time:end:1efe8062:start=1564473717436609760,finish=1564473717520945992,duration=84336232[0Ktravis_fold:end:before_install.8[0Ktravis_fold:start:before_install.9[0Ktravis_time:start:088ec594[0K$ make update-dependencies
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
3: Pulling from library/python

[1A[1K[K5ae19949497e: Pulling fs layer [1B
[1A[1K[Ked3d96a2798e: Pulling fs layer [1B
[1A[1K[Kf12136850781: Pulling fs layer [1B
[1A[1K[K1a9ad5d5550b: Pulling fs layer [1B
[1A[1K[K6f18049a0455: Pulling fs layer [1B
[1A[1K[Kce39fa9d79d1: Pulling fs layer [1B
[1A[1K[K3a91ffcf88ea: Pulling fs layer [1B
[1A[1K[Kee82cc8e1506: Pulling fs layer [1B
[1A[1K[Kf0fe55e0f617: Pulling fs layer [1B[6A[1K[K1a9ad5d5550b: Waiting [6B[5A[1K[K6f18049a0455: Waiting [5B[4A[1K[Kce39fa9d79d1: Waiting [4B[3A[1K[K3a91ffcf88ea: Waiting [3B[1A[1K[Kf0fe55e0f617: Waiting [1B[2A[1K[Kee82cc8e1506: Waiting [2B[9A[1K[K5ae19949497e: Downloading  506.5kB/50.38MB[9B[7A[1K[Kf12136850781: Downloading  101.7kB/9.978MB[7B[8A[1K[Ked3d96a2798e: Downloading  81.57kB/7.804MB[8B[7A[1K[Kf12136850781: Downloading  5.962MB/9.978MB[7B[9A[1K[K5ae19949497e: Downloading   11.2MB/50.38MB[9B[8A[1K[Ked3d96a2798e: Downloading  4.029MB/7.804MB[8B[7A[1K[Kf12136850781: Verifying Checksum [7B[7A[1K[Kf12136850781: Download complete [7B[8A[1K[Ked3d96a2798e: Verifying Checksum [8B[8A[1K[Ked3d96a2798e: Download complete [8B[9A[1K[K5ae19949497e: Downloading  21.88MB/50.38MB[9B[9A[1K[K5ae19949497e: Downloading  36.14MB/50.38MB[9B[9A[1K[K5ae19949497e: Downloading  46.83MB/50.38MB[9B[9A[1K[K5ae19949497e: Verifying Checksum [9B[9A[1K[K5ae19949497e: Download complete [9B[6A[1K[K1a9ad5d5550b: Downloading    518kB/51.77MB[6B[9A[1K[K5ae19949497e: Extracting  524.3kB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  539.3kB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  7.862MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  8.019MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  2.097MB/50.38MB[9B[6A[1K[K1a9ad5d5550b: Downloading   16.8MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  12.87MB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  25.75MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading   19.3MB/192.3MB[5B[4A[1K[Kce39fa9d79d1: Downloading  59.38kB/5.792MB[4B[6A[1K[K1a9ad5d5550b: Downloading  34.16MB/51.77MB[6B[4A[1K[Kce39fa9d79d1: Downloading  2.252MB/5.792MB[4B[9A[1K[K5ae19949497e: Extracting  3.146MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  27.37MB/192.3MB[5B[6A[1K[K1a9ad5d5550b: Downloading  43.09MB/51.77MB[6B[5A[1K[K6f18049a0455: Downloading  33.81MB/192.3MB[5B[4A[1K[Kce39fa9d79d1: Downloading  5.098MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Verifying Checksum [4B[4A[1K[Kce39fa9d79d1: Download complete [4B[9A[1K[K5ae19949497e: Extracting   3.67MB/50.38MB[9B[6A[1K[K1a9ad5d5550b: Downloading  48.87MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Verifying Checksum [6B[6A[1K[K1a9ad5d5550b: Download complete [6B[5A[1K[K6f18049a0455: Downloading  44.53MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  5.767MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  51.47MB/192.3MB[5B[5A[1K[K6f18049a0455: Downloading  62.21MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  8.389MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  69.74MB/192.3MB[5B[2A[1K[Kee82cc8e1506: Downloading     235B/235B[2B[3A[1K[K3a91ffcf88ea: Downloading  281.9kB/26.57MB[3B[9A[1K[K5ae19949497e: Extracting  9.437MB/50.38MB[9B[2A[1K[Kee82cc8e1506: Verifying Checksum [2B[2A[1K[Kee82cc8e1506: Download complete [2B[5A[1K[K6f18049a0455: Downloading  78.83MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Downloading  7.376MB/26.57MB[3B[9A[1K[K5ae19949497e: Extracting  10.49MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  86.81MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Downloading  16.62MB/26.57MB[3B[9A[1K[K5ae19949497e: Extracting  11.01MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  96.47MB/192.3MB[5B[3A[1K[K3a91ffcf88ea: Downloading   24.3MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Verifying Checksum [3B[3A[1K[K3a91ffcf88ea: Download complete [3B[9A[1K[K5ae19949497e: Extracting  11.53MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  103.5MB/192.3MB[5B[1A[1K[Kf0fe55e0f617: Downloading  19.65kB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Downloading  1.863MB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Verifying Checksum [1B[1A[1K[Kf0fe55e0f617: Download complete [1B[5A[1K[K6f18049a0455: Downloading  112.6MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  14.16MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  122.8MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  16.25MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  132.5MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  17.83MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  144.3MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  19.92MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  152.9MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  22.54MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  160.4MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  24.64MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  171.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Downloading  181.8MB/192.3MB[5B[9A[1K[K5ae19949497e: Extracting  26.21MB/50.38MB[9B[5A[1K[K6f18049a0455: Downloading  189.9MB/192.3MB[5B[5A[1K[K6f18049a0455: Verifying Checksum [5B[5A[1K[K6f18049a0455: Download complete [5B[9A[1K[K5ae19949497e: Extracting  30.93MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  36.18MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting   38.8MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  41.42MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  44.04MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  46.66MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  48.76MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  49.81MB/50.38MB[9B[9A[1K[K5ae19949497e: Extracting  50.38MB/50.38MB[9B[9A[1K[K5ae19949497e: Pull complete [9B[8A[1K[Ked3d96a2798e: Extracting   98.3kB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  1.475MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  5.505MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Extracting  7.804MB/7.804MB[8B[8A[1K[Ked3d96a2798e: Pull complete [8B[7A[1K[Kf12136850781: Extracting  131.1kB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  2.884MB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  8.913MB/9.978MB[7B[7A[1K[Kf12136850781: Extracting  9.978MB/9.978MB[7B[7A[1K[Kf12136850781: Pull complete [7B[6A[1K[K1a9ad5d5550b: Extracting  524.3kB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  4.719MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  8.913MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  13.63MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  17.83MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  19.92MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  22.02MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  23.59MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  25.17MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  27.26MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  30.41MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  32.51MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting   34.6MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  37.22MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  41.42MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  44.56MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  47.19MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  48.76MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  50.33MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  51.38MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Extracting  51.77MB/51.77MB[6B[6A[1K[K1a9ad5d5550b: Pull complete [6B[5A[1K[K6f18049a0455: Extracting  557.1kB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  4.456MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  8.356MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  10.03MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  11.14MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  12.26MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  13.37MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  14.48MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting   15.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  16.71MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  17.83MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  22.28MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  27.85MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  32.31MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  36.77MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  40.67MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  44.01MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  46.79MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  51.25MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  55.71MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  59.05MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  61.28MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  62.95MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  64.62MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  66.29MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  68.52MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  72.42MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  76.32MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  79.66MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting     83MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  86.34MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  89.69MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  93.03MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  97.48MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  101.9MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  105.3MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  109.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  114.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  117.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  120.9MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  124.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    127MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  130.4MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  133.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    137MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  139.3MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    142MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  143.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  148.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  153.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  163.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  168.8MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  173.8MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  177.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  179.9MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  182.7MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  185.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  188.3MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting    190MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  190.5MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  191.6MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  192.2MB/192.3MB[5B[5A[1K[K6f18049a0455: Extracting  192.3MB/192.3MB[5B[5A[1K[K6f18049a0455: Pull complete [5B[4A[1K[Kce39fa9d79d1: Extracting  65.54kB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting    983kB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting  4.719MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Extracting  5.792MB/5.792MB[4B[4A[1K[Kce39fa9d79d1: Pull complete [4B[3A[1K[K3a91ffcf88ea: Extracting  294.9kB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  4.129MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  6.488MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  8.847MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  11.21MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  13.86MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  16.81MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  20.05MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  22.71MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  25.66MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Extracting  26.57MB/26.57MB[3B[3A[1K[K3a91ffcf88ea: Pull complete [3B[2A[1K[Kee82cc8e1506: Extracting     235B/235B[2B[2A[1K[Kee82cc8e1506: Extracting     235B/235B[2B[2A[1K[Kee82cc8e1506: Pull complete [2B[1A[1K[Kf0fe55e0f617: Extracting  32.77kB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Extracting  786.4kB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Extracting  1.863MB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Extracting  1.863MB/1.863MB[1B[1A[1K[Kf0fe55e0f617: Pull complete [1BDigest: sha256:6eaf19442c358afc24834a6b17a3728a45c129de7703d8583392a138ecbdb092
Status: Downloaded newer image for python:3
 ---> 14a2caeca327
Step 2/5 : COPY ./webserver.py /
 ---> d4f90c1ab5dd
Step 3/5 : COPY ./entrypoint.sh /
 ---> 7615ccac576e
Step 4/5 : WORKDIR /opt
 ---> Running in 8c68b94d5af7
Removing intermediate container 8c68b94d5af7
 ---> ed58f916cd26
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Running in 45fc41437801
Removing intermediate container 45fc41437801
 ---> 773552566f4a
Successfully built 773552566f4a
Successfully tagged web:latest
travis_time:end:088ec594:start=1564473717525389137,finish=1564473737199262549,duration=19673873412[0Ktravis_fold:end:before_install.9[0KNo Gemfile found, skipping bundle install

travis_time:start:2d5ec262[0K$ make $TEST_TARGET
Sending build context to Docker daemon   5.12kB
Step 1/5 : FROM python:3
 ---> 14a2caeca327
Step 2/5 : COPY ./webserver.py /
 ---> Using cache
 ---> d4f90c1ab5dd
Step 3/5 : COPY ./entrypoint.sh /
 ---> Using cache
 ---> 7615ccac576e
Step 4/5 : WORKDIR /opt
 ---> Using cache
 ---> ed58f916cd26
Step 5/5 : ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
 ---> Using cache
 ---> 773552566f4a
Successfully built 773552566f4a
Successfully tagged web:latest
Sending build context to Docker daemon  37.89kB
Step 1/16 : FROM nginx:1.14.1
1.14.1: Pulling from library/nginx

[1A[1K[Ka5a6f2f73cd8: Pulling fs layer [1B
[1A[1K[K2343eb083a4e: Pulling fs layer [1B
[1A[1K[K251439d5b33c: Pulling fs layer [1B[2A[1K[K2343eb083a4e: Downloading  232.8kB/22.19MB[2B[1A[1K[K251439d5b33c: Downloading     204B/204B[1B[1A[1K[K251439d5b33c: Verifying Checksum [1B[1A[1K[K251439d5b33c: Download complete [1B[3A[1K[Ka5a6f2f73cd8: Downloading  233.5kB/22.49MB[3B[2A[1K[K2343eb083a4e: Downloading  10.14MB/22.19MB[2B[3A[1K[Ka5a6f2f73cd8: Downloading  8.502MB/22.49MB[3B[2A[1K[K2343eb083a4e: Verifying Checksum [2B[2A[1K[K2343eb083a4e: Download complete [2B[3A[1K[Ka5a6f2f73cd8: Downloading  20.93MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Verifying Checksum [3B[3A[1K[Ka5a6f2f73cd8: Download complete [3B[3A[1K[Ka5a6f2f73cd8: Extracting  229.4kB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  2.523MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  5.734MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  8.716MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  12.16MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  14.68MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  17.66MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  20.19MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting   21.1MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  21.56MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.25MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Extracting  22.49MB/22.49MB[3B[3A[1K[Ka5a6f2f73cd8: Pull complete [3B[2A[1K[K2343eb083a4e: Extracting  229.4kB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  4.358MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  8.946MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  13.53MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  17.43MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  20.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Extracting  22.19MB/22.19MB[2B[2A[1K[K2343eb083a4e: Pull complete [2B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Extracting     204B/204B[1B[1A[1K[K251439d5b33c: Pull complete [1BDigest: sha256:32fdf92b4e986e109e4db0865758020cb0c3b70d6ba80d02fe87bad5cc3dc228
Status: Downloaded newer image for nginx:1.14.1
 ---> 5f2d4477b7ea
Step 2/16 : LABEL maintainer="Jason Wilder mail@jasonwilder.com"
 ---> Running in a9d6429efb0e
Removing intermediate container a9d6429efb0e
 ---> 10a03427869e
Step 3/16 : RUN apt-get update  && apt-get install -y -q --no-install-recommends     ca-certificates     wget  && apt-get clean  && rm -r /var/lib/apt/lists/*
 ---> Running in e9242d91575a
Get:1 http://security-cdn.debian.org/debian-security stretch/updates InRelease [94.3 kB]
Ign:2 http://cdn-fastly.deb.debian.org/debian stretch InRelease
Get:3 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 Packages [500 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch-updates InRelease [91.0 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch Release [118 kB]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch-updates/main amd64 Packages [27.4 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch Release.gpg [2434 B]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 Packages [7082 kB]
Fetched 7915 kB in 1s (4456 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0 libnettle6
  libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl
Suggested packages:
  gnutls-bin
Recommended packages:
  publicsuffix
The following NEW packages will be installed:
  ca-certificates libffi6 libgmp10 libgnutls30 libhogweed4 libidn11 libidn2-0
  libnettle6 libp11-kit0 libpsl5 libtasn1-6 libunistring0 openssl wget
0 upgraded, 14 newly installed, 0 to remove and 17 not upgraded.
Need to get 3885 kB of archives.
After this operation, 10.6 MB of additional disk space will be used.
Get:1 http://security-cdn.debian.org/debian-security stretch/updates/main amd64 openssl amd64 1.1.0k-1~deb9u1 [747 kB]
Get:2 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgmp10 amd64 2:6.1.2+dfsg-1 [253 kB]
Get:3 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libnettle6 amd64 3.3-1+b2 [192 kB]
Get:4 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libhogweed4 amd64 3.3-1+b2 [136 kB]
Get:5 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn11 amd64 1.33-1 [115 kB]
Get:6 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libffi6 amd64 3.2.1-6 [20.4 kB]
Get:7 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libp11-kit0 amd64 0.23.3-2 [111 kB]
Get:8 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libtasn1-6 amd64 4.10-1.1+deb9u1 [50.6 kB]
Get:9 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libgnutls30 amd64 3.5.8-5+deb9u4 [896 kB]
Get:10 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libunistring0 amd64 0.9.6+really0.9.3-0.1 [279 kB]
Get:11 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libidn2-0 amd64 0.16-1+deb9u1 [60.7 kB]
Get:12 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 libpsl5 amd64 0.17.0-3 [41.8 kB]
Get:13 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 wget amd64 1.18-5+deb9u3 [800 kB]
Get:14 http://cdn-fastly.deb.debian.org/debian stretch/main amd64 ca-certificates all 20161130+nmu1+deb9u1 [182 kB]
[91mdebconf: delaying package configuration, since apt-utils is not installed
[0mFetched 3885 kB in 0s (7163 kB/s)
Selecting previously unselected package libgmp10:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 7026 files and directories currently installed.)
Preparing to unpack .../00-libgmp10_2%3a6.1.2+dfsg-1_amd64.deb ...
Unpacking libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Selecting previously unselected package libnettle6:amd64.
Preparing to unpack .../01-libnettle6_3.3-1+b2_amd64.deb ...
Unpacking libnettle6:amd64 (3.3-1+b2) ...
Selecting previously unselected package libhogweed4:amd64.
Preparing to unpack .../02-libhogweed4_3.3-1+b2_amd64.deb ...
Unpacking libhogweed4:amd64 (3.3-1+b2) ...
Selecting previously unselected package libidn11:amd64.
Preparing to unpack .../03-libidn11_1.33-1_amd64.deb ...
Unpacking libidn11:amd64 (1.33-1) ...
Selecting previously unselected package libffi6:amd64.
Preparing to unpack .../04-libffi6_3.2.1-6_amd64.deb ...
Unpacking libffi6:amd64 (3.2.1-6) ...
Selecting previously unselected package libp11-kit0:amd64.
Preparing to unpack .../05-libp11-kit0_0.23.3-2_amd64.deb ...
Unpacking libp11-kit0:amd64 (0.23.3-2) ...
Selecting previously unselected package libtasn1-6:amd64.
Preparing to unpack .../06-libtasn1-6_4.10-1.1+deb9u1_amd64.deb ...
Unpacking libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Selecting previously unselected package libgnutls30:amd64.
Preparing to unpack .../07-libgnutls30_3.5.8-5+deb9u4_amd64.deb ...
Unpacking libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Selecting previously unselected package libunistring0:amd64.
Preparing to unpack .../08-libunistring0_0.9.6+really0.9.3-0.1_amd64.deb ...
Unpacking libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Selecting previously unselected package libidn2-0:amd64.
Preparing to unpack .../09-libidn2-0_0.16-1+deb9u1_amd64.deb ...
Unpacking libidn2-0:amd64 (0.16-1+deb9u1) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../10-libpsl5_0.17.0-3_amd64.deb ...
Unpacking libpsl5:amd64 (0.17.0-3) ...
Selecting previously unselected package wget.
Preparing to unpack .../11-wget_1.18-5+deb9u3_amd64.deb ...
Unpacking wget (1.18-5+deb9u3) ...
Selecting previously unselected package openssl.
Preparing to unpack .../12-openssl_1.1.0k-1~deb9u1_amd64.deb ...
Unpacking openssl (1.1.0k-1~deb9u1) ...
Selecting previously unselected package ca-certificates.
Preparing to unpack .../13-ca-certificates_20161130+nmu1+deb9u1_all.deb ...
Unpacking ca-certificates (20161130+nmu1+deb9u1) ...
Setting up libnettle6:amd64 (3.3-1+b2) ...
Setting up libtasn1-6:amd64 (4.10-1.1+deb9u1) ...
Setting up libgmp10:amd64 (2:6.1.2+dfsg-1) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Setting up libunistring0:amd64 (0.9.6+really0.9.3-0.1) ...
Setting up openssl (1.1.0k-1~deb9u1) ...
Setting up libffi6:amd64 (3.2.1-6) ...
Setting up ca-certificates (20161130+nmu1+deb9u1) ...
debconf: unable to initialize frontend: Dialog
debconf: (TERM is not set, so the dialog frontend is not usable.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the Term::ReadLine module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.24.1 /usr/local/share/perl/5.24.1 /usr/lib/x86_64-linux-gnu/perl5/5.24 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.24 /usr/share/perl/5.24 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base .) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm line 7.)
debconf: falling back to frontend: Teletype
Updating certificates in /etc/ssl/certs...
151 added, 0 removed; done.
Setting up libidn11:amd64 (1.33-1) ...
Setting up libidn2-0:amd64 (0.16-1+deb9u1) ...
Setting up libpsl5:amd64 (0.17.0-3) ...
Setting up libhogweed4:amd64 (3.3-1+b2) ...
Setting up libp11-kit0:amd64 (0.23.3-2) ...
Setting up libgnutls30:amd64 (3.5.8-5+deb9u4) ...
Setting up wget (1.18-5+deb9u3) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Processing triggers for ca-certificates (20161130+nmu1+deb9u1) ...
Updating certificates in /etc/ssl/certs...
0 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d...
done.
Removing intermediate container e9242d91575a
 ---> b8989f2570df
Step 4/16 : RUN echo "daemon off;" >> /etc/nginx/nginx.conf  && sed -i 's/worker_processes  1/worker_processes  auto/' /etc/nginx/nginx.conf
 ---> Running in 8935eb5f7917
Removing intermediate container 8935eb5f7917
 ---> 16207a7fb07f
Step 5/16 : ADD https://github.com/jwilder/forego/releases/download/v0.16.1/forego /usr/local/bin/forego
[1K[KDownloading    103kB/9.763MB[1K[KDownloading  1.252MB/9.763MB[1K[KDownloading  5.782MB/9.763MB[1K[KDownloading  9.763MB/9.763MB
 ---> 750bf580b5c7
Step 6/16 : RUN chmod u+x /usr/local/bin/forego
 ---> Running in 9c590b7121b0
Removing intermediate container 9c590b7121b0
 ---> 3150b4e83b10
Step 7/16 : ENV DOCKER_GEN_VERSION 0.7.4
 ---> Running in 66dda8216543
Removing intermediate container 66dda8216543
 ---> c73b995cf1db
Step 8/16 : RUN wget https://github.com/jwilder/docker-gen/releases/download/$DOCKER_GEN_VERSION/docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && tar -C /usr/local/bin -xvzf docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz  && rm /docker-gen-linux-amd64-$DOCKER_GEN_VERSION.tar.gz
 ---> Running in 784cc42029ed
[91m--2019-07-30 08:02:34--  https://github.com/jwilder/docker-gen/releases/download/0.7.4/docker-gen-linux-amd64-0.7.4.tar.gz
[0m[91mResolving github.com (github.com)... [0m[91m140.82.113.4
Connecting to github.com (github.com)|140.82.113.4|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m302 Found
Location: https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190730%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190730T080234Z&X-Amz-Expires=300&X-Amz-Signature=122ff3be4fb59f7db8c1ae11dbfcd772a83d0605a331caa9f52e7547cd447e38&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream [following]
[0m[91m--2019-07-30 08:02:34--  https://github-production-release-asset-2e65be.s3.amazonaws.com/17762549/9bf348a6-f93a-11e7-9ff0-34e8263a4acb?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190730%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190730T080234Z&X-Amz-Expires=300&X-Amz-Signature=122ff3be4fb59f7db8c1ae11dbfcd772a83d0605a331caa9f52e7547cd447e38&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Ddocker-gen-linux-amd64-0.7.4.tar.gz&response-content-type=application%2Foctet-stream
Resolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... [0m[91m52.216.97.163
Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.97.163|:443... [0m[91mconnected.
[0m[91mHTTP request sent, awaiting response... [0m[91m200 OK
Length: 3424683 (3.3M) [application/octet-stream]
[0m[91mSaving to: 'docker-gen-linux-amd64-0.7.4.tar.gz'

     0K .......... ......[0m[91m.... .......... ...[0m[91m....... ..........  1% 1.60M 2s[0m[91m
    50K .......... ......[0m[91m.[0m[91m... .......... ...[0m[91m.[0m[91m...... ..[0m[91m........  2% 1.58M 2s
   100K .[0m[91m......... ........[0m[91m.. .......... .....[0m[91m..... ..........  4% 1.77M[0m[91m 2s[0m[91m
   150K[0m[91m [0m[91m.[0m[91m.[0m[91m........ .........[0m[91m. .......... ......[0m[91m.... ..........  5% 16.4M 1s
   200K .......... .......... .......... .......... ..........  7%  281M 1s
   250K ....[0m[91m...... .......... .[0m[91m......... .......[0m[91m... ..........  8% 1.90M 1s
   300K .......... .......... ..[0m[91m........ .........[0m[91m. .......... 10% 42.9M 1s
   350K ......[0m[91m.... .......... ...[0m[91m....... ..........[0m[91m .......... 11% 24.0M 1s
   400K .......... .......... .......... .......... .[0m[91m......... 13%  170M 1s
   450K ........[0m[91m.. .......... .......... .......... .......... 14%  115M 1s
   500K .........[0m[91m. .......... .......... .......... .......... 16%  176M 1s
   550K .......... .......... .......... .......... ....[0m[91m...... 17% 1.94M 1s
   600K .......... .......... .......[0m[91m... .......... .......... 19%  210M 1s
   650K .......... .......... .........[0m[91m. .......... .......... 20%  129M 1s
   700K ....[0m[91m...... ..[0m[91m.[0m[91m....... .......... .......... .......... 22%  114M 1s
   750K .......... ....[0m[91m...... ..........[0m[91m .[0m[91m.........[0m[91m .......... 23% 31.7M 0s
   800K .......... .....[0m[91m..... .......... .......... .......... 25% 79.0M 0s
   850K .......... .......... .......... .......... .......... 26%  282M 0s
   900K .......... .......... .......... ....[0m[91m...... .......... 28%  183M 0s
   950K .......... .......... .......... .......... .......... 29%  198M 0s
  1000K .......... .......... .......... .......... .......... 31%  217M 0s
  1050K .......... .......... .......... .......... .......... 32%  336M 0s
  1100K .......... .......... .......... .......... .......... 34%  297M 0s
  1150K .......... .......... .......... .......... .......... 35%  249M 0s
  1200K ......[0m[91m.... .......... ..[0m[91m........ .......... .......... 37% 1.97M 0s
  1250K .......... .......... ....[0m[91m...... ..[0m[91m........ .......... 38% 81.1M 0s
  1300K ........[0m[91m.. .......... .......... .......... ..[0m[91m........ 40%  108M 0s
  1350K .......... .......... .......... .......... .......... 41%  190M[0m[91m 0s
  1400K .......... .......... .......[0m[91m... .......... .......... 43%  136M 0s
  1450K .......... .......... ........[0m[91m.. .......... .......... 44%  164M 0s
  1500K ...[0m[91m....... .......... .......... .......... .......... 46%  186M 0s
  1550K .......... .......... ..........[0m[91m ........[0m[91m.. .......... 47%  109M 0s
  1600K .......... .....[0m[91m..... .......... .......... .......... 49%  182M 0s
  1650K .......... .......... .......... .......... ........[0m[91m.. 50%  181M 0s
  1700K .......... .......... .......... ...[0m[91m....... .......... 52%  213M 0s
  1750K .......... .......[0m[91m... .......... .......... .......... 53%[0m[91m  116M 0s
  1800K .......... .......... .......... .......... .......... 55%  265M 0s
  1850K .......... .......... .......... .......... .......... 56%  175M 0s
  1900K .......... .......... .......... .......... .......... 58%  259M 0s
  1950K .......... .......... .......... .......... .......... 59%  281M 0s
  2000K .......... .......... .......... ..........[0m[91m .......... 61%  120M 0s
  2050K ......[0m[91m.... .......... ..[0m[91m........ ........[0m[91m.. .......... 62%  110M 0s
  2100K .......... .......... .......... .......... .......... 64%  325M 0s
  2150K .......... .......... .......... .......... .......... 65%  462M 0s
  2200K .......... .......... .......... .......... .......... 67%  401M 0s
  2250K .......... .......... .......... .......... .......... 68%  500M 0s
  2300K .......... .......... .......... .......... .......... 70%  449M 0s
  2350K .......... .......... .......... .......... .......... 71%  473M 0s
  2400K .......... .......... .......... ..........[0m[91m .......... 73% 2.14M 0s
  2450K ......[0m[91m.... .......... .......... ........[0m[91m.. .......... 74%  117M 0s
  2500K ....[0m[91m...... .......... .......... ......[0m[91m.... .......... 76%  110M 0s
  2550K .......... ........[0m[91m.[0m[91m. .......... ....[0m[91m...... .......... 77%  126M 0s[0m[91m
  2600K ...[0m[91m..[0m[91m..... ......[0m[91m..[0m[91m.. [0m[91m.[0m[91m..[0m[91m.[0m[91m....[0m[91m.. ..[0m[91m.[0m[91m....... .........[0m[91m. 79% 46.2M 0s
  2650K ....[0m[91m......[0m[91m .[0m[91m.....[0m[91m...[0m[91m.[0m[91m ..[0m[91m........[0m[91m .......... ......[0m[91m.[0m[91m... 80% 36.6M 0s
  2700K .......... ..[0m[91m.......[0m[91m. .....[0m[91m...[0m[91m.. .[0m[91m.....[0m[91m.[0m[91m.[0m[91m.[0m[91m.[0m[91m .......... 82% 32.8M 0s
  2750K .......... .......... .......... .......... .......... 83%  246M 0s
  2800K .......... .......... .......... .......... .......... 85%  371M 0s
  2850K .......... .......... .......... .......... .......... 86%  478M 0s
  2900K .......... .......... .......... .......... .......... 88%  483M 0s
  2950K .......... .......... .......... .......... .......... 89%  483M 0s
  3000K .......... .......... .......... .......... .......... 91%  411M 0s
  3050K .......... .......... .......... .......... .......... 92%  492M 0s
  3100K .......... .......... .......... .......... .......... 94%  428M 0s
  3150K .......... .......... .......... .......... .......... 95%  501M 0s
  3200K .......... .......... .......... .......... .......... 97%  382M 0s
  3250K .......... .......... .......... .......... .......... 98%  427M 0s
  3300K .......... .......... .......... .......... ....      100%  449M=0.2s

2019-07-30 08:02:34 (15.4 MB/s) - 'docker-gen-linux-amd64-0.7.4.tar.gz' saved [3424683/3424683]

[0mdocker-gen
Removing intermediate container 784cc42029ed
 ---> d2e0d9d4211e
Step 9/16 : COPY network_internal.conf /etc/nginx/
 ---> 966994fad839
Step 10/16 : COPY . /app/
 ---> 345b28f6cdb9
Step 11/16 : WORKDIR /app/
 ---> Running in ec07973cd89f
Removing intermediate container ec07973cd89f
 ---> 035e2ba8a772
Step 12/16 : ENV DOCKER_HOST unix:///tmp/docker.sock
 ---> Running in d0fb49b0ffa0
Removing intermediate container d0fb49b0ffa0
 ---> 05c4fb05935e
Step 13/16 : ENV RESOLVERS="127.0.0.11 valid=5s"
 ---> Running in 896f1a2b4269
Removing intermediate container 896f1a2b4269
 ---> 0fa56d8c9cdc
Step 14/16 : VOLUME ["/etc/nginx/certs", "/etc/nginx/dhparam"]
 ---> Running in 1e07645cd656
Removing intermediate container 1e07645cd656
 ---> 33899dbc20f5
Step 15/16 : ENTRYPOINT ["/app/docker-entrypoint.sh"]
 ---> Running in 82fb5f1f18a7
Removing intermediate container 82fb5f1f18a7
 ---> 7af7f2a03bf5
Step 16/16 : CMD ["forego", "start", "-r"]
 ---> Running in 2a3d4c6a88f4
Removing intermediate container 2a3d4c6a88f4
 ---> bd15a7f46620
Successfully built bd15a7f46620
Successfully tagged jwilder/nginx-proxy:test
> Building nginx-proxy-tester image...
Sending build context to Docker daemon  11.26kB
Step 1/6 : FROM python:2.7-alpine
2.7-alpine: Pulling from library/python

[1A[1K[K050382585609: Pulling fs layer [1B
[1A[1K[K39e8b6a82737: Pulling fs layer [1B
[1A[1K[K9c3480ede676: Pulling fs layer [1B
[1A[1K[K7a50c76dc4da: Pulling fs layer [1B[1A[1K[K7a50c76dc4da: Waiting [1B[2A[1K[K9c3480ede676: Downloading    185kB/18.35MB[2B[3A[1K[K39e8b6a82737: Downloading  3.222kB/301.7kB[3B[4A[1K[K050382585609: Downloading  28.02kB/2.79MB[4B[3A[1K[K39e8b6a82737: Downloading  301.7kB/301.7kB[3B[3A[1K[K39e8b6a82737: Verifying Checksum [3B[3A[1K[K39e8b6a82737: Download complete [3B[2A[1K[K9c3480ede676: Downloading  9.845MB/18.35MB[2B[4A[1K[K050382585609: Verifying Checksum [4B[4A[1K[K050382585609: Download complete [4B[4A[1K[K050382585609: Extracting  32.77kB/2.79MB[4B[2A[1K[K9c3480ede676: Verifying Checksum [2B[2A[1K[K9c3480ede676: Download complete [2B[4A[1K[K050382585609: Extracting    852kB/2.79MB[4B[4A[1K[K050382585609: Extracting   2.79MB/2.79MB[4B[4A[1K[K050382585609: Pull complete [4B[3A[1K[K39e8b6a82737: Extracting  32.77kB/301.7kB[3B[1A[1K[K7a50c76dc4da: Downloading  19.81kB/1.86MB[1B[3A[1K[K39e8b6a82737: Extracting  301.7kB/301.7kB[3B[3A[1K[K39e8b6a82737: Extracting  301.7kB/301.7kB[3B[1A[1K[K7a50c76dc4da: Downloading   1.86MB/1.86MB[1B[1A[1K[K7a50c76dc4da: Verifying Checksum [1B[1A[1K[K7a50c76dc4da: Download complete [1B[3A[1K[K39e8b6a82737: Pull complete [3B[2A[1K[K9c3480ede676: Extracting  196.6kB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  2.163MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  5.308MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  9.044MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  12.19MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  15.14MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting   17.5MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  18.28MB/18.35MB[2B[2A[1K[K9c3480ede676: Extracting  18.35MB/18.35MB[2B[2A[1K[K9c3480ede676: Pull complete [2B[1A[1K[K7a50c76dc4da: Extracting  32.77kB/1.86MB[1B[1A[1K[K7a50c76dc4da: Extracting  1.081MB/1.86MB[1B[1A[1K[K7a50c76dc4da: Extracting   1.86MB/1.86MB[1B[1A[1K[K7a50c76dc4da: Pull complete [1BDigest: sha256:c17fe9d9be5a545a52f00a1e9258f83ceed4484fb986f37ca019e55a24b28271
Status: Downloaded newer image for python:2.7-alpine
 ---> f101ac3346a7
Step 2/6 : RUN apk add --update bash openssl curl && rm -rf /var/cache/apk/*
 ---> Running in e112c57963cb
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/community/x86_64/APKINDEX.tar.gz
(1/5) Installing bash (5.0.0-r0)
Executing bash-5.0.0-r0.post-install
(2/5) Installing nghttp2-libs (1.38.0-r0)
(3/5) Installing libcurl (7.65.1-r0)
(4/5) Installing curl (7.65.1-r0)
(5/5) Installing openssl (1.1.1c-r0)
Executing busybox-1.30.1-r2.trigger
OK: 20 MiB in 38 packages
Removing intermediate container e112c57963cb
 ---> 127acf78a147
Step 3/6 : COPY python-requirements.txt /requirements.txt
 ---> 0704d391dff5
Step 4/6 : RUN pip install -r /requirements.txt
 ---> Running in 3475a88d9dce
[91mDEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
[0mCollecting backoff==1.3.2 (from -r /requirements.txt (line 1))
  Downloading https://files.pythonhosted.org/packages/7a/ba/5786dfda66ee5e4d1fe09164a1e52c68cdb93205c81b8c0f22b4ccb1a1e7/backoff-1.3.2.tar.gz
Collecting docker-compose==1.11.2 (from -r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/66/d4/2b69141a0b5e685659891c04748bbb414bef67c79a46333d915fbda3731d/docker_compose-1.11.2-py2.py3-none-any.whl (85kB)
Collecting docker==2.1.0 (from -r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/42/67/415e39720bfc3ddcb07eb7007598b0f301246c168d3ac0e8cb5a625a1f9c/docker-2.1.0-py2.py3-none-any.whl (105kB)
Collecting pytest==3.0.5 (from -r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/dd/28/4abc547194d8e6ff93d3ef186cb809a413d719cdc21e524af08fe986f7c2/pytest-3.0.5-py2.py3-none-any.whl (170kB)
Collecting requests==2.11.1 (from -r /requirements.txt (line 5))
  Downloading https://files.pythonhosted.org/packages/ea/03/92d3278bf8287c5caa07dbd9ea139027d5a3592b0f4d14abf072f890fab2/requests-2.11.1-py2.py3-none-any.whl (514kB)
Collecting PyYAML<4,>=3.10 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/9e/a3/1d13970c3f36777c583f136c136f804d70f500168edc1edea6daa7200769/PyYAML-3.13.tar.gz (270kB)
Collecting backports.ssl-match-hostname>=3.5; python_version < "3.5" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/ff/2b/8265224812912bc5b7a607c44bf7b027554e1b9775e9ee0de8032e3de4b2/backports.ssl_match_hostname-3.7.0.1.tar.gz
Collecting dockerpty<0.5,>=0.4.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/8d/ee/e9ecce4c32204a6738e0a5d5883d3413794d7498fe8b06f44becc028d3ba/dockerpty-0.4.1.tar.gz
Collecting six<2,>=1.3.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl
Collecting enum34<2,>=1.0.4; python_version < "3.4" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/db/e56e6b4bbac7c4a06de1c50de6fe1ef3810018ae11732a50f15f62c7d050/enum34-1.1.6-py2-none-any.whl
Collecting colorama<0.4,>=0.3.7 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/db/c8/7dcf9dbcb22429512708fe3a547f8b6101c0d02137acbd892505aee57adf/colorama-0.3.9-py2.py3-none-any.whl
Collecting ipaddress>=1.0.16; python_version < "3.3" (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/fc/d0/7fc3a811e011d4b388be48a0e381db8d990042df54aa4ef4599a31d39853/ipaddress-1.0.22-py2.py3-none-any.whl
Collecting websocket-client<1.0,>=0.32.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/29/19/44753eab1fdb50770ac69605527e8859468f3c0fd7dc5a76dd9c4dbd7906/websocket_client-0.56.0-py2.py3-none-any.whl (200kB)
Collecting cached-property<2,>=1.2.0 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/3b/86/85c1be2e8db9e13ef9a350aecd6dea292bd612fa288c2f40d035bb750ded/cached_property-1.5.1-py2.py3-none-any.whl
Collecting docopt<0.7,>=0.6.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz
Collecting jsonschema<3,>=2.5.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/77/de/47e35a97b2b05c2fadbec67d44cfcdcd09b8086951b331d82de90d2912da/jsonschema-2.6.0-py2.py3-none-any.whl
Collecting texttable<0.9,>=0.8.1 (from docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/74/49/23d944a6f7d4dd20846b2df2914fe108c96a253567c140c416edbf270f80/texttable-0.8.8.tar.gz
Collecting docker-pycreds>=0.2.1 (from docker==2.1.0->-r /requirements.txt (line 3))
  Downloading https://files.pythonhosted.org/packages/f5/e8/f6bd1eee09314e7e6dee49cbe2c5e22314ccdb38db16c9fc72d2fa80d054/docker_pycreds-0.4.0-py2.py3-none-any.whl
Collecting py>=1.4.29 (from pytest==3.0.5->-r /requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/76/bc/394ad449851729244a97857ee14d7cba61ddb268dce3db538ba2f2ba1f0f/py-1.8.0-py2.py3-none-any.whl (83kB)
Collecting functools32; python_version == "2.7" (from jsonschema<3,>=2.5.1->docker-compose==1.11.2->-r /requirements.txt (line 2))
  Downloading https://files.pythonhosted.org/packages/c5/60/6ac26ad05857c601308d8fb9e87fa36d0ebf889423f47c3502ef034365db/functools32-3.2.3-2.tar.gz
Building wheels for collected packages: backoff, PyYAML, backports.ssl-match-hostname, dockerpty, docopt, texttable, functools32
  Building wheel for backoff (setup.py): started
  Building wheel for backoff (setup.py): finished with status 'done'
  Created wheel for backoff: filename=backoff-1.3.2-cp27-none-any.whl size=7482 sha256=e84a038df8316871b858f8fac8c2eea376d9c5eec73c6db7686686c8585de57c
  Stored in directory: /root/.cache/pip/wheels/fc/d8/34/d2bccc8e1a15f611dbd606c69e5d027b62dfcf922fdf8e396d
  Building wheel for PyYAML (setup.py): started
  Building wheel for PyYAML (setup.py): finished with status 'done'
  Created wheel for PyYAML: filename=PyYAML-3.13-cp27-cp27mu-linux_x86_64.whl size=43810 sha256=afad5a2de9b0aff64f20186a61eb4e34ff373e458a8856d82e83aafcec633842
  Stored in directory: /root/.cache/pip/wheels/ad/da/0c/74eb680767247273e2cf2723482cb9c924fe70af57c334513f
  Building wheel for backports.ssl-match-hostname (setup.py): started
  Building wheel for backports.ssl-match-hostname (setup.py): finished with status 'done'
  Created wheel for backports.ssl-match-hostname: filename=backports.ssl_match_hostname-3.7.0.1-py2.py3-none-any.whl size=6738 sha256=7fcc9f1444af775710668a0e3865a03588b96ba84bcb48a62e1999e522afda1b
  Stored in directory: /root/.cache/pip/wheels/f1/ad/d7/c184cf1ef67b07f98565dc52f91ed4f9a759b7b46674b2fd76
  Building wheel for dockerpty (setup.py): started
  Building wheel for dockerpty (setup.py): finished with status 'done'
  Created wheel for dockerpty: filename=dockerpty-0.4.1-cp27-none-any.whl size=16606 sha256=716e5b62e927505e56a769c03ed98ac774dd1e0344b5852d9259e9b06b57deb6
  Stored in directory: /root/.cache/pip/wheels/e5/1e/86/bd0a97a0907c6c654af654d5875d1d4383dd1f575f77cee4aa
  Building wheel for docopt (setup.py): started
  Building wheel for docopt (setup.py): finished with status 'done'
  Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13704 sha256=d0bf0a4c875fdcc984e13c373649f8ef49e322ad757bf85b1b4e4ea36c8b8373
  Stored in directory: /root/.cache/pip/wheels/9b/04/dd/7daf4150b6d9b12949298737de9431a324d4b797ffd63f526e
  Building wheel for texttable (setup.py): started
  Building wheel for texttable (setup.py): finished with status 'done'
  Created wheel for texttable: filename=texttable-0.8.8-cp27-none-any.whl size=9810 sha256=4b48c590cb4a06f6a300d885c74c6b728f0c7a452db18a02f5b255b734ac05da
  Stored in directory: /root/.cache/pip/wheels/e6/50/66/cffbd36db351677a36e03cc8f071e519cbf6a907ef9bad117d
  Building wheel for functools32 (setup.py): started
  Building wheel for functools32 (setup.py): finished with status 'done'
  Created wheel for functools32: filename=functools32-3.2.3.post2-cp27-none-any.whl size=14558 sha256=7e4824659d9e9bd96fd05d8a71dff4225a048183b960affb1b371ad0e4fd78a5
  Stored in directory: /root/.cache/pip/wheels/b5/18/32/77a1030457155606ba5e3ec3a8a57132b1a04b1c4f765177b2
Successfully built backoff PyYAML backports.ssl-match-hostname dockerpty docopt texttable functools32
Installing collected packages: backoff, PyYAML, backports.ssl-match-hostname, six, dockerpty, enum34, websocket-client, requests, ipaddress, docker-pycreds, docker, colorama, cached-property, docopt, functools32, jsonschema, texttable, docker-compose, py, pytest
Successfully installed PyYAML-3.13 backoff-1.3.2 backports.ssl-match-hostname-3.7.0.1 cached-property-1.5.1 colorama-0.3.9 docker-2.1.0 docker-compose-1.11.2 docker-pycreds-0.4.0 dockerpty-0.4.1 docopt-0.6.2 enum34-1.1.6 functools32-3.2.3.post2 ipaddress-1.0.22 jsonschema-2.6.0 py-1.8.0 pytest-3.0.5 requests-2.11.1 six-1.12.0 texttable-0.8.8 websocket-client-0.56.0
Removing intermediate container 3475a88d9dce
 ---> 99ae132c467e
Step 5/6 : WORKDIR /test
 ---> Running in e984092bed24
Removing intermediate container e984092bed24
 ---> faf34168a535
Step 6/6 : ENTRYPOINT ["pytest"]
 ---> Running in d1cd0f8521d1
Removing intermediate container d1cd0f8521d1
 ---> 2b372435fa4b
Successfully built 2b372435fa4b
Successfully tagged nginx-proxy-tester:latest
[1m============================= test session starts ==============================[0m
platform linux2 -- Python 2.7.16, pytest-3.0.5, py-1.8.0, pluggy-0.4.0 -- /usr/local/bin/python
rootdir: /home/travis/build/jwilder/nginx-proxy/test, inifile: pytest.ini
[1mcollecting 0 items[0m[1mcollecting 3 items[0m[1mcollecting 5 items[0m[1mcollecting 6 items[0m[1mcollecting 8 items[0m[1mcollecting 14 items[0m[1mcollecting 17 items[0m[1mcollecting 20 items[0m[1mcollecting 24 items[0m[1mcollecting 40 items[0m[1mcollecting 47 items[0m[1mcollecting 52 items[0m[1mcollecting 56 items[0m[1mcollecting 59 items[0m[1mcollecting 63 items[0m[1mcollecting 66 items[0m[1mcollecting 69 items[0m[1mcollecting 71 items[0m[1mcollecting 73 items[0m[1mcollecting 85 items[0m[1mcollecting 97 items[0m[1mcollecting 98 items[0m[1mcollecting 99 items[0m[1mcollecting 100 items[0m[1mcollecting 103 items[0m[1mcollecting 104 items[0m[1mcollecting 109 items[0m[1mcollecting 112 items[0m[1mcollecting 114 items[0m[1mcollecting 117 items[0m[1mcollecting 123 items[0m[1mcollecting 129 items[0m[1mcollected 129 items 
[0m
test_DOCKER_HOST_unix_socket.py::test_unknown_virtual_host [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web1 [31mFAILED[0m
test_DOCKER_HOST_unix_socket.py::test_forwards_to_web2 [31mFAILED[0m
test_composev2.py::test_unknown_virtual_host [31mFAILED[0m
test_composev2.py::test_forwards_to_whoami [31mFAILED[0m
test_default-host.py::test_fallback_on_default [31mFAILED[0m
test_events.py::test_nginx_proxy_behavior_when_alone [31mFAILED[0m
test_events.py::test_new_container_is_detected [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv4 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv4 [31mFAILED[0m
test_ipv6.py::test_unknown_virtual_host_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web1_ipv6 [31mFAILED[0m
test_ipv6.py::test_forwards_to_web2_ipv6 [31mFAILED[0m
test_multiple-hosts.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_multiple-hosts.py::test_webA_is_forwarded [31mFAILED[0m
test_multiple-hosts.py::test_webB_is_forwarded [31mFAILED[0m
test_multiple-networks.py::test_unknown_virtual_host [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web1 [31mFAILED[0m
test_multiple-networks.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_unknown_virtual_host [31mFAILED[0m
test_nominal.py::test_forwards_to_web1 [31mFAILED[0m
test_nominal.py::test_forwards_to_web2 [31mFAILED[0m
test_nominal.py::test_ipv6_is_disabled_by_default [32mPASSED[0m
test_wildcard_host.py::test_wildcard_prefix[f00.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[bar.nginx-proxy.test-81] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.f00-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[test.nginx-proxy.bar-82] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[unexpected.nginx-proxy.tld] [31mFAILED[0m
test_wildcard_host.py::test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] [31mFAILED[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_301 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_delete_cert_and_restart_reverseproxy [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_unknown_virtual_host_is_still_503 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_http_web_is_now_200 [33mxfail[0m
stress_tests/test_deleted_cert/test_restart_while_missing_cert.py::test_https_web_is_now_broken_since_there_is_no_cert [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_default_nginx_welcome_page_should_not_be_served [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_unknown_virtual_host_is_503 [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_a_is_forwarded [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_http_web_b_gets_an_error [33mxfail[0m
stress_tests/test_unreachable_network/test_unreachable_net.py::test_reverseproxy_survive_restart [33mxfail[0m
test_custom/test_defaults-location.py::test_custom_default_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_defaults-location.py::test_custom_default_conf_is_overriden_for_web3 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_defaults.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_location-per-vhost.py::test_custom_block_is_present_in_nginx_generated_conf [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_per-vhost.py::test_custom_conf_does_not_apply_to_web2 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_does_not_apply_to_unknown_vhost [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web1 [31mFAILED[0m
test_custom/test_proxy-wide.py::test_custom_conf_applies_to_web2 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v2.py::test_forwards_to_whoami [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_unknown_virtual_host_is_503 [31mFAILED[0m
test_dockergen/test_dockergen_v3.py::test_forwards_to_whoami [31mFAILED[0m
test_headers/test_http.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_http.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_http.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_http.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_http.py::test_httpoxy_safe [31mFAILED[0m
test_headers/test_https.py::test_arbitrary_headers_are_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_For_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Proto_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Port_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_generated [31mFAILED[0m
test_headers/test_https.py::test_X_Forwarded_Ssl_is_overwritten [31mFAILED[0m
test_headers/test_https.py::test_X_Real_IP_is_generated [31mFAILED[0m
test_headers/test_https.py::test_Host_is_passed_on [31mFAILED[0m
test_headers/test_https.py::test_httpoxy_safe [31mFAILED[0m
test_multiple-ports/test_VIRTUAL_PORT.py::test_answer_is_served_from_chosen_port [31mFAILED[0m
test_multiple-ports/test_default-80.py::test_answer_is_served_from_port_80_by_default [31mFAILED[0m
test_multiple-ports/test_single-port-not-80.py::test_answer_is_served_from_exposed_port_even_if_not_80 [31mFAILED[0m
test_ssl/test_dhparam.py::test_dhparam_is_not_generated_if_present [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_https_works [31mFAILED[0m
test_ssl/test_dhparam.py::test_web5_dhparam_is_used [31mFAILED[0m
test_ssl/test_dhparam_generation.py::test_dhparam_is_generated_if_missing [31mFAILED[0m
test_ssl/test_hsts.py::test_web1_HSTS_default [31mFAILED[0m
test_ssl/test_hsts.py::test_web1_HSTS_error [31mFAILED[0m
test_ssl/test_hsts.py::test_web2_HSTS_off [31mFAILED[0m
test_ssl/test_hsts.py::test_web3_HSTS_custom [31mFAILED[0m
test_ssl/test_hsts.py::test_web4_HSTS_off_noredirect [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_http_is_not_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_https_is_forwarded [31mFAILED[0m
test_ssl/test_nohttp.py::test_web2_HSTS_policy_is_active [31mFAILED[0m
test_ssl/test_nohttps.py::test_http_is_forwarded [31mFAILED[0m
test_ssl/test_nohttps.py::test_https_is_disabled [32mPASSED[0m
test_ssl/test_noredirect.py::test_web3_http_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web3_https_is_forwarded [31mFAILED[0m
test_ssl/test_noredirect.py::test_web2_HSTS_policy_is_inactive [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_http_redirects_to_https[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_https_is_forwarded[bar] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[foo] [31mFAILED[0m
test_ssl/test_wildcard.py::test_web1_HSTS_policy_is_active[bar] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[1-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[2-True] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_http_redirects_to_https[3-False] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[1] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_https_get_served[2] [31mFAILED[0m
test_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py::test_web3_https_is_500_and_SSL_validation_fails [31mFAILED[0m

=================================== FAILURES ===================================
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29728ef10>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2972c0950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2972a5f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2972a5b90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:02:51 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972a3710>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2972a3050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2971895d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297189650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:02:51 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2971ccb50>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_DOCKER_HOST_unix_socket.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2971ccd90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2971ccd10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297189b10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:02:51 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_DOCKER_HOST_unix_socket.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297281450>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_composev2.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2971899d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29716d990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29716d790>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:02:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml up -d
INFO:root:Connecting to docker network: test_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29716dc10>

[1m    def test_forwards_to_whoami(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.local/port")[0m

[1m[31mtest_composev2.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fa2050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fa2790>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fa25d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:02:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.local')
DEBUG:DNS:'web.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_composev2.yml down
[1m[31m___________________________ test_fallback_on_default ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fa29d0>

[1m    def test_fallback_on_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_default-host.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fde110>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fdee50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fde8d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:02 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_default-host.yml down
[1m[31m_____________________ test_nginx_proxy_behavior_when_alone _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29711e810>

[1m    def test_nginx_proxy_behavior_when_alone(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_events.py[0m:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f7f950>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f7fa90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f7f290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:07 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_events.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m________________________ test_new_container_is_detected ________________________[0m

web1 = <Container: 2fccc6ca4f>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29716d610>

[1m    def test_new_container_is_detected(web1, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy/port")[0m

[1m[31mtest_events.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f3f550>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f3f090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297263a90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:07 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy')
DEBUG:DNS:'web1.nginx-proxy' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_events.yml down
[1m[31m________________________ test_unknown_virtual_host_ipv4 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29716db10>

[1m    def test_unknown_virtual_host_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_ipv6.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29707c250>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2970f3f90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fa20d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fa9b90>

[1m    def test_forwards_to_web1_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fa9bd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fa9890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fa9710>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv4 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29703e350>

[1m    def test_forwards_to_web2_ipv4(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_ipv6.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29703e210>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29703ef50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29703e590>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________________ test_unknown_virtual_host_ipv6 ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2970943d0>

[1m    def test_unknown_virtual_host_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297094b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29711b890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29711b6d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m__________________________ test_forwards_to_web1_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f7f690>

[1m    def test_forwards_to_web1_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297281490>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297189a50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297189410>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m__________________________ test_forwards_to_web2_ipv6 __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972a5110>

[1m    def test_forwards_to_web2_ipv6(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port", ipv6=True)[0m

[1m[31mtest_ipv6.py[0m:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29703c990>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29703c710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29703c9d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:16 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ipv6.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f47e10>

[1m    def test_unknown_virtual_host_is_503(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://unknown.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f47cd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fe90d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unknown.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fe9e10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:22 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unknown.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx-proxy.tld')
DEBUG:DNS:'unknown.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webA_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fe9910>

[1m    def test_webA_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webA.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f42f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f428d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='weba.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f425d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:22 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('weba.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('weba.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'weba.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('weba.nginx-proxy.tld')
DEBUG:DNS:'weba.nginx-proxy.tld' does not match
[1m[31m____________________________ test_webB_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f42f10>

[1m    def test_webB_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://webB.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-hosts.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f42790>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fe3bd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='webb.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fe32d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:22 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('webb.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('webb.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'webb.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('webb.nginx-proxy.tld')
DEBUG:DNS:'webb.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-hosts.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fe3590>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_multiple-networks.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb3990>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297042e90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297042410>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml up -d
INFO:root:Connecting to docker network: test_net2
INFO:root:Connecting to docker network: test_net1
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297045090>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297045410>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297045890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2972631d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29716d610>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_multiple-networks.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29716d910>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29716d990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f3f250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network test_net2
INFO:root:Disconnecting from network test_net1
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-networks.yml down
[1m[31m__________________________ test_unknown_virtual_host ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fde1d0>

[1m    def test_unknown_virtual_host(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/port")[0m

[1m[31mtest_nominal.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f92110>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f92250>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f92650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:35 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_nominal.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m____________________________ test_forwards_to_web1 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f7ac50>

[1m    def test_forwards_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f7ae10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f7a090>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f7a8d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:35 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m____________________________ test_forwards_to_web2 _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972c0350>

[1m    def test_forwards_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/port")[0m

[1m[31mtest_nominal.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29705c810>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29705cc90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29705c250>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:35 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m________________ test_wildcard_prefix[f00.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fde550>
host = 'f00.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f919d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297043490>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='f00.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2970432d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('f00.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('f00.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'f00.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('f00.nginx-proxy.test')
DEBUG:DNS:'f00.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[bar.nginx-proxy.test-81] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972a3d50>
host = 'bar.nginx-proxy.test', expected_port = 81

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297100850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297100cd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.test', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297100650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.test', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.test')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.test'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.test')
DEBUG:DNS:'bar.nginx-proxy.test' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.f00-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297043fd0>
host = 'test.nginx-proxy.f00', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2970ab4d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2970abf50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.f00', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2970abe90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.f00', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.f00')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.f00'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.f00')
DEBUG:DNS:'test.nginx-proxy.f00' does not match
[1m[31m________________ test_wildcard_prefix[test.nginx-proxy.bar-82] _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2971cc310>
host = 'test.nginx-proxy.bar', expected_port = 82

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2971ccf50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297100690>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='test.nginx-proxy.bar', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fb3690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('test.nginx-proxy.bar', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('test.nginx-proxy.bar')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'test.nginx-proxy.bar'
DEBUG:DNS:docker_container_dns_resolver('test.nginx-proxy.bar')
DEBUG:DNS:'test.nginx-proxy.bar' does not match
[1m[31m_____________ test_wildcard_prefix[web3.123.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fb9950>
host = 'web3.123.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb90d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29743a650>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fbb750>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web3.ABC.nginx-proxy.regexp-83] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f722d0>
host = 'web3.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f729d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f72b10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297034a10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123.ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fbbe10>
host = 'web3.123.ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fbb4d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f47490>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f47bd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web3.123-ABC.nginx-proxy.regexp-83] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2970340d0>
host = 'web3.123-ABC.nginx-proxy.regexp', expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297034b90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29703eb10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29703e5d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web3.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web3.123-abc.nginx-proxy.regexp' does not match
[1m[31m_ test_wildcard_prefix[web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond-83] _[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f473d0>
host = 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
expected_port = 83

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f47f10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f70850>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f70d90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
[1m[31m_____________ test_wildcard_prefix[web4.123.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29703e090>
host = 'web4.123.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29703eed0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296edc510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296edcbd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.nginx-proxy.regexp' does not match
[1m[31m_____________ test_wildcard_prefix[web4.ABC.nginx-proxy.regexp-84] _____________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f70390>
host = 'web4.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f70290>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29711ba50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29711b690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123.ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fa2950>
host = 'web4.123.ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fa2910>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fa9f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123.abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fa9e90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123.abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123.abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123.abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123.abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123.abc.nginx-proxy.regexp' does not match
[1m[31m___________ test_wildcard_prefix[web4.123-ABC.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f98b10>
host = 'web4.123-ABC.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f98f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f98510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.123-abc.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f98350>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.123-abc.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.123-abc.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.123-abc.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.123-abc.nginx-proxy.regexp')
DEBUG:DNS:'web4.123-abc.nginx-proxy.regexp' does not match
[1m[31m__________ test_wildcard_prefix[web4.whatever.nginx-proxy.regexp-84] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fe3250>
host = 'web4.whatever.nginx-proxy.regexp', expected_port = 84

[1m    @pytest.mark.parametrize("host,expected_port", [[0m
[1m        ("f00.nginx-proxy.test", 81),[0m
[1m        ("bar.nginx-proxy.test", 81),[0m
[1m        ("test.nginx-proxy.f00", 82),[0m
[1m        ("test.nginx-proxy.bar", 82),[0m
[1m        ("web3.123.nginx-proxy.regexp", 83),[0m
[1m        ("web3.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123.ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.123-ABC.nginx-proxy.regexp", 83),[0m
[1m        ("web3.whatever.nginx-proxy.regexp-to-infinity-and-beyond", 83),[0m
[1m        ("web4.123.nginx-proxy.regexp", 84),[0m
[1m        ("web4.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123.ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.123-ABC.nginx-proxy.regexp", 84),[0m
[1m        ("web4.whatever.nginx-proxy.regexp", 84),[0m
[1m    ])[0m
[1m    def test_wildcard_prefix(docker_compose, nginxproxy, host, expected_port):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fe3f90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fe3050>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fe39d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp' does not match
[1m[31m__________ test_non_matching_host_is_503[unexpected.nginx-proxy.tld] ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972a3a50>
host = 'unexpected.nginx-proxy.tld'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f5abd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f5a450>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='unexpected.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f5a150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unexpected.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unexpected.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'unexpected.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('unexpected.nginx-proxy.tld')
DEBUG:DNS:'unexpected.nginx-proxy.tld' does not match
[1m[31m_ test_non_matching_host_is_503[web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond] _[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fb6290>
host = 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'

[1m    @pytest.mark.parametrize("host", [[0m
[1m        "unexpected.nginx-proxy.tld",[0m
[1m        "web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond"[0m
[1m    ])[0m
[1m    def test_non_matching_host_is_503(docker_compose, nginxproxy, host):[0m
[1m>       r = nginxproxy.get("http://%s/port" % host)[0m

[1m[31mtest_wildcard_host.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb6710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f42610>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f42b90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:03:41 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond'
DEBUG:DNS:docker_container_dns_resolver('web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond')
DEBUG:DNS:'web4.whatever.nginx-proxy.regexp-to-infinity-and-beyond' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_wildcard_host.yml down
[1m[31m___________ test_custom_default_conf_does_not_apply_to_unknown_vhost ___________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296eeafd0>

[1m    def test_custom_default_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2970b5b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f91390>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f91410>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:08 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web1 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297058190>

[1m    def test_custom_default_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fff850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fff150>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fa9e50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:08 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_default_conf_applies_to_web2 ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29711b710>

[1m    def test_custom_default_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29711bf50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29711bd10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29711b950>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:08 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m________________ test_custom_default_conf_is_overriden_for_web3 ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fdec90>

[1m    def test_custom_default_conf_is_overriden_for_web3(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults-location.py[0m:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fdee90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fde750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297094290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:08 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.local')
DEBUG:DNS:'web3.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults-location.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297163b50>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_defaults.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297034a10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f28710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f28a10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:15 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29715a9d0>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29715ac50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29715acd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29715a690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:15 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2971581d0>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_defaults.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297158d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297158bd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29705c710>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:15 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_defaults.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2972a33d0>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296dda5d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f72c10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f72650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:21 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fb60d0>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb6190>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fb6e90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f42490>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:21 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fb9d10>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_location-per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb9750>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ea43d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ea4810>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:21 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
[1m[31m_____________ test_custom_block_is_present_in_nginx_generated_conf _____________[0m
No running jwilder/nginx-proxy:test container
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_location-per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fa2890>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fa2050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29711fa90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29711f5d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29711f0d0>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297043350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297043bd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2971de0d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m___________________ test_custom_conf_does_not_apply_to_web2 ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297107690>

[1m    def test_custom_conf_does_not_apply_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_per-vhost.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297107310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f7fbd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f920d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:28 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_per-vhost.yml down
[1m[31m_______________ test_custom_conf_does_not_apply_to_unknown_vhost _______________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296efd090>

[1m    def test_custom_conf_does_not_apply_to_unknown_vhost(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://nginx-proxy/")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296dda710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f92410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='nginx-proxy', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f92150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:34 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml up -d
INFO:root:Connecting to docker network: testcustom_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('nginx-proxy', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('nginx-proxy')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'nginx-proxy'
DEBUG:DNS:docker_container_dns_resolver('nginx-proxy')
DEBUG:DNS:'nginx-proxy' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web1 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296ddaa90>

[1m    def test_custom_conf_applies_to_web1(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web1.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f56050>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f56bd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web1.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f56d90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:34 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.local')
DEBUG:DNS:'web1.nginx-proxy.local' does not match
[1m[31m_______________________ test_custom_conf_applies_to_web2 _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2970218d0>

[1m    def test_custom_conf_applies_to_web2(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.local/port")[0m

[1m[31mtest_custom/test_proxy-wide.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297021a10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297021ed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.local', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29714d350>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:34 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.local', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.local')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.local'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.local')
DEBUG:DNS:'web2.nginx-proxy.local' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testcustom_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_custom/test_proxy-wide.yml down
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fa9dd0>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:31: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (ac3efe2e20)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.27.0.2 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fdea10>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm 4fe4564da348\n"[0m
[1m[31mE         + I'm 4fe4564da348[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v2.py[0m:38: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (ac3efe2e20)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.27.0.2 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v2.yml down
INFO:root:removing nginx.tmpl
[1m[31m_______________________ test_unknown_virtual_host_is_503 _______________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297034f90>

[1m    def test_unknown_virtual_host_is_503(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://unknown.nginx.container.docker/")[0m
[1m>       assert r.status_code == 503[0m
[1m[31mE       assert 200 == 503[0m
[1m[31mE        +  where 200 = <Response [200]>.status_code[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:54: AssertionError
---------------------------- Captured stdout setup -----------------------------
+ cp /app/nginx.tmpl /home/travis/build/jwilder/nginx-proxy/test/test_dockergen
+ chmod 777 /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/nginx.tmpl

---------------------------- Captured stderr setup -----------------------------
INFO:root:extracting nginx.tmpl from jwilder/nginx-proxy:test
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml up -d
INFO:root:Connecting to docker network: testdockergen_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('unknown.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('unknown.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (f2c4c24980)
INFO:DNS:resolving domain name 'unknown.nginx.container.docker' as IP address 172.28.0.3 of container nginx
[1m[31m___________________________ test_forwards_to_whoami ____________________________[0m

nginx_tmpl = None
docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296ed4c90>

[1m    def test_forwards_to_whoami(nginx_tmpl, docker_compose, nginxproxy):[0m
[1m        r = nginxproxy.get("http://whoami.nginx.container.docker/")[0m
[1m        assert r.status_code == 200[0m
[1m        whoami_container = docker_compose.containers.get("whoami")[0m
[1m>       assert r.text == "I'm %s\n" % whoami_container.id[:12][0m
[1m[31mE       assert '<!DOCTYPE ht...ody>\n</html>\n' == "I'm 26c6b30b0c99\n"[0m
[1m[31mE         + I'm 26c6b30b0c99[0m
[1m[31mE         - <!DOCTYPE html>[0m
[1m[31mE         - <html>[0m
[1m[31mE         - <head>[0m
[1m[31mE         - <title>Welcome to nginx!</title>[0m
[1m[31mE         - <style>[0m
[1m[31mE         -     body {[0m
[1m[31mE         -         width: 35em;[0m
[1m[31mE         -         margin: 0 auto;[0m
[1m[31mE         Detailed information truncated (17 more lines), use "-vv" to show[0m

[1m[31mtest_dockergen/test_dockergen_v3.py[0m:61: AssertionError
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('whoami.nginx.container.docker', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:docker_container_dns_resolver('whoami.nginx.container.docker')
DEBUG:DNS:looking for container 'nginx'
DEBUG:DNS:container u'nginx' found (f2c4c24980)
INFO:DNS:resolving domain name 'whoami.nginx.container.docker' as IP address 172.28.0.3 of container nginx
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network testdockergen_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_dockergen/test_dockergen_v3.yml down
INFO:root:removing nginx.tmpl
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2970ab390>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_http.py[0m:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f28ed0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fd3410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fd3c50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f474d0>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297021850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2972a5950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f3f090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297042890>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_http.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297042290>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2971007d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297100e10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29715a1d0>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29715ac50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fd3290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fd3690>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297045a10>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296e6de90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296e6d210>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296e6dd90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297158e50>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297004450>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297004310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe297004d90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297107650>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_http.py[0m:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb9890>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2972a3f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2972a3c90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f72c10>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f72290>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296edeb10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296edeb50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f85750>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_http.py[0m:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f85210>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f850d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f85390>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f78ed0>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f78850>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f74750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f743d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29705b590>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_http.py[0m:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29705bcd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f55e10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f55a90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296edef90>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_http.py[0m:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ededd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29703ca90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29703c0d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:04:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_http.yml down
[1m[31m_____________________ test_arbitrary_headers_are_passed_on _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296e9db90>

[1m    def test_arbitrary_headers_are_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Foo': 'Bar'})[0m

[1m[31mtest_headers/test_https.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296e9da50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297150110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe297150190>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f45410>

[1m    def test_X_Forwarded_For_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f45090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ebea90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296ebe150>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_For_is_passed_on _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297158810>

[1m    def test_X_Forwarded_For_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-For': '1.2.3.4'})[0m

[1m[31mtest_headers/test_https.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2971589d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296eea750>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296eea390>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f474d0>

[1m    def test_X_Forwarded_Proto_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2971499d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296efd950>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296efd7d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Proto_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296edcd10>

[1m    def test_X_Forwarded_Proto_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Proto': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296edc310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ee9710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296ee9290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_generated ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297049490>

[1m    def test_X_Forwarded_Port_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297049090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fe34d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296fe3090>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Port_is_passed_on ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29711e750>

[1m    def test_X_Forwarded_Port_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Port': '1234'})[0m

[1m[31mtest_headers/test_https.py[0m:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29711ead0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fb3510>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296fb3650>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________ test_X_Forwarded_Ssl_is_generated _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297058d90>

[1m    def test_X_Forwarded_Ssl_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297058f10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fde9d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296fdef10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_X_Forwarded_Ssl_is_overwritten ______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297043cd0>

[1m    def test_X_Forwarded_Ssl_is_overwritten(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'X-Forwarded-Ssl': 'f00'})[0m

[1m[31mtest_headers/test_https.py[0m:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f74d90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f74f50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296f74450>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_X_Real_IP_is_generated __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f98850>

[1m    def test_X_Real_IP_is_generated(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe2970450d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f701d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296f70ad0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m____________________________ test_Host_is_passed_on ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f92550>

[1m    def test_Host_is_passed_on(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers")[0m

[1m[31mtest_headers/test_https.py[0m:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f92c10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f92290>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296f92610>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m______________________________ test_httpoxy_safe _______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296ebeed0>

[1m    def test_httpoxy_safe(docker_compose, nginxproxy):[0m
[1m        """[0m
[1m        See https://httpoxy.org/[0m
[1m        nginx-proxy should suppress the `Proxy` header[0m
[1m        """[0m
[1m>       r = nginxproxy.get("https://web.nginx-proxy.tld/headers", headers={'Proxy': 'tcp://some.hacker.com'})[0m

[1m[31mtest_headers/test_https.py[0m:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ebe7d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ebe8d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web.nginx-proxy.tld', port=443): Max retries exceeded with url: /headers (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296ebe5d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:05 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_headers/test_https.yml down
[1m[31m____________________ test_answer_is_served_from_chosen_port ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fc85d0>

[1m    def test_answer_is_served_from_chosen_port(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_VIRTUAL_PORT.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fc8a50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe2970ce990>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe2970ceb50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:13 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_VIRTUAL_PORT.yml down
[1m[31m________________ test_answer_is_served_from_port_80_by_default _________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2970abc50>

[1m    def test_answer_is_served_from_port_80_by_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_default-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296df3e90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f45f10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296f45290>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:18 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_default-80.yml down
[1m[31m____________ test_answer_is_served_from_exposed_port_even_if_not_80 ____________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f45650>

[1m    def test_answer_is_served_from_exposed_port_even_if_not_80(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port")[0m

[1m[31mtest_multiple-ports/test_single-port-not-80.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296edc5d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fe3ed0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296fe3dd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:23 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_multiple-ports/test_single-port-not-80.yml down
[1m[31m___________________ test_dhparam_is_not_generated_if_present ___________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>

[1m    def test_dhparam_is_not_generated_if_present(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:69: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:29 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml up -d
[1m[31m____________________________ test_web5_https_works _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fc8f90>

[1m    def test_web5_https_works(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web5.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_dhparam.py[0m:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ddab90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ddad90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web5.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296dda5d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:29 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web5.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web5.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web5.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web5.nginx-proxy.tld')
DEBUG:DNS:'web5.nginx-proxy.tld' does not match
[1m[31m__________________________ test_web5_dhparam_is_used ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>

[1m    @require_openssl("1.0.2")[0m
[1m    def test_web5_dhparam_is_used(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam.py[0m:88: AssertionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:29 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam.yml down
[1m[31m_____________________ test_dhparam_is_generated_if_missing _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>

[1m    def test_dhparam_is_generated_if_missing(docker_compose):[0m
[1m        sut_container = docker_client.containers.get("nginxproxy")[0m
[1m>       assert sut_container.status == "running"[0m
[1m[31mE       assert 'exited' == 'running'[0m
[1m[31mE         - exited[0m
[1m[31mE         + running[0m

[1m[31mtest_ssl/test_dhparam_generation.py[0m:36: AssertionError
------------------------------- nginx-proxy logs -------------------------------
WARNING: /etc/nginx/dhparam/dhparam.pem was not found. A pre-generated dhparam.pem will be used for now while a new one
is being generated in the background.  Once the new dhparam.pem is in place, nginx will be reloaded.
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:34 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam_generation.yml up -d
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_dhparam_generation.yml down
[1m[31m____________________________ test_web1_HSTS_default ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fc8b10>

[1m    def test_web1_HSTS_default(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296eed710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297021c50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe297021e10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:40 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m_____________________________ test_web1_HSTS_error _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296edc910>

[1m    def test_web1_HSTS_error(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web1.nginx-proxy.tld/status/500", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ed49d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ed47d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web1.nginx-proxy.tld', port=443): Max retries exceeded with url: /status/500 (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296ed4410>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:40 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web1.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web1.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web1.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web1.nginx-proxy.tld')
DEBUG:DNS:'web1.nginx-proxy.tld' does not match
[1m[31m______________________________ test_web2_HSTS_off ______________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f28690>

[1m    def test_web2_HSTS_off(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f28cd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296d49110>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296d493d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:40 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m____________________________ test_web3_HSTS_custom _____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29722e590>

[1m    def test_web3_HSTS_custom(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29722e3d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29722eb50>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe29722ec90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:40 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m________________________ test_web4_HSTS_off_noredirect _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f85610>

[1m    def test_web4_HSTS_off_noredirect(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web4.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_hsts.py[0m:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f85e90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f744d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web4.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296f748d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:40 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web4.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web4.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web4.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web4.nginx-proxy.tld')
DEBUG:DNS:'web4.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_hsts.yml down
[1m[31m_______________________ test_web2_http_is_not_forwarded ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296eed8d0>

[1m    def test_web2_http_is_not_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web2.nginx-proxy.tld/", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f920d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29715a190>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web2.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe29714d110>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:46 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web2_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe2971497d0>

[1m    def test_web2_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296d32450>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296d32410>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296d32310>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:46 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
[1m[31m_______________________ test_web2_HSTS_policy_is_active ________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fde950>

[1m    def test_web2_HSTS_policy_is_active(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web2.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttp.py[0m:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fdee90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fb3a90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web2.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296fb3e90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:46 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web2.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web2.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web2.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web2.nginx-proxy.tld')
DEBUG:DNS:'web2.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttp.yml down
[1m[31m____________________________ test_http_is_forwarded ____________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fbb410>

[1m    def test_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_nohttps.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ee9d50>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ee9890>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ee9b50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:52 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_nohttps.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web.nginx-proxy.tld')
DEBUG:DNS:'web.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_http_is_forwarded __________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fbb990>

[1m    def test_web3_http_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("http://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296ecdbd0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296fde810>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='web3.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ecdad0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m_________________________ test_web3_https_is_forwarded _________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297100990>

[1m    def test_web3_https_is_forwarded(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297100090>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f5a310>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296f5a410>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
[1m[31m______________________ test_web2_HSTS_policy_is_inactive _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fd3410>

[1m    def test_web2_HSTS_policy_is_inactive(docker_compose, nginxproxy):[0m
[1m>       r = nginxproxy.get("https://web3.nginx-proxy.tld/port", allow_redirects=False)[0m

[1m[31mtest_ssl/test_noredirect.py[0m:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297004890>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f70050>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='web3.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296d52ad0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:05:57 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('web3.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('web3.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'web3.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('web3.nginx-proxy.tld')
DEBUG:DNS:'web3.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_noredirect.yml down
[1m[31m____________________ test_web1_http_redirects_to_https[foo] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f73550>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29703e650>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ebecd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='foo.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ebef50>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml up -d
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m____________________ test_web1_http_redirects_to_https[bar] ____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fb6c90>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_http_redirects_to_https(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("http://%s.nginx-proxy.tld/" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296fb6710>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ee8250>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='bar.nginx-proxy.tld', port=80): Max retries exceeded with url: / (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ee8a90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[foo] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f42650>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296e64ed0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296e64c10>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296e64110>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m______________________ test_web1_https_is_forwarded[bar] _______________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe297163b50>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_https_is_forwarded(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297163490>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296cce9d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296cce910>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[foo] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f91410>
subdomain = 'foo'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f91350>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe297150710>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='foo.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe297150450>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('foo.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('foo.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'foo.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('foo.nginx-proxy.tld')
DEBUG:DNS:'foo.nginx-proxy.tld' does not match
[1m[31m_____________________ test_web1_HSTS_policy_is_active[bar] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296efd490>
subdomain = 'bar'

[1m    @pytest.mark.parametrize("subdomain", ["foo", "bar"])[0m
[1m    def test_web1_HSTS_policy_is_active(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/test_wildcard.py[0m:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296efd4d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ccce90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='bar.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296ccca10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:03 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('bar.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('bar.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving 'bar.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('bar.nginx-proxy.tld')
DEBUG:DNS:'bar.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/test_wildcard.yml down
[1m[31m_____________________ test_http_redirects_to_https[1-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29703e0d0>
subdomain = 1, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f454d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296f45fd0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='1.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296d491d0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


---------------------------- Captured stderr setup -----------------------------
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml up -d
INFO:root:Connecting to docker network: wildcardcertandnohttps_default
----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m_____________________ test_http_redirects_to_https[2-True] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296fdeb10>
subdomain = 2, should_redirect_to_https = True

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe297149b10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296ede610>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='2.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296ede490>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m____________________ test_http_redirects_to_https[3-False] _____________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296e00d90>
subdomain = 3, should_redirect_to_https = False

[1m    @pytest.mark.parametrize("subdomain,should_redirect_to_https", [[0m
[1m        (1, True),[0m
[1m        (2, True),[0m
[1m        (3, False),[0m
[1m    ])[0m
[1m    def test_http_redirects_to_https(docker_compose, nginxproxy, subdomain, should_redirect_to_https):[0m
[1m>       r = nginxproxy.get("http://%s.web.nginx-proxy.tld/port" % subdomain)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296e001d0>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296e00610>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPConnectionPool(host='3.web.nginx-proxy.tld', port=80): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.HTTPConnection object at 0x7fe296e00f90>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 80, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[1] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296f56390>
subdomain = 1

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296f56310>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29711f0d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='1.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe297109b10>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('1.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('1.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '1.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('1.web.nginx-proxy.tld')
DEBUG:DNS:'1.web.nginx-proxy.tld' does not match
[1m[31m___________________________ test_https_get_served[2] ___________________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe29722e350>
subdomain = 2

[1m    @pytest.mark.parametrize("subdomain", [1, 2])[0m
[1m    def test_https_get_served(docker_compose, nginxproxy, subdomain):[0m
[1m>       r = nginxproxy.get("https://%s.web.nginx-proxy.tld/port" % subdomain, allow_redirects=False)[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe29722ec90>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe29722ed90>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='2.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe29722efd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('2.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('2.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '2.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('2.web.nginx-proxy.tld')
DEBUG:DNS:'2.web.nginx-proxy.tld' does not match
[1m[31m_______________ test_web3_https_is_500_and_SSL_validation_fails ________________[0m

docker_compose = <docker.client.DockerClient object at 0x7fe29742dad0>
nginxproxy = <conftest.requests_for_docker object at 0x7fe296da0c90>

[1m    def test_web3_https_is_500_and_SSL_validation_fails(docker_compose, nginxproxy):[0m
[1m        with pytest.raises( (CertificateError, SSLError) ) as excinfo:[0m
[1m>           nginxproxy.get("https://3.web.nginx-proxy.tld/port")[0m

[1m[31mtest_ssl/wildcard_cert_and_nohttps/test_wildcard_cert_nohttps.py[0m:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mconftest.py[0m:83: in get
[1m    return _get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/backoff.py[0m:173: in retry
[1m    ret = target(*args, **kwargs)[0m
[1m[31mconftest.py[0m:82: in _get
[1m    return self.session.get(*args, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:488: in get
[1m    return self.request('GET', url, **kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:475: in request
[1m    resp = self.send(prep, **send_kwargs)[0m
[1m[31m/usr/local/lib/python2.7/site-packages/requests/sessions.py[0m:596: in send
[1m    r = adapter.send(request, **kwargs)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <requests.adapters.HTTPAdapter object at 0x7fe296da0d10>
request = <PreparedRequest [GET]>, stream = False
timeout = <requests.packages.urllib3.util.timeout.Timeout object at 0x7fe296da02d0>
verify = '/home/travis/build/jwilder/nginx-proxy/test/certs/ca-root.crt'
cert = None, proxies = OrderedDict()

[1m    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):[0m
[1m        """Sends PreparedRequest object. Returns Response object.[0m
[1m    [0m
[1m            :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.[0m
[1m            :param stream: (optional) Whether to stream the request content.[0m
[1m            :param timeout: (optional) How long to wait for the server to send[0m
[1m                data before giving up, as a float, or a :ref:`(connect timeout,[0m
[1m                read timeout) <timeouts>` tuple.[0m
[1m            :type timeout: float or tuple[0m
[1m            :param verify: (optional) Whether to verify SSL certificates.[0m
[1m            :param cert: (optional) Any user-provided SSL certificate to be trusted.[0m
[1m            :param proxies: (optional) The proxies dictionary to apply to the request.[0m
[1m            :rtype: requests.Response[0m
[1m            """[0m
[1m    [0m
[1m        conn = self.get_connection(request.url, proxies)[0m
[1m    [0m
[1m        self.cert_verify(conn, request.url, verify, cert)[0m
[1m        url = self.request_url(request, proxies)[0m
[1m        self.add_headers(request)[0m
[1m    [0m
[1m        chunked = not (request.body is None or 'Content-Length' in request.headers)[0m
[1m    [0m
[1m        if isinstance(timeout, tuple):[0m
[1m            try:[0m
[1m                connect, read = timeout[0m
[1m                timeout = TimeoutSauce(connect=connect, read=read)[0m
[1m            except ValueError as e:[0m
[1m                # this may raise a string formatting error.[0m
[1m                err = ("Invalid timeout {0}. Pass a (connect, read) "[0m
[1m                       "timeout tuple, or a single float to set "[0m
[1m                       "both timeouts to the same value".format(timeout))[0m
[1m                raise ValueError(err)[0m
[1m        else:[0m
[1m            timeout = TimeoutSauce(connect=timeout, read=timeout)[0m
[1m    [0m
[1m        try:[0m
[1m            if not chunked:[0m
[1m                resp = conn.urlopen([0m
[1m                    method=request.method,[0m
[1m                    url=url,[0m
[1m                    body=request.body,[0m
[1m                    headers=request.headers,[0m
[1m                    redirect=False,[0m
[1m                    assert_same_host=False,[0m
[1m                    preload_content=False,[0m
[1m                    decode_content=False,[0m
[1m                    retries=self.max_retries,[0m
[1m                    timeout=timeout[0m
[1m                )[0m
[1m    [0m
[1m            # Send the request.[0m
[1m            else:[0m
[1m                if hasattr(conn, 'proxy_pool'):[0m
[1m                    conn = conn.proxy_pool[0m
[1m    [0m
[1m                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)[0m
[1m    [0m
[1m                try:[0m
[1m                    low_conn.putrequest(request.method,[0m
[1m                                        url,[0m
[1m                                        skip_accept_encoding=True)[0m
[1m    [0m
[1m                    for header, value in request.headers.items():[0m
[1m                        low_conn.putheader(header, value)[0m
[1m    [0m
[1m                    low_conn.endheaders()[0m
[1m    [0m
[1m                    for i in request.body:[0m
[1m                        low_conn.send(hex(len(i))[2:].encode('utf-8'))[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                        low_conn.send(i)[0m
[1m                        low_conn.send(b'\r\n')[0m
[1m                    low_conn.send(b'0\r\n\r\n')[0m
[1m    [0m
[1m                    # Receive the response from the server[0m
[1m                    try:[0m
[1m                        # For Python 2.7+ versions, use buffering of HTTP[0m
[1m                        # responses[0m
[1m                        r = low_conn.getresponse(buffering=True)[0m
[1m                    except TypeError:[0m
[1m                        # For compatibility with Python 2.6 versions and back[0m
[1m                        r = low_conn.getresponse()[0m
[1m    [0m
[1m                    resp = HTTPResponse.from_httplib([0m
[1m                        r,[0m
[1m                        pool=conn,[0m
[1m                        connection=low_conn,[0m
[1m                        preload_content=False,[0m
[1m                        decode_content=False[0m
[1m                    )[0m
[1m                except:[0m
[1m                    # If we hit any problems here, clean up the connection.[0m
[1m                    # Then, reraise so that we can handle the actual exception.[0m
[1m                    low_conn.close()[0m
[1m                    raise[0m
[1m    [0m
[1m        except (ProtocolError, socket.error) as err:[0m
[1m            raise ConnectionError(err, request=request)[0m
[1m    [0m
[1m        except MaxRetryError as e:[0m
[1m            if isinstance(e.reason, ConnectTimeoutError):[0m
[1m                # TODO: Remove this in 3.0.0: see #2811[0m
[1m                if not isinstance(e.reason, NewConnectionError):[0m
[1m                    raise ConnectTimeout(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, ResponseError):[0m
[1m                raise RetryError(e, request=request)[0m
[1m    [0m
[1m            if isinstance(e.reason, _ProxyError):[0m
[1m                raise ProxyError(e, request=request)[0m
[1m    [0m
[1m>           raise ConnectionError(e, request=request)[0m
[1m[31mE           ConnectionError: HTTPSConnectionPool(host='3.web.nginx-proxy.tld', port=443): Max retries exceeded with url: /port (Caused by NewConnectionError('<requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x7fe296da0fd0>: Failed to establish a new connection: [Errno -2] Name does not resolve',))[0m

[1m[31m/usr/local/lib/python2.7/site-packages/requests/adapters.py[0m:487: ConnectionError
------------------------------- nginx-proxy logs -------------------------------
Custom dhparam.pem file found, generation skipped
[0;37;1mforego     | [0mstarting dockergen.1 on port 5000
[0;37;1mforego     | [0mstarting nginx.1 on port 5100
[0;36;1mdockergen.1 | [0;31;1m2019/07/30 08:06:10 Unable to parse template: template: nginx.tmpl:126: undefined variable "$container"
[0m[0;37;1mforego     | [0mstarting dockergen.1 on port 5100
[0;37;1mforego     | [0msending SIGTERM to nginx.1
[0;37;1mforego     | [0msending SIGTERM to dockergen.1

------------------------------- nginx-proxy conf -------------------------------
server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


----------------------------- Captured stderr call -----------------------------
DEBUG:DNS:resolving domain name ('3.web.nginx-proxy.tld', 443, 2, 1)
DEBUG:DNS:nginx_proxy_dns_resolver('3.web.nginx-proxy.tld')
WARNING:DNS:no container found from image jwilder/nginx-proxy:test while resolving '3.web.nginx-proxy.tld'
DEBUG:DNS:docker_container_dns_resolver('3.web.nginx-proxy.tld')
DEBUG:DNS:'3.web.nginx-proxy.tld' does not match
--------------------------- Captured stderr teardown ---------------------------
INFO:root:Disconnecting from network wildcardcertandnohttps_default
INFO:root:docker-compose -f /home/travis/build/jwilder/nginx-proxy/test/test_ssl/wildcard_cert_and_nohttps/docker-compose.yml down
[1m[31m============== 115 failed, 2 passed, 12 xfailed in 208.82 seconds ==============[0m
make: *** [test-debian] Error 1
travis_time:end:2d5ec262:start=1564473737204238184,finish=1564473978453445627,duration=241249207443[0K[31;1mThe command "make $TEST_TARGET" exited with 2.[0m



Done. Your build exited with 1.
