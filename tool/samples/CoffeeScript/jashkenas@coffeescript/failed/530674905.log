travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: c0507001-6bf8-4b74-8352-61bab7e9b7a4@1.production-1-worker-org-gce-crw6
version: v6.2.0 https://github.com/travis-ci/worker/tree/5e5476e01646095f48eec13196fdb3faf8f5cbf7
instance: travis-job-9972dfc8-912d-4297-b907-02d8765c9c9e travis-ci-garnet-trusty-1512502259-986baf0 (via amqp)
startup: 6.592909406s
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: node_js
Build group: stable
Build dist: trusty
Build id: 530674905
Job id: 530674907
Runtime kernel version: 4.4.0-101-generic
travis-build version: ad2d13976
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 19:58:13 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:42:38 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.09.0-ce
 API version:  1.32 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:41:20 2017
 OS/Arch:      linux/amd64
 Experimental: false
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	10.240.0.28/255.255.255.255
	172.17.0.1/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-98-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-98-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
travis_fold:start:docker_mtu[0Kdocker stop/waiting
docker start/running, process 3698
travis_fold:end:docker_mtu[0K
travis_fold:start:git.checkout[0Ktravis_time:start:08d43e1c[0K$ git clone --depth=50 https://github.com/jashkenas/coffeescript.git jashkenas/coffeescript
Cloning into 'jashkenas/coffeescript'...
remote: Enumerating objects: 1132, done.[K
remote: Counting objects:   0% (1/1132)   [Kremote: Counting objects:   1% (12/1132)   [Kremote: Counting objects:   2% (23/1132)   [Kremote: Counting objects:   3% (34/1132)   [Kremote: Counting objects:   4% (46/1132)   [Kremote: Counting objects:   5% (57/1132)   [Kremote: Counting objects:   6% (68/1132)   [Kremote: Counting objects:   7% (80/1132)   [Kremote: Counting objects:   8% (91/1132)   [Kremote: Counting objects:   9% (102/1132)   [Kremote: Counting objects:  10% (114/1132)   [Kremote: Counting objects:  11% (125/1132)   [Kremote: Counting objects:  12% (136/1132)   [Kremote: Counting objects:  13% (148/1132)   [Kremote: Counting objects:  14% (159/1132)   [Kremote: Counting objects:  15% (170/1132)   [Kremote: Counting objects:  16% (182/1132)   [Kremote: Counting objects:  17% (193/1132)   [Kremote: Counting objects:  18% (204/1132)   [Kremote: Counting objects:  19% (216/1132)   [Kremote: Counting objects:  20% (227/1132)   [Kremote: Counting objects:  21% (238/1132)   [Kremote: Counting objects:  22% (250/1132)   [Kremote: Counting objects:  23% (261/1132)   [Kremote: Counting objects:  24% (272/1132)   [Kremote: Counting objects:  25% (283/1132)   [Kremote: Counting objects:  26% (295/1132)   [Kremote: Counting objects:  27% (306/1132)   [Kremote: Counting objects:  28% (317/1132)   [Kremote: Counting objects:  29% (329/1132)   [Kremote: Counting objects:  30% (340/1132)   [Kremote: Counting objects:  31% (351/1132)   [Kremote: Counting objects:  32% (363/1132)   [Kremote: Counting objects:  33% (374/1132)   [Kremote: Counting objects:  34% (385/1132)   [Kremote: Counting objects:  35% (397/1132)   [Kremote: Counting objects:  36% (408/1132)   [Kremote: Counting objects:  37% (419/1132)   [Kremote: Counting objects:  38% (431/1132)   [Kremote: Counting objects:  39% (442/1132)   [Kremote: Counting objects:  40% (453/1132)   [Kremote: Counting objects:  41% (465/1132)   [Kremote: Counting objects:  42% (476/1132)   [Kremote: Counting objects:  43% (487/1132)   [Kremote: Counting objects:  44% (499/1132)   [Kremote: Counting objects:  45% (510/1132)   [Kremote: Counting objects:  46% (521/1132)   [Kremote: Counting objects:  47% (533/1132)   [Kremote: Counting objects:  48% (544/1132)   [Kremote: Counting objects:  49% (555/1132)   [Kremote: Counting objects:  50% (566/1132)   [Kremote: Counting objects:  51% (578/1132)   [Kremote: Counting objects:  52% (589/1132)   [Kremote: Counting objects:  53% (600/1132)   [Kremote: Counting objects:  54% (612/1132)   [Kremote: Counting objects:  55% (623/1132)   [Kremote: Counting objects:  56% (634/1132)   [Kremote: Counting objects:  57% (646/1132)   [Kremote: Counting objects:  58% (657/1132)   [Kremote: Counting objects:  59% (668/1132)   [Kremote: Counting objects:  60% (680/1132)   [Kremote: Counting objects:  61% (691/1132)   [Kremote: Counting objects:  62% (702/1132)   [Kremote: Counting objects:  63% (714/1132)   [Kremote: Counting objects:  64% (725/1132)   [Kremote: Counting objects:  65% (736/1132)   [Kremote: Counting objects:  66% (748/1132)   [Kremote: Counting objects:  67% (759/1132)   [Kremote: Counting objects:  68% (770/1132)   [Kremote: Counting objects:  69% (782/1132)   [Kremote: Counting objects:  70% (793/1132)   [Kremote: Counting objects:  71% (804/1132)   [Kremote: Counting objects:  72% (816/1132)   [Kremote: Counting objects:  73% (827/1132)   [Kremote: Counting objects:  74% (838/1132)   [Kremote: Counting objects:  75% (849/1132)   [Kremote: Counting objects:  76% (861/1132)   [Kremote: Counting objects:  77% (872/1132)   [Kremote: Counting objects:  78% (883/1132)   [Kremote: Counting objects:  79% (895/1132)   [Kremote: Counting objects:  80% (906/1132)   [Kremote: Counting objects:  81% (917/1132)   [Kremote: Counting objects:  82% (929/1132)   [Kremote: Counting objects:  83% (940/1132)   [Kremote: Counting objects:  84% (951/1132)   [Kremote: Counting objects:  85% (963/1132)   [Kremote: Counting objects:  86% (974/1132)   [Kremote: Counting objects:  87% (985/1132)   [Kremote: Counting objects:  88% (997/1132)   [Kremote: Counting objects:  89% (1008/1132)   [Kremote: Counting objects:  90% (1019/1132)   [Kremote: Counting objects:  91% (1031/1132)   [Kremote: Counting objects:  92% (1042/1132)   [Kremote: Counting objects:  93% (1053/1132)   [Kremote: Counting objects:  94% (1065/1132)   [Kremote: Counting objects:  95% (1076/1132)   [Kremote: Counting objects:  96% (1087/1132)   [Kremote: Counting objects:  97% (1099/1132)   [Kremote: Counting objects:  98% (1110/1132)   [Kremote: Counting objects:  99% (1121/1132)   [Kremote: Counting objects: 100% (1132/1132)   [Kremote: Counting objects: 100% (1132/1132), done.[K
remote: Compressing objects:   0% (1/669)   [Kremote: Compressing objects:   1% (7/669)   [Kremote: Compressing objects:   2% (14/669)   [Kremote: Compressing objects:   3% (21/669)   [Kremote: Compressing objects:   4% (27/669)   [Kremote: Compressing objects:   5% (34/669)   [Kremote: Compressing objects:   6% (41/669)   [Kremote: Compressing objects:   7% (47/669)   [Kremote: Compressing objects:   8% (54/669)   [Kremote: Compressing objects:   9% (61/669)   [Kremote: Compressing objects:  10% (67/669)   [Kremote: Compressing objects:  11% (74/669)   [Kremote: Compressing objects:  12% (81/669)   [Kremote: Compressing objects:  13% (87/669)   [Kremote: Compressing objects:  14% (94/669)   [Kremote: Compressing objects:  15% (101/669)   [Kremote: Compressing objects:  16% (108/669)   [Kremote: Compressing objects:  17% (114/669)   [Kremote: Compressing objects:  18% (121/669)   [Kremote: Compressing objects:  19% (128/669)   [Kremote: Compressing objects:  20% (134/669)   [Kremote: Compressing objects:  21% (141/669)   [Kremote: Compressing objects:  22% (148/669)   [Kremote: Compressing objects:  23% (154/669)   [Kremote: Compressing objects:  24% (161/669)   [Kremote: Compressing objects:  25% (168/669)   [Kremote: Compressing objects:  26% (174/669)   [Kremote: Compressing objects:  27% (181/669)   [Kremote: Compressing objects:  28% (188/669)   [Kremote: Compressing objects:  29% (195/669)   [Kremote: Compressing objects:  30% (201/669)   [Kremote: Compressing objects:  31% (208/669)   [Kremote: Compressing objects:  32% (215/669)   [Kremote: Compressing objects:  33% (221/669)   [Kremote: Compressing objects:  34% (228/669)   [Kremote: Compressing objects:  35% (235/669)   [Kremote: Compressing objects:  36% (241/669)   [Kremote: Compressing objects:  37% (248/669)   [Kremote: Compressing objects:  38% (255/669)   [Kremote: Compressing objects:  39% (261/669)   [Kremote: Compressing objects:  40% (268/669)   [Kremote: Compressing objects:  41% (275/669)   [Kremote: Compressing objects:  42% (281/669)   [Kremote: Compressing objects:  43% (288/669)   [Kremote: Compressing objects:  44% (295/669)   [Kremote: Compressing objects:  45% (302/669)   [Kremote: Compressing objects:  46% (308/669)   [Kremote: Compressing objects:  47% (315/669)   [Kremote: Compressing objects:  48% (322/669)   [Kremote: Compressing objects:  49% (328/669)   [Kremote: Compressing objects:  50% (335/669)   [Kremote: Compressing objects:  51% (342/669)   [Kremote: Compressing objects:  52% (348/669)   [Kremote: Compressing objects:  53% (355/669)   [Kremote: Compressing objects:  54% (362/669)   [Kremote: Compressing objects:  55% (368/669)   [Kremote: Compressing objects:  56% (375/669)   [Kremote: Compressing objects:  57% (382/669)   [Kremote: Compressing objects:  58% (389/669)   [Kremote: Compressing objects:  59% (395/669)   [Kremote: Compressing objects:  60% (402/669)   [Kremote: Compressing objects:  61% (409/669)   [Kremote: Compressing objects:  62% (415/669)   [Kremote: Compressing objects:  63% (422/669)   [Kremote: Compressing objects:  64% (429/669)   [Kremote: Compressing objects:  65% (435/669)   [Kremote: Compressing objects:  66% (442/669)   [Kremote: Compressing objects:  67% (449/669)   [Kremote: Compressing objects:  68% (455/669)   [Kremote: Compressing objects:  69% (462/669)   [Kremote: Compressing objects:  70% (469/669)   [Kremote: Compressing objects:  71% (475/669)   [Kremote: Compressing objects:  72% (482/669)   [Kremote: Compressing objects:  73% (489/669)   [Kremote: Compressing objects:  74% (496/669)   [Kremote: Compressing objects:  75% (502/669)   [Kremote: Compressing objects:  76% (509/669)   [Kremote: Compressing objects:  77% (516/669)   [Kremote: Compressing objects:  78% (522/669)   [Kremote: Compressing objects:  79% (529/669)   [Kremote: Compressing objects:  80% (536/669)   [Kremote: Compressing objects:  81% (542/669)   [Kremote: Compressing objects:  82% (549/669)   [Kremote: Compressing objects:  83% (556/669)   [Kremote: Compressing objects:  84% (562/669)   [Kremote: Compressing objects:  85% (569/669)   [Kremote: Compressing objects:  86% (576/669)   [Kremote: Compressing objects:  87% (583/669)   [Kremote: Compressing objects:  88% (589/669)   [Kremote: Compressing objects:  89% (596/669)   [Kremote: Compressing objects:  90% (603/669)   [Kremote: Compressing objects:  91% (609/669)   [Kremote: Compressing objects:  92% (616/669)   [Kremote: Compressing objects:  93% (623/669)   [Kremote: Compressing objects:  94% (629/669)   [Kremote: Compressing objects:  95% (636/669)   [Kremote: Compressing objects:  96% (643/669)   [Kremote: Compressing objects:  97% (649/669)   [Kremote: Compressing objects:  98% (656/669)   [Kremote: Compressing objects:  99% (663/669)   [Kremote: Compressing objects: 100% (669/669)   [Kremote: Compressing objects: 100% (669/669), done.[K
Receiving objects:   0% (1/1132)   Receiving objects:   1% (12/1132)   Receiving objects:   2% (23/1132)   Receiving objects:   3% (34/1132)   Receiving objects:   4% (46/1132)   Receiving objects:   5% (57/1132)   Receiving objects:   6% (68/1132)   Receiving objects:   7% (80/1132)   Receiving objects:   8% (91/1132)   Receiving objects:   9% (102/1132)   Receiving objects:  10% (114/1132)   Receiving objects:  11% (125/1132)   Receiving objects:  12% (136/1132)   Receiving objects:  13% (148/1132)   Receiving objects:  14% (159/1132)   Receiving objects:  15% (170/1132)   Receiving objects:  16% (182/1132)   Receiving objects:  17% (193/1132)   Receiving objects:  18% (204/1132)   Receiving objects:  19% (216/1132)   Receiving objects:  20% (227/1132)   Receiving objects:  21% (238/1132)   Receiving objects:  22% (250/1132)   Receiving objects:  23% (261/1132)   Receiving objects:  24% (272/1132)   Receiving objects:  25% (283/1132)   Receiving objects:  26% (295/1132)   Receiving objects:  27% (306/1132)   Receiving objects:  28% (317/1132)   Receiving objects:  29% (329/1132)   Receiving objects:  30% (340/1132)   Receiving objects:  31% (351/1132)   Receiving objects:  32% (363/1132)   Receiving objects:  33% (374/1132)   Receiving objects:  34% (385/1132)   Receiving objects:  35% (397/1132)   Receiving objects:  36% (408/1132)   Receiving objects:  37% (419/1132)   Receiving objects:  38% (431/1132)   Receiving objects:  39% (442/1132)   Receiving objects:  40% (453/1132)   Receiving objects:  41% (465/1132)   Receiving objects:  42% (476/1132)   Receiving objects:  43% (487/1132)   Receiving objects:  44% (499/1132)   Receiving objects:  45% (510/1132)   Receiving objects:  46% (521/1132)   Receiving objects:  47% (533/1132)   Receiving objects:  48% (544/1132)   Receiving objects:  49% (555/1132)   Receiving objects:  50% (566/1132)   Receiving objects:  51% (578/1132)   Receiving objects:  52% (589/1132)   Receiving objects:  53% (600/1132)   Receiving objects:  54% (612/1132)   Receiving objects:  55% (623/1132)   Receiving objects:  56% (634/1132)   Receiving objects:  57% (646/1132)   Receiving objects:  58% (657/1132)   Receiving objects:  59% (668/1132)   Receiving objects:  60% (680/1132)   Receiving objects:  61% (691/1132)   Receiving objects:  62% (702/1132)   Receiving objects:  63% (714/1132)   Receiving objects:  64% (725/1132)   Receiving objects:  65% (736/1132)   Receiving objects:  66% (748/1132)   Receiving objects:  67% (759/1132)   Receiving objects:  68% (770/1132)   Receiving objects:  69% (782/1132)   Receiving objects:  70% (793/1132)   Receiving objects:  71% (804/1132)   Receiving objects:  72% (816/1132)   Receiving objects:  73% (827/1132)   Receiving objects:  74% (838/1132)   Receiving objects:  75% (849/1132)   Receiving objects:  76% (861/1132)   Receiving objects:  77% (872/1132)   Receiving objects:  78% (883/1132)   Receiving objects:  79% (895/1132)   Receiving objects:  80% (906/1132)   Receiving objects:  81% (917/1132)   Receiving objects:  82% (929/1132)   Receiving objects:  83% (940/1132)   Receiving objects:  84% (951/1132)   Receiving objects:  85% (963/1132)   Receiving objects:  86% (974/1132)   Receiving objects:  87% (985/1132)   Receiving objects:  88% (997/1132)   Receiving objects:  89% (1008/1132)   Receiving objects:  90% (1019/1132)   Receiving objects:  91% (1031/1132)   Receiving objects:  92% (1042/1132)   Receiving objects:  93% (1053/1132)   Receiving objects:  94% (1065/1132)   Receiving objects:  95% (1076/1132)   Receiving objects:  96% (1087/1132)   Receiving objects:  97% (1099/1132)   Receiving objects:  98% (1110/1132)   remote: Total 1132 (delta 570), reused 781 (delta 390), pack-reused 0[K
Receiving objects:  99% (1121/1132)   Receiving objects: 100% (1132/1132)   Receiving objects: 100% (1132/1132), 2.01 MiB | 9.74 MiB/s, done.
Resolving deltas:   0% (0/570)   Resolving deltas:   1% (9/570)   Resolving deltas:   6% (36/570)   Resolving deltas:   9% (53/570)   Resolving deltas:  10% (59/570)   Resolving deltas:  11% (63/570)   Resolving deltas:  12% (73/570)   Resolving deltas:  13% (76/570)   Resolving deltas:  14% (81/570)   Resolving deltas:  15% (87/570)   Resolving deltas:  21% (125/570)   Resolving deltas:  22% (126/570)   Resolving deltas:  23% (136/570)   Resolving deltas:  24% (139/570)   Resolving deltas:  26% (149/570)   Resolving deltas:  27% (155/570)   Resolving deltas:  28% (161/570)   Resolving deltas:  29% (168/570)   Resolving deltas:  30% (174/570)   Resolving deltas:  31% (177/570)   Resolving deltas:  32% (184/570)   Resolving deltas:  34% (198/570)   Resolving deltas:  36% (206/570)   Resolving deltas:  41% (239/570)   Resolving deltas:  42% (243/570)   Resolving deltas:  43% (248/570)   Resolving deltas:  46% (267/570)   Resolving deltas:  48% (275/570)   Resolving deltas:  49% (281/570)   Resolving deltas:  50% (285/570)   Resolving deltas:  51% (291/570)   Resolving deltas:  52% (297/570)   Resolving deltas:  53% (304/570)   Resolving deltas:  54% (308/570)   Resolving deltas:  55% (314/570)   Resolving deltas:  57% (325/570)   Resolving deltas:  58% (331/570)   Resolving deltas:  60% (346/570)   Resolving deltas:  62% (354/570)   Resolving deltas:  63% (363/570)   Resolving deltas:  65% (373/570)   Resolving deltas:  66% (380/570)   Resolving deltas:  67% (383/570)   Resolving deltas:  69% (397/570)   Resolving deltas:  70% (403/570)   Resolving deltas:  71% (406/570)   Resolving deltas:  72% (412/570)   Resolving deltas:  73% (421/570)   Resolving deltas:  75% (432/570)   Resolving deltas:  76% (438/570)   Resolving deltas:  77% (444/570)   Resolving deltas:  80% (456/570)   Resolving deltas:  82% (468/570)   Resolving deltas:  83% (474/570)   Resolving deltas:  84% (484/570)   Resolving deltas:  85% (485/570)   Resolving deltas:  86% (493/570)   Resolving deltas:  87% (496/570)   Resolving deltas:  88% (502/570)   Resolving deltas:  89% (512/570)   Resolving deltas:  90% (513/570)   Resolving deltas:  92% (528/570)   Resolving deltas:  93% (532/570)   Resolving deltas:  94% (536/570)   Resolving deltas:  95% (542/570)   Resolving deltas:  97% (558/570)   Resolving deltas:  98% (561/570)   Resolving deltas:  99% (566/570)   Resolving deltas: 100% (570/570)   Resolving deltas: 100% (570/570), done.
travis_time:end:08d43e1c:start=1557482335818812009,finish=1557482337175774597,duration=1356962588[0K$ cd jashkenas/coffeescript
travis_time:start:0fca028c[0K$ git fetch origin +refs/pull/5211/merge:
remote: Enumerating objects: 1337, done.[K
remote: Counting objects:   0% (1/1140)   [Kremote: Counting objects:   1% (12/1140)   [Kremote: Counting objects:   2% (23/1140)   [Kremote: Counting objects:   3% (35/1140)   [Kremote: Counting objects:   4% (46/1140)   [Kremote: Counting objects:   5% (57/1140)   [Kremote: Counting objects:   6% (69/1140)   [Kremote: Counting objects:   7% (80/1140)   [Kremote: Counting objects:   8% (92/1140)   [Kremote: Counting objects:   9% (103/1140)   [Kremote: Counting objects:  10% (114/1140)   [Kremote: Counting objects:  11% (126/1140)   [Kremote: Counting objects:  12% (137/1140)   [Kremote: Counting objects:  13% (149/1140)   [Kremote: Counting objects:  14% (160/1140)   [Kremote: Counting objects:  15% (171/1140)   [Kremote: Counting objects:  16% (183/1140)   [Kremote: Counting objects:  17% (194/1140)   [Kremote: Counting objects:  18% (206/1140)   [Kremote: Counting objects:  19% (217/1140)   [Kremote: Counting objects:  20% (228/1140)   [Kremote: Counting objects:  21% (240/1140)   [Kremote: Counting objects:  22% (251/1140)   [Kremote: Counting objects:  23% (263/1140)   [Kremote: Counting objects:  24% (274/1140)   [Kremote: Counting objects:  25% (285/1140)   [Kremote: Counting objects:  26% (297/1140)   [Kremote: Counting objects:  27% (308/1140)   [Kremote: Counting objects:  28% (320/1140)   [Kremote: Counting objects:  29% (331/1140)   [Kremote: Counting objects:  30% (342/1140)   [Kremote: Counting objects:  31% (354/1140)   [Kremote: Counting objects:  32% (365/1140)   [Kremote: Counting objects:  33% (377/1140)   [Kremote: Counting objects:  34% (388/1140)   [Kremote: Counting objects:  35% (399/1140)   [Kremote: Counting objects:  36% (411/1140)   [Kremote: Counting objects:  37% (422/1140)   [Kremote: Counting objects:  38% (434/1140)   [Kremote: Counting objects:  39% (445/1140)   [Kremote: Counting objects:  40% (456/1140)   [Kremote: Counting objects:  41% (468/1140)   [Kremote: Counting objects:  42% (479/1140)   [Kremote: Counting objects:  43% (491/1140)   [Kremote: Counting objects:  44% (502/1140)   [Kremote: Counting objects:  45% (513/1140)   [Kremote: Counting objects:  46% (525/1140)   [Kremote: Counting objects:  47% (536/1140)   [Kremote: Counting objects:  48% (548/1140)   [Kremote: Counting objects:  49% (559/1140)   [Kremote: Counting objects:  50% (570/1140)   [Kremote: Counting objects:  51% (582/1140)   [Kremote: Counting objects:  52% (593/1140)   [Kremote: Counting objects:  53% (605/1140)   [Kremote: Counting objects:  54% (616/1140)   [Kremote: Counting objects:  55% (627/1140)   [Kremote: Counting objects:  56% (639/1140)   [Kremote: Counting objects:  57% (650/1140)   [Kremote: Counting objects:  58% (662/1140)   [Kremote: Counting objects:  59% (673/1140)   [Kremote: Counting objects:  60% (684/1140)   [Kremote: Counting objects:  61% (696/1140)   [Kremote: Counting objects:  62% (707/1140)   [Kremote: Counting objects:  63% (719/1140)   [Kremote: Counting objects:  64% (730/1140)   [Kremote: Counting objects:  65% (741/1140)   [Kremote: Counting objects:  66% (753/1140)   [Kremote: Counting objects:  67% (764/1140)   [Kremote: Counting objects:  68% (776/1140)   [Kremote: Counting objects:  69% (787/1140)   [Kremote: Counting objects:  70% (798/1140)   [Kremote: Counting objects:  71% (810/1140)   [Kremote: Counting objects:  72% (821/1140)   [Kremote: Counting objects:  73% (833/1140)   [Kremote: Counting objects:  74% (844/1140)   [Kremote: Counting objects:  75% (855/1140)   [Kremote: Counting objects:  76% (867/1140)   [Kremote: Counting objects:  77% (878/1140)   [Kremote: Counting objects:  78% (890/1140)   [Kremote: Counting objects:  79% (901/1140)   [Kremote: Counting objects:  80% (912/1140)   [Kremote: Counting objects:  81% (924/1140)   [Kremote: Counting objects:  82% (935/1140)   [Kremote: Counting objects:  83% (947/1140)   [Kremote: Counting objects:  84% (958/1140)   [Kremote: Counting objects:  85% (969/1140)   [Kremote: Counting objects:  86% (981/1140)   [Kremote: Counting objects:  87% (992/1140)   [Kremote: Counting objects:  88% (1004/1140)   [Kremote: Counting objects:  89% (1015/1140)   [Kremote: Counting objects:  90% (1026/1140)   [Kremote: Counting objects:  91% (1038/1140)   [Kremote: Counting objects:  92% (1049/1140)   [Kremote: Counting objects:  93% (1061/1140)   [Kremote: Counting objects:  94% (1072/1140)   [Kremote: Counting objects:  95% (1083/1140)   [Kremote: Counting objects:  96% (1095/1140)   [Kremote: Counting objects:  97% (1106/1140)   [Kremote: Counting objects:  98% (1118/1140)   [Kremote: Counting objects:  99% (1129/1140)   [Kremote: Counting objects: 100% (1140/1140)   [Kremote: Counting objects: 100% (1140/1140), done.[K
remote: Compressing objects:   0% (1/218)   [Kremote: Compressing objects:   1% (3/218)   [Kremote: Compressing objects:   2% (5/218)   [Kremote: Compressing objects:   3% (7/218)   [Kremote: Compressing objects:   4% (9/218)   [Kremote: Compressing objects:   5% (11/218)   [Kremote: Compressing objects:   6% (14/218)   [Kremote: Compressing objects:   7% (16/218)   [Kremote: Compressing objects:   8% (18/218)   [Kremote: Compressing objects:   9% (20/218)   [Kremote: Compressing objects:  10% (22/218)   [Kremote: Compressing objects:  11% (24/218)   [Kremote: Compressing objects:  12% (27/218)   [Kremote: Compressing objects:  13% (29/218)   [Kremote: Compressing objects:  14% (31/218)   [Kremote: Compressing objects:  15% (33/218)   [Kremote: Compressing objects:  16% (35/218)   [Kremote: Compressing objects:  17% (38/218)   [Kremote: Compressing objects:  18% (40/218)   [Kremote: Compressing objects:  19% (42/218)   [Kremote: Compressing objects:  20% (44/218)   [Kremote: Compressing objects:  21% (46/218)   [Kremote: Compressing objects:  22% (48/218)   [Kremote: Compressing objects:  23% (51/218)   [Kremote: Compressing objects:  24% (53/218)   [Kremote: Compressing objects:  25% (55/218)   [Kremote: Compressing objects:  26% (57/218)   [Kremote: Compressing objects:  27% (59/218)   [Kremote: Compressing objects:  28% (62/218)   [Kremote: Compressing objects:  29% (64/218)   [Kremote: Compressing objects:  30% (66/218)   [Kremote: Compressing objects:  31% (68/218)   [Kremote: Compressing objects:  32% (70/218)   [Kremote: Compressing objects:  33% (72/218)   [Kremote: Compressing objects:  34% (75/218)   [Kremote: Compressing objects:  35% (77/218)   [Kremote: Compressing objects:  36% (79/218)   [Kremote: Compressing objects:  37% (81/218)   [Kremote: Compressing objects:  38% (83/218)   [Kremote: Compressing objects:  39% (86/218)   [Kremote: Compressing objects:  40% (88/218)   [Kremote: Compressing objects:  41% (90/218)   [Kremote: Compressing objects:  42% (92/218)   [Kremote: Compressing objects:  43% (94/218)   [Kremote: Compressing objects:  44% (96/218)   [Kremote: Compressing objects:  45% (99/218)   [Kremote: Compressing objects:  46% (101/218)   [Kremote: Compressing objects:  47% (103/218)   [Kremote: Compressing objects:  48% (105/218)   [Kremote: Compressing objects:  49% (107/218)   [Kremote: Compressing objects:  50% (109/218)   [Kremote: Compressing objects:  51% (112/218)   [Kremote: Compressing objects:  52% (114/218)   [Kremote: Compressing objects:  53% (116/218)   [Kremote: Compressing objects:  54% (118/218)   [Kremote: Compressing objects:  55% (120/218)   [Kremote: Compressing objects:  56% (123/218)   [Kremote: Compressing objects:  57% (125/218)   [Kremote: Compressing objects:  58% (127/218)   [Kremote: Compressing objects:  59% (129/218)   [Kremote: Compressing objects:  60% (131/218)   [Kremote: Compressing objects:  61% (133/218)   [Kremote: Compressing objects:  62% (136/218)   [Kremote: Compressing objects:  63% (138/218)   [Kremote: Compressing objects:  64% (140/218)   [Kremote: Compressing objects:  65% (142/218)   [Kremote: Compressing objects:  66% (144/218)   [Kremote: Compressing objects:  67% (147/218)   [Kremote: Compressing objects:  68% (149/218)   [Kremote: Compressing objects:  69% (151/218)   [Kremote: Compressing objects:  70% (153/218)   [Kremote: Compressing objects:  71% (155/218)   [Kremote: Compressing objects:  72% (157/218)   [Kremote: Compressing objects:  73% (160/218)   [Kremote: Compressing objects:  74% (162/218)   [Kremote: Compressing objects:  75% (164/218)   [Kremote: Compressing objects:  76% (166/218)   [Kremote: Compressing objects:  77% (168/218)   [Kremote: Compressing objects:  78% (171/218)   [Kremote: Compressing objects:  79% (173/218)   [Kremote: Compressing objects:  80% (175/218)   [Kremote: Compressing objects:  81% (177/218)   [Kremote: Compressing objects:  82% (179/218)   [Kremote: Compressing objects:  83% (181/218)   [Kremote: Compressing objects:  84% (184/218)   [Kremote: Compressing objects:  85% (186/218)   [Kremote: Compressing objects:  86% (188/218)   [Kremote: Compressing objects:  87% (190/218)   [Kremote: Compressing objects:  88% (192/218)   [Kremote: Compressing objects:  89% (195/218)   [Kremote: Compressing objects:  90% (197/218)   [Kremote: Compressing objects:  91% (199/218)   [Kremote: Compressing objects:  92% (201/218)   [Kremote: Compressing objects:  93% (203/218)   [Kremote: Compressing objects:  94% (205/218)   [Kremote: Compressing objects:  95% (208/218)   [Kremote: Compressing objects:  96% (210/218)   [Kremote: Compressing objects:  97% (212/218)   [Kremote: Compressing objects:  98% (214/218)   [Kremote: Compressing objects:  99% (216/218)   [Kremote: Compressing objects: 100% (218/218)   [Kremote: Compressing objects: 100% (218/218), done.[K
Receiving objects:   0% (1/908)   Receiving objects:   1% (10/908)   Receiving objects:   2% (19/908)   Receiving objects:   3% (28/908)   Receiving objects:   4% (37/908)   Receiving objects:   5% (46/908)   Receiving objects:   6% (55/908)   Receiving objects:   7% (64/908)   Receiving objects:   8% (73/908)   Receiving objects:   9% (82/908)   Receiving objects:  10% (91/908)   Receiving objects:  11% (100/908)   Receiving objects:  12% (109/908)   Receiving objects:  13% (119/908)   Receiving objects:  14% (128/908)   Receiving objects:  15% (137/908)   Receiving objects:  16% (146/908)   Receiving objects:  17% (155/908)   Receiving objects:  18% (164/908)   Receiving objects:  19% (173/908)   Receiving objects:  20% (182/908)   Receiving objects:  21% (191/908)   Receiving objects:  22% (200/908)   Receiving objects:  23% (209/908)   Receiving objects:  24% (218/908)   Receiving objects:  25% (227/908)   Receiving objects:  26% (237/908)   Receiving objects:  27% (246/908)   Receiving objects:  28% (255/908)   Receiving objects:  29% (264/908)   Receiving objects:  30% (273/908)   Receiving objects:  31% (282/908)   Receiving objects:  32% (291/908)   Receiving objects:  33% (300/908)   Receiving objects:  34% (309/908)   Receiving objects:  35% (318/908)   Receiving objects:  36% (327/908)   Receiving objects:  37% (336/908)   Receiving objects:  38% (346/908)   Receiving objects:  39% (355/908)   Receiving objects:  40% (364/908)   Receiving objects:  41% (373/908)   Receiving objects:  42% (382/908)   Receiving objects:  43% (391/908)   Receiving objects:  44% (400/908)   Receiving objects:  45% (409/908)   Receiving objects:  46% (418/908)   Receiving objects:  47% (427/908)   Receiving objects:  48% (436/908)   Receiving objects:  49% (445/908)   Receiving objects:  50% (454/908)   Receiving objects:  51% (464/908)   Receiving objects:  52% (473/908)   Receiving objects:  53% (482/908)   Receiving objects:  54% (491/908)   Receiving objects:  55% (500/908)   Receiving objects:  56% (509/908)   Receiving objects:  57% (518/908)   Receiving objects:  58% (527/908)   Receiving objects:  59% (536/908)   Receiving objects:  60% (545/908)   Receiving objects:  61% (554/908)   Receiving objects:  62% (563/908)   Receiving objects:  63% (573/908)   Receiving objects:  64% (582/908)   Receiving objects:  65% (591/908)   Receiving objects:  66% (600/908)   Receiving objects:  67% (609/908)   Receiving objects:  68% (618/908)   Receiving objects:  69% (627/908)   Receiving objects:  70% (636/908)   Receiving objects:  71% (645/908)   Receiving objects:  72% (654/908)   Receiving objects:  73% (663/908)   Receiving objects:  74% (672/908)   Receiving objects:  75% (681/908)   Receiving objects:  76% (691/908)   Receiving objects:  77% (700/908)   Receiving objects:  78% (709/908)   Receiving objects:  79% (718/908)   Receiving objects:  80% (727/908)   Receiving objects:  81% (736/908)   Receiving objects:  82% (745/908)   Receiving objects:  83% (754/908)   Receiving objects:  84% (763/908)   Receiving objects:  85% (772/908)   Receiving objects:  86% (781/908)   Receiving objects:  87% (790/908)   Receiving objects:  88% (800/908)   Receiving objects:  89% (809/908)   Receiving objects:  90% (818/908)   Receiving objects:  91% (827/908)   Receiving objects:  92% (836/908)   Receiving objects:  93% (845/908)   Receiving objects:  94% (854/908)   remote: Total 908 (delta 731), reused 796 (delta 622), pack-reused 0[K
Receiving objects:  95% (863/908)   Receiving objects:  96% (872/908)   Receiving objects:  97% (881/908)   Receiving objects:  98% (890/908)   Receiving objects:  99% (899/908)   Receiving objects: 100% (908/908)   Receiving objects: 100% (908/908), 708.56 KiB | 9.71 MiB/s, done.
Resolving deltas:   0% (0/731)   Resolving deltas:   4% (31/731)   Resolving deltas:   5% (37/731)   Resolving deltas:   6% (51/731)   Resolving deltas:   7% (56/731)   Resolving deltas:  10% (76/731)   Resolving deltas:  13% (97/731)   Resolving deltas:  14% (104/731)   Resolving deltas:  15% (110/731)   Resolving deltas:  17% (129/731)   Resolving deltas:  19% (143/731)   Resolving deltas:  20% (153/731)   Resolving deltas:  21% (154/731)   Resolving deltas:  22% (162/731)   Resolving deltas:  23% (171/731)   Resolving deltas:  24% (178/731)   Resolving deltas:  29% (218/731)   Resolving deltas:  30% (220/731)   Resolving deltas:  32% (235/731)   Resolving deltas:  37% (273/731)   Resolving deltas:  39% (286/731)   Resolving deltas:  41% (300/731)   Resolving deltas:  47% (349/731)   Resolving deltas:  48% (351/731)   Resolving deltas:  49% (362/731)   Resolving deltas:  51% (379/731)   Resolving deltas:  52% (381/731)   Resolving deltas:  55% (409/731)   Resolving deltas:  57% (419/731)   Resolving deltas:  59% (436/731)   Resolving deltas:  68% (504/731)   Resolving deltas:  69% (507/731)   Resolving deltas:  70% (517/731)   Resolving deltas:  78% (575/731)   Resolving deltas:  79% (579/731)   Resolving deltas:  80% (587/731)   Resolving deltas:  81% (593/731)   Resolving deltas:  82% (600/731)   Resolving deltas:  83% (607/731)   Resolving deltas:  90% (659/731)   Resolving deltas:  91% (667/731)   Resolving deltas:  92% (673/731)   Resolving deltas:  93% (685/731)   Resolving deltas:  97% (714/731)   Resolving deltas:  98% (717/731)   Resolving deltas:  99% (724/731)   Resolving deltas: 100% (731/731)   Resolving deltas: 100% (731/731), completed with 58 local objects.
From https://github.com/jashkenas/coffeescript
 * branch            refs/pull/5211/merge -> FETCH_HEAD
travis_time:end:0fca028c:start=1557482337179957381,finish=1557482338136948036,duration=956990655[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0K
travis_fold:start:nvm.install[0Ktravis_time:start:084adc9a[0K$ nvm install 8
Downloading and installing node v8.16.0...
Downloading https://nodejs.org/dist/v8.16.0/node-v8.16.0-linux-x64.tar.xz...
Computing checksum with sha256sum
Checksums matched!
Now using node v8.16.0 (npm v6.4.1)
travis_time:end:084adc9a:start=1557482338957888156,finish=1557482342490921499,duration=3533033343[0Ktravis_fold:end:nvm.install[0K
travis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=${TRAVIS_HOME}/.casher
travis_time:start:00f12800[0K$ Installing caching utilities
travis_time:end:00f12800:start=1557482347320205761,finish=1557482347461171077,duration=140965316[0Ktravis_time:start:0c77f13c[0Ktravis_time:end:0c77f13c:start=1557482347466733228,finish=1557482347470013015,duration=3279787[0Ktravis_time:start:093b024e[0K[32;1mattempting to download cache archive[0m
[32;1mfetching PR.5211/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--node-8.tgz[0m
[32;1mfetching PR.5211/cache--node-8.tgz[0m
[32;1mfetching ast/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--node-8.tgz[0m
[32;1mfetching ast/cache--node-8.tgz[0m
[32;1mfetching master/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--node-8.tgz[0m
[32;1mfound cache[0m
travis_time:end:093b024e:start=1557482347474072929,finish=1557482349331221924,duration=1857148995[0Ktravis_time:start:13fe7738[0Ktravis_time:end:13fe7738:start=1557482349335607710,finish=1557482349338935837,duration=3328127[0Ktravis_time:start:22691fc1[0K[32;1madding /home/travis/build/jashkenas/coffeescript/node_modules to cache[0m
[32;1mcreating directory /home/travis/build/jashkenas/coffeescript/node_modules[0m
travis_time:end:22691fc1:start=1557482349342880015,finish=1557482351987666966,duration=2644786951[0Ktravis_fold:end:cache.1[0K
$ node --version
v8.16.0
$ npm --version
6.4.1
$ nvm --version
0.34.0

travis_fold:start:install.npm[0Ktravis_time:start:06732309[0K$ npm ci 
[37;40mnpm[0m [0m[30;43mWARN[0m [0m[35mprepare[0m removing existing node_modules/ before installation
[0m
> fsevents@1.2.7 install /home/travis/build/jashkenas/coffeescript/node_modules/fsevents
> node install

added 503 packages in 7.751s
travis_time:end:06732309:start=1557482352786744480,finish=1557482360881952596,duration=8095208116[0Ktravis_fold:end:install.npm[0K
travis_time:start:091cdd9a[0K$ node ./bin/cake test
[0;31mfailed 1 and passed 1391 tests in 12.81 seconds[0m[0m 

[0;31m  /home/travis/build/jashkenas/coffeescript/test/strict.coffee:81
    eq("\x008", `\08`);
                  

SyntaxError: Octal escape sequences are not allowed in strict mode.
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:617:28)
    at Object.CoffeeScript.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/index.js:67:23)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at Object.action (/home/travis/build/jashkenas/coffeescript/Cakefile:679:12)
    at invoke (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:57:26)
    at Object.exports.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:87:20)
    at Object.<anonymous> (/home/travis/build/jashkenas/coffeescript/bin/cake:22:42)
    at Module._compile (module.js:653:30)
    at Object.Module._extensions..js (module.js:664:10)
    at Module.load (module.js:566:32)
    at tryModuleLoad (module.js:506:12)
    at Function.Module._load (module.js:498:3)
    at Function.Module.runMain (module.js:694:10)
    at startup (bootstrap_node.js:204:16)
    at bootstrap_node.js:625:3
[0m 
travis_time:end:091cdd9a:start=1557482360886916900,finish=1557482374275610555,duration=13388693655[0K[31;1mThe command "node ./bin/cake test" exited with 1.[0m

travis_time:start:03e33916[0K$ node --harmony ./bin/cake test
[0;31mfailed 1 and passed 1393 tests in 12.80 seconds[0m[0m 

[0;31m  /home/travis/build/jashkenas/coffeescript/test/strict.coffee:81
    eq("\x008", `\08`);
                  

SyntaxError: Octal escape sequences are not allowed in strict mode.
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:617:28)
    at Object.CoffeeScript.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/index.js:67:23)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at Object.action (/home/travis/build/jashkenas/coffeescript/Cakefile:679:12)
    at invoke (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:57:26)
    at Object.exports.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:87:20)
    at Object.<anonymous> (/home/travis/build/jashkenas/coffeescript/bin/cake:22:42)
    at Module._compile (module.js:653:30)
    at Object.Module._extensions..js (module.js:664:10)
    at Module.load (module.js:566:32)
    at tryModuleLoad (module.js:506:12)
    at Function.Module._load (module.js:498:3)
    at Function.Module.runMain (module.js:694:10)
    at startup (bootstrap_node.js:204:16)
    at bootstrap_node.js:625:3
[0m 
travis_time:end:03e33916:start=1557482374280151528,finish=1557482387597792612,duration=13317641084[0K[31;1mThe command "node --harmony ./bin/cake test" exited with 1.[0m

travis_time:start:08d35983[0K$ node ./bin/cake test:browser
[0;31mfailed 1 and passed 1362 tests in 11.42 seconds[0m[0m 

[0;31m  /home/travis/build/jashkenas/coffeescript/test/strict.coffee:81
    eq("\x008", `\08`);
                  

SyntaxError: Octal escape sequences are not allowed in strict mode.
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:617:28)
    at Object.CoffeeScript.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/index.js:67:23)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at Object.action (/home/travis/build/jashkenas/coffeescript/Cakefile:692:12)
    at invoke (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:57:26)
    at Object.exports.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/cake.js:87:20)
    at Object.<anonymous> (/home/travis/build/jashkenas/coffeescript/bin/cake:22:42)
    at Module._compile (module.js:653:30)
    at Object.Module._extensions..js (module.js:664:10)
    at Module.load (module.js:566:32)
    at tryModuleLoad (module.js:506:12)
    at Function.Module._load (module.js:498:3)
    at Function.Module.runMain (module.js:694:10)
    at startup (bootstrap_node.js:204:16)
    at bootstrap_node.js:625:3
[0m 
travis_time:end:08d35983:start=1557482387602639229,finish=1557482399639714819,duration=12037075590[0K[31;1mThe command "node ./bin/cake test:browser" exited with 1.[0m

travis_time:start:0b6b800b[0K$ node ./bin/cake test:integrations
(node:5701) UnhandledPromiseRejectionWarning: undefined
(node:5701) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 4)
(node:5701) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[0;31mfailed 141 and passed 980 tests in 8.29 seconds[0m[0m 

[0;31m  AST as expected for Block node[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Property [0mtype[0;31m: expected [0mundefined[0;31m to equal [0mFile[0;31m
  Expected AST output to include:
  [0m{
  "type": "File",
  "program": {
    "type": "Program",
    "body": [
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "Identifier"
        }
      }
    ],
    "directives": []
  },
  "comments": []
}[0;31m
  but instead it was:
  [0m"(function() {\n  a;\n\n\n}).call(this);\n"[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at deepStrictIncludeExpectedProperties (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return deepStrictIncludeExpectedProperties(CoffeeScript.compile('a', {
    ast: true
  }), {
    type: 'File',
    program: {
      type: 'Program',
      // sourceType: 'module'
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'Identifier'
          }
        }
      ],
      directives: []
    },
    comments: []
  });
}

[0;31m  AST as expected for NumberLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('42', {
    type: 'NumericLiteral',
    value: 42,
    extra: {
      rawValue: 42,
      raw: '42'
    }
  });
  return testExpression('0xE1', {
    type: 'NumericLiteral',
    value: 225,
    extra: {
      rawValue: 225,
      raw: '0xE1'
    }
  });
}

[0;31m  AST as expected for InfinityLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('Infinity', {
    type: 'Identifier',
    name: 'Infinity'
  });
  return testExpression('2e308', {
    type: 'NumericLiteral',
    value: 2e308,
    extra: {
      raw: '2e308',
      rawValue: 2e308
    }
  });
}

[0;31m  AST as expected for NaNLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('NaN', {
    type: 'Identifier',
    name: 'NaN'
  });
}

[0;31m  AST as expected for StringLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  // Just a standalone string literal would be treated as a directive,
  // so embed the string literal in an enclosing expression (e.g. a call).
  testExpression('a "string cheese"', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'StringLiteral',
        value: 'string cheese',
        extra: {
          raw: '"string cheese"'
        }
      }
    ]
  });
  testExpression("b 'cheese string'", {
    type: 'CallExpression',
    arguments: [
      {
        type: 'StringLiteral',
        value: 'cheese string',
        extra: {
          raw: "'cheese string'"
        }
      }
    ]
  });
  return testExpression("'''heredoc'''", {
    type: 'TemplateLiteral',
    expressions: [],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: 'heredoc'
        },
        tail: true
      }
    ],
    quote: "'''"
  });
}

[0;31m  AST as expected for IdentifierLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('id', {
    type: 'Identifier',
    name: 'id'
  });
}

[0;31m  AST as expected for JSXTag node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('<CSXY />', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'CSXY'
      },
      attributes: [],
      selfClosing: true
    },
    closingElement: null,
    children: []
  });
  testExpression('<div></div>', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'div'
      },
      attributes: [],
      selfClosing: false
    },
    closingElement: {
      type: 'JSXClosingElement',
      name: {
        type: 'JSXIdentifier',
        name: 'div'
      }
    },
    children: []
  });
  testExpression('<A.B />', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXMemberExpression',
        object: {
          type: 'JSXIdentifier',
          name: 'A'
        },
        property: {
          type: 'JSXIdentifier',
          name: 'B'
        }
      },
      attributes: [],
      selfClosing: true
    },
    closingElement: null,
    children: []
  });
  testExpression('<Tag.Name.Here></Tag.Name.Here>', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXMemberExpression',
        object: {
          type: 'JSXMemberExpression',
          object: {
            type: 'JSXIdentifier',
            name: 'Tag'
          },
          property: {
            type: 'JSXIdentifier',
            name: 'Name'
          }
        },
        property: {
          type: 'JSXIdentifier',
          name: 'Here'
        }
      },
      attributes: [],
      selfClosing: false
    },
    closingElement: {
      type: 'JSXClosingElement',
      name: {
        type: 'JSXMemberExpression',
        object: {
          type: 'JSXMemberExpression',
          object: {
            type: 'JSXIdentifier',
            name: 'Tag'
          },
          property: {
            type: 'JSXIdentifier',
            name: 'Name'
          }
        },
        property: {
          type: 'JSXIdentifier',
          name: 'Here'
        }
      }
    },
    children: []
  });
  testExpression('<></>', {
    type: 'JSXFragment',
    openingFragment: {
      type: 'JSXOpeningFragment'
    },
    closingFragment: {
      type: 'JSXClosingFragment'
    },
    children: []
  });
  testExpression('<div a b="c" d={e} {...f} />', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'div'
      },
      attributes: [
        {
          type: 'JSXAttribute',
          name: {
            type: 'JSXIdentifier',
            name: 'a'
          }
        },
        {
          type: 'JSXAttribute',
          name: {
            type: 'JSXIdentifier',
            name: 'b'
          },
          value: {
            type: 'StringLiteral',
            value: 'c'
          }
        },
        {
          type: 'JSXAttribute',
          name: {
            type: 'JSXIdentifier',
            name: 'd'
          },
          value: {
            type: 'JSXExpressionContainer',
            expression: {
              type: 'Identifier',
              name: 'e'
            }
          }
        },
        {
          type: 'JSXSpreadAttribute',
          argument: {
            type: 'Identifier',
            name: 'f'
          },
          postfix: false
        }
      ],
      selfClosing: true
    },
    closingElement: null,
    children: []
  });
  testExpression('<div {f...} />', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      attributes: [
        {
          type: 'JSXSpreadAttribute',
          argument: {
            type: 'Identifier',
            name: 'f'
          },
          postfix: true
        }
      ]
    }
  });
  testExpression('<div>abc</div>', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'div'
      },
      attributes: [],
      selfClosing: false
    },
    closingElement: {
      type: 'JSXClosingElement',
      name: {
        type: 'JSXIdentifier',
        name: 'div'
      }
    },
    children: [
      {
        type: 'JSXText',
        extra: {
          raw: 'abc'
        },
        value: 'abc'
      }
    ]
  });
  testExpression('<a>\n  {b}\n  <c />\n</a>', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'a'
      },
      attributes: [],
      selfClosing: false
    },
    closingElement: {
      type: 'JSXClosingElement',
      name: {
        type: 'JSXIdentifier',
        name: 'a'
      }
    },
    children: [
      {
        type: 'JSXText',
        extra: {
          raw: '\n  '
        },
        value: '\n  '
      },
      {
        type: 'JSXExpressionContainer',
        expression: ID('b')
      },
      {
        type: 'JSXText',
        extra: {
          raw: '\n  '
        },
        value: '\n  '
      },
      {
        type: 'JSXElement',
        openingElement: {
          type: 'JSXOpeningElement',
          name: {
            type: 'JSXIdentifier',
            name: 'c'
          },
          selfClosing: true
        },
        closingElement: null,
        children: []
      },
      {
        type: 'JSXText',
        extra: {
          raw: '\n'
        },
        value: '\n'
      }
    ]
  });
  testExpression('<>abc{}</>', {
    type: 'JSXFragment',
    openingFragment: {
      type: 'JSXOpeningFragment'
    },
    closingFragment: {
      type: 'JSXClosingFragment'
    },
    children: [
      {
        type: 'JSXText',
        extra: {
          raw: 'abc'
        },
        value: 'abc'
      },
      {
        type: 'JSXExpressionContainer',
        expression: {
          type: 'JSXEmptyExpression'
        }
      }
    ]
  });
  return testExpression('<a>{<b />}</a>', {
    type: 'JSXElement',
    openingElement: {
      type: 'JSXOpeningElement',
      name: {
        type: 'JSXIdentifier',
        name: 'a'
      },
      attributes: [],
      selfClosing: false
    },
    closingElement: {
      type: 'JSXClosingElement',
      name: {
        type: 'JSXIdentifier',
        name: 'a'
      }
    },
    children: [
      {
        type: 'JSXExpressionContainer',
        expression: {
          type: 'JSXElement',
          openingElement: {
            type: 'JSXOpeningElement',
            name: {
              type: 'JSXIdentifier',
              name: 'b'
            },
            selfClosing: true
          },
          closingElement: null,
          children: []
        }
      }
    ]
  });
}

[0;31m  AST as expected for ComputedPropertyName node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('[fn]: ->', {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'fn'
        },
        value: {
          type: 'FunctionExpression'
        },
        computed: true,
        shorthand: false,
        method: false
      }
    ],
    implicit: true
  });
  return testExpression('[a]: b', {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'a'
        },
        value: {
          type: 'Identifier',
          name: 'b'
        },
        computed: true,
        shorthand: false,
        method: false
      }
    ],
    implicit: true
  });
}

[0;31m  AST as expected for StatementLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('break', {
    type: 'BreakStatement'
  });
  testStatement('continue', {
    type: 'ContinueStatement'
  });
  return testStatement('debugger', {
    type: 'DebuggerStatement'
  });
}

[0;31m  AST as expected for ThisLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('this', {
    type: 'ThisExpression',
    shorthand: false
  });
  return testExpression('@', {
    type: 'ThisExpression',
    shorthand: true
  });
}

[0;31m  AST as expected for UndefinedLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('undefined', {
    type: 'Identifier',
    name: 'undefined'
  });
}

[0;31m  AST as expected for NullLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('null', {
    type: 'NullLiteral'
  });
}

[0;31m  AST as expected for BooleanLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('true', {
    type: 'BooleanLiteral',
    value: true,
    name: 'true'
  });
  testExpression('off', {
    type: 'BooleanLiteral',
    value: false,
    name: 'off'
  });
  return testExpression('yes', {
    type: 'BooleanLiteral',
    value: true,
    name: 'yes'
  });
}

[0;31m  AST as expected for Return node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('return no', {
    type: 'ReturnStatement',
    argument: {
      type: 'BooleanLiteral'
    }
  });
  testExpression('(a, b) ->\n  return a + b', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ReturnStatement',
          argument: {
            type: 'BinaryExpression'
          }
        }
      ]
    }
  });
  return testExpression('-> return', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ReturnStatement',
          argument: null
        }
      ]
    }
  });
}

[0;31m  AST as expected for YieldReturn node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('-> yield return 1', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'YieldExpression',
            argument: {
              type: 'ReturnStatement',
              argument: NUMBER(1)
            },
            delegate: false
          }
        }
      ]
    }
  });
}

[0;31m  AST as expected for AwaitReturn node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('-> await return 2', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AwaitExpression',
            argument: {
              type: 'ReturnStatement',
              argument: NUMBER(2)
            }
          }
        }
      ]
    }
  });
}

[0;31m  AST as expected for Call node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('fn()', {
    type: 'CallExpression',
    callee: {
      type: 'Identifier',
      name: 'fn'
    },
    arguments: [],
    optional: false,
    implicit: false
  });
  testExpression('new Date()', {
    type: 'NewExpression',
    callee: {
      type: 'Identifier',
      name: 'Date'
    },
    arguments: [],
    optional: false,
    implicit: false
  });
  testExpression('new Date?()', {
    type: 'NewExpression',
    callee: {
      type: 'Identifier',
      name: 'Date'
    },
    arguments: [],
    optional: true,
    implicit: false
  });
  testExpression('new Old', {
    type: 'NewExpression',
    callee: {
      type: 'Identifier',
      name: 'Old'
    },
    arguments: [],
    optional: false,
    implicit: false
  });
  testExpression('new Old(1)', {
    type: 'NewExpression',
    callee: {
      type: 'Identifier',
      name: 'Old'
    },
    arguments: [
      {
        type: 'NumericLiteral',
        value: 1
      }
    ],
    optional: false,
    implicit: false
  });
  testExpression('new Old 1', {
    type: 'NewExpression',
    callee: {
      type: 'Identifier',
      name: 'Old'
    },
    arguments: [
      {
        type: 'NumericLiteral',
        value: 1
      }
    ],
    optional: false,
    implicit: true
  });
  testExpression('maybe?()', {
    type: 'CallExpression',
    optional: true,
    implicit: false
  });
  testExpression('maybe?(1 + 1)', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'BinaryExpression'
      }
    ],
    optional: true,
    implicit: false
  });
  testExpression('maybe? 1 + 1', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'BinaryExpression'
      }
    ],
    optional: true,
    implicit: true
  });
  return testExpression('goDo this, that', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'ThisExpression'
      },
      {
        type: 'Identifier',
        name: 'that'
      }
    ],
    implicit: true,
    optional: false
  });
}

[0;31m  AST as expected for RegexWithInterpolations node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('///^#{flavor}script$///', {
    type: 'InterpolatedRegExpLiteral',
    interpolatedPattern: {
      type: 'TemplateLiteral',
      expressions: [ID('flavor')],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: '^'
          },
          tail: false
        },
        {
          type: 'TemplateElement',
          value: {
            raw: 'script$'
          },
          tail: true
        }
      ],
      quote: '///'
    },
    flags: ''
  });
  return testExpression('///\n  a\n  #{b}///ig', {
    type: 'InterpolatedRegExpLiteral',
    interpolatedPattern: {
      type: 'TemplateLiteral',
      expressions: [ID('b')],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: '\n  a\n  '
          },
          tail: false
        },
        {
          type: 'TemplateElement',
          value: {
            raw: ''
          },
          tail: true
        }
      ],
      quote: '///'
    },
    flags: 'ig'
  });
}

[0;31m  AST as expected for TaggedTemplateCall node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('func"tagged"', {
    type: 'TaggedTemplateExpression',
    tag: ID('func'),
    quasi: {
      type: 'TemplateLiteral',
      expressions: [],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: 'tagged'
          },
          tail: true
        }
      ]
    }
  });
  testExpression('a"b#{c}"', {
    type: 'TaggedTemplateExpression',
    tag: ID('a'),
    quasi: {
      type: 'TemplateLiteral',
      expressions: [ID('c')],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: 'b'
          },
          tail: false
        },
        {
          type: 'TemplateElement',
          value: {
            raw: ''
          },
          tail: true
        }
      ]
    }
  });
  testExpression('a"""\n  b#{c}\n"""', {
    type: 'TaggedTemplateExpression',
    tag: ID('a'),
    quasi: {
      type: 'TemplateLiteral',
      expressions: [ID('c')],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: '\n  b'
          },
          tail: false
        },
        {
          type: 'TemplateElement',
          value: {
            raw: '\n'
          },
          tail: true
        }
      ]
    }
  });
  return testExpression("a'''\n  b\n'''", {
    type: 'TaggedTemplateExpression',
    tag: ID('a'),
    quasi: {
      type: 'TemplateLiteral',
      expressions: [],
      quasis: [
        {
          type: 'TemplateElement',
          value: {
            raw: '\n  b\n'
          },
          tail: true
        }
      ]
    }
  });
}

[0;31m  AST as expected for Access node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('obj.prop', {
    type: 'MemberExpression',
    object: {
      type: 'Identifier',
      name: 'obj'
    },
    property: {
      type: 'Identifier',
      name: 'prop'
    },
    computed: false,
    optional: false,
    shorthand: false
  });
  testExpression('obj?.prop', {
    // TODO: support Babel 7-style OptionalMemberExpression type
    // type: 'OptionalMemberExpression'
    type: 'MemberExpression',
    object: {
      type: 'Identifier',
      name: 'obj'
    },
    property: {
      type: 'Identifier',
      name: 'prop'
    },
    computed: false,
    optional: true,
    shorthand: false
  });
  testExpression('a::b', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'Identifier',
        name: 'a'
      },
      property: {
        type: 'Identifier',
        name: 'prototype'
      },
      computed: false,
      optional: false,
      shorthand: true
    },
    property: {
      type: 'Identifier',
      name: 'b'
    },
    computed: false,
    optional: false,
    shorthand: false
  });
  testExpression('a.prototype.b', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'Identifier',
        name: 'a'
      },
      property: {
        type: 'Identifier',
        name: 'prototype'
      },
      computed: false,
      optional: false,
      shorthand: false
    },
    property: {
      type: 'Identifier',
      name: 'b'
    },
    computed: false,
    optional: false,
    shorthand: false
  });
  return testExpression('a?.b.c', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'Identifier',
        name: 'a'
      },
      property: {
        type: 'Identifier',
        name: 'b'
      },
      computed: false,
      optional: true,
      shorthand: false
    },
    property: {
      type: 'Identifier',
      name: 'c'
    },
    computed: false,
    optional: false,
    shorthand: false
  });
}

[0;31m  AST as expected for Index node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('a[b]', {
    type: 'MemberExpression',
    object: {
      type: 'Identifier',
      name: 'a'
    },
    property: {
      type: 'Identifier',
      name: 'b'
    },
    computed: true,
    optional: false,
    shorthand: false
  });
  testExpression('a?[b]', {
    type: 'MemberExpression',
    object: {
      type: 'Identifier',
      name: 'a'
    },
    property: {
      type: 'Identifier',
      name: 'b'
    },
    computed: true,
    optional: true,
    shorthand: false
  });
  testExpression('a::[b]', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'Identifier',
        name: 'a'
      },
      property: {
        type: 'Identifier',
        name: 'prototype'
      },
      computed: false,
      optional: false,
      shorthand: true
    },
    property: {
      type: 'Identifier',
      name: 'b'
    },
    computed: true,
    optional: false,
    shorthand: false
  });
  testExpression('a[b][3]', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'Identifier',
        name: 'a'
      },
      property: {
        type: 'Identifier',
        name: 'b'
      },
      computed: true,
      optional: false,
      shorthand: false
    },
    property: {
      type: 'NumericLiteral',
      value: 3
    },
    computed: true,
    optional: false,
    shorthand: false
  });
  return testExpression('a[if b then c]', {
    type: 'MemberExpression',
    object: ID('a'),
    property: {
      type: 'ConditionalExpression',
      test: ID('b'),
      consequent: ID('c')
    },
    computed: true,
    optional: false,
    shorthand: false
  });
}

[0;31m  AST as expected for Range node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('[x..y]', {
    type: 'Range',
    exclusive: false,
    from: {
      name: 'x'
    },
    to: {
      name: 'y'
    }
  });
  return testExpression('[4...2]', {
    type: 'Range',
    exclusive: true,
    from: {
      value: 4
    },
    to: {
      value: 2
    }
  });
}

[0;31m  AST as expected for Slice node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('x[..y]', {
    property: {
      type: 'Range',
      exclusive: false,
      from: null,
      to: {
        name: 'y'
      }
    }
  });
  testExpression('x[y...]', {
    property: {
      type: 'Range',
      exclusive: true,
      from: {
        name: 'y'
      },
      to: null
    }
  });
  testExpression('x[...]', {
    property: {
      type: 'Range',
      exclusive: true,
      from: null,
      to: null
    }
  });
  // testExpression '"abc"[...2]',
  //   type: 'MemberExpression'
  //   property:
  //     type: 'Range'
  //     from: null
  //     to:
  //       type: 'NumericLiteral'
  //       value: 2
  //     exclusive: yes
  //   computed: yes
  //   optional: no
  //   shorthand: no
  return testExpression('x[...][a..][b...][..c][...d]', {
    type: 'MemberExpression',
    object: {
      type: 'MemberExpression',
      object: {
        type: 'MemberExpression',
        object: {
          type: 'MemberExpression',
          object: {
            type: 'MemberExpression',
            property: {
              type: 'Range',
              from: null,
              to: null,
              exclusive: true
            }
          },
          property: {
            type: 'Range',
            from: {
              name: 'a'
            },
            to: null,
            exclusive: false
          }
        },
        property: {
          type: 'Range',
          from: {
            name: 'b'
          },
          to: null,
          exclusive: true
        }
      },
      property: {
        type: 'Range',
        from: null,
        to: {
          name: 'c'
        },
        exclusive: false
      }
    },
    property: {
      type: 'Range',
      from: null,
      to: {
        name: 'd'
      },
      exclusive: true
    }
  });
}

[0;31m  AST as expected for Obj node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression("{a: 1, b, [c], @d, [e()]: f, 'g': 2, ...h, i...}", {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'a'
        },
        value: {
          type: 'NumericLiteral',
          value: 1
        },
        computed: false,
        shorthand: false
      },
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'b'
        },
        value: {
          type: 'Identifier',
          name: 'b'
        },
        computed: false,
        shorthand: true
      },
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'c'
        },
        value: {
          type: 'Identifier',
          name: 'c'
        },
        computed: true,
        shorthand: true
      },
      {
        type: 'ObjectProperty',
        key: {
          type: 'MemberExpression',
          object: {
            type: 'ThisExpression'
          },
          property: {
            type: 'Identifier',
            name: 'd'
          }
        },
        value: {
          type: 'MemberExpression',
          object: {
            type: 'ThisExpression'
          },
          property: {
            type: 'Identifier',
            name: 'd'
          }
        },
        computed: false,
        shorthand: true
      },
      {
        type: 'ObjectProperty',
        key: {
          type: 'CallExpression',
          callee: {
            type: 'Identifier',
            name: 'e'
          },
          arguments: []
        },
        value: {
          type: 'Identifier',
          name: 'f'
        },
        computed: true,
        shorthand: false
      },
      {
        type: 'ObjectProperty',
        key: {
          type: 'StringLiteral',
          value: 'g'
        },
        value: {
          type: 'NumericLiteral',
          value: 2
        },
        computed: false,
        shorthand: false
      },
      {
        type: 'SpreadElement',
        argument: {
          type: 'Identifier',
          name: 'h'
        },
        postfix: false
      },
      {
        type: 'SpreadElement',
        argument: {
          type: 'Identifier',
          name: 'i'
        },
        postfix: true
      }
    ],
    implicit: false
  });
  testExpression('a: 1', {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: {
          type: 'Identifier',
          name: 'a'
        },
        value: {
          type: 'NumericLiteral',
          value: 1
        },
        shorthand: false,
        computed: false
      }
    ],
    implicit: true
  });
  testExpression('a:\n  if b then c', {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: ID('a'),
        value: {
          type: 'ConditionalExpression',
          test: ID('b'),
          consequent: ID('c')
        }
      }
    ],
    implicit: true
  });
  return testExpression('a:\n  c if b', {
    type: 'ObjectExpression',
    properties: [
      {
        type: 'ObjectProperty',
        key: ID('a'),
        value: {
          type: 'ConditionalExpression',
          test: ID('b'),
          consequent: ID('c')
        }
      }
    ],
    implicit: true
  });
}

[0;31m  AST as expected for Arr node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('[]', {
    type: 'ArrayExpression',
    elements: []
  });
  return testExpression('[3, tables, !1]', {
    type: 'ArrayExpression',
    elements: [
      {
        value: 3
      },
      {
        name: 'tables'
      },
      {
        operator: '!'
      }
    ]
  });
}

[0;31m  AST as expected for Class node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('class Klass', {
    type: 'ClassDeclaration',
    id: ID('Klass'),
    superClass: null,
    body: {
      type: 'ClassBody',
      body: []
    }
  });
  testStatement('class child extends parent', {
    type: 'ClassDeclaration',
    id: ID('child'),
    superClass: ID('parent'),
    body: {
      type: 'ClassBody',
      body: []
    }
  });
  testStatement('class Klass then constructor: ->', {
    type: 'ClassDeclaration',
    id: ID('Klass'),
    superClass: null,
    body: {
      type: 'ClassBody',
      body: [
        {
          type: 'ClassMethod',
          static: false,
          key: ID('constructor'),
          computed: false,
          kind: 'constructor',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          bound: false
        }
      ]
    }
  });
  testExpression('a = class A\n  b: ->\n    c\n  d: =>\n    e', {
    type: 'AssignmentExpression',
    right: {
      type: 'ClassExpression',
      id: ID('A'),
      superClass: null,
      body: {
        type: 'ClassBody',
        body: [
          {
            type: 'ClassMethod',
            static: false,
            key: ID('b'),
            computed: false,
            kind: 'method',
            id: null,
            generator: false,
            async: false,
            params: [],
            body: {
              type: 'BlockStatement',
              body: [
                {
                  type: 'ExpressionStatement',
                  expression: ID('c')
                }
              ]
            },
            operator: ':',
            bound: false
          },
          {
            type: 'ClassMethod',
            static: false,
            key: ID('d'),
            computed: false,
            kind: 'method',
            id: null,
            generator: false,
            async: false,
            params: [],
            body: {
              type: 'BlockStatement',
              body: [
                {
                  type: 'ExpressionStatement',
                  expression: ID('e')
                }
              ]
            },
            operator: ':',
            bound: true
          }
        ]
      }
    }
  });
  testStatement('class A\n  @b: ->\n  @c = =>\n  @d: 1\n  @e = 2\n  j = 5\n  A.f = 3\n  A.g = ->\n  this.h = ->\n  this.i = 4', {
    type: 'ClassDeclaration',
    id: ID('A'),
    superClass: null,
    body: {
      type: 'ClassBody',
      body: [
        {
          type: 'ClassMethod',
          static: true,
          key: ID('b'),
          computed: false,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: ':',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          },
          bound: false
        },
        {
          type: 'ClassMethod',
          static: true,
          key: ID('c'),
          computed: false,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: '=',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          },
          bound: true
        },
        {
          type: 'ClassProperty',
          static: true,
          key: ID('d'),
          computed: false,
          value: NUMBER(1),
          operator: ':',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          }
        },
        {
          type: 'ClassProperty',
          static: true,
          key: ID('e'),
          computed: false,
          value: NUMBER(2),
          operator: '=',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          }
        },
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression',
            left: ID('j'),
            right: NUMBER(5)
          }
        },
        {
          type: 'ClassProperty',
          static: true,
          key: ID('f'),
          computed: false,
          value: NUMBER(3),
          operator: '=',
          staticClassName: ID('A')
        },
        {
          type: 'ClassMethod',
          static: true,
          key: ID('g'),
          computed: false,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: '=',
          staticClassName: ID('A'),
          bound: false
        },
        {
          type: 'ClassMethod',
          static: true,
          key: ID('h'),
          computed: false,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: '=',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: false
          },
          bound: false
        },
        {
          type: 'ClassProperty',
          static: true,
          key: ID('i'),
          computed: false,
          value: NUMBER(4),
          operator: '=',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: false
          }
        }
      ]
    }
  });
  return testStatement('class A\n  b: 1\n  [c]: 2\n  [d]: ->\n  @[e]: ->\n  @[f]: 3', {
    type: 'ClassDeclaration',
    id: ID('A'),
    superClass: null,
    body: {
      type: 'ClassBody',
      body: [
        {
          type: 'ClassPrototypeProperty',
          key: ID('b'),
          value: NUMBER(1),
          computed: false
        },
        {
          type: 'ClassPrototypeProperty',
          key: ID('c'),
          value: NUMBER(2),
          computed: true
        },
        {
          type: 'ClassMethod',
          static: false,
          key: ID('d'),
          computed: true,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: ':',
          bound: false
        },
        {
          type: 'ClassMethod',
          static: true,
          key: ID('e'),
          computed: true,
          kind: 'method',
          id: null,
          generator: false,
          async: false,
          params: [],
          body: EMPTY_BLOCK,
          operator: ':',
          bound: false,
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          }
        },
        {
          type: 'ClassProperty',
          static: true,
          key: ID('f'),
          computed: true,
          value: NUMBER(3),
          operator: ':',
          staticClassName: {
            type: 'ThisExpression',
            shorthand: true
          }
        }
      ]
    }
  });
}

[0;31m  AST as expected for ModuleDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('export {X}', {
    type: 'ExportNamedDeclaration',
    declaration: null,
    specifiers: [
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'X'
        },
        exported: {
          type: 'Identifier',
          name: 'X'
        }
      }
    ],
    source: null,
    exportKind: 'value'
  });
  return testStatement('import X from "."', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        type: 'ImportDefaultSpecifier',
        local: {
          type: 'Identifier',
          name: 'X'
        }
      }
    ],
    importKind: 'value',
    source: {
      type: 'StringLiteral',
      value: '.'
    }
  });
}

[0;31m  AST as expected for ImportDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testStatement('import React, {Component} from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        type: 'ImportDefaultSpecifier',
        local: {
          type: 'Identifier',
          name: 'React'
        }
      },
      {
        type: 'ImportSpecifier',
        imported: {
          type: 'Identifier',
          name: 'Component'
        },
        importKind: null,
        local: {
          type: 'Identifier',
          name: 'Component'
        }
      }
    ],
    importKind: 'value',
    source: {
      type: 'StringLiteral',
      value: 'react',
      extra: {
        raw: '"react"'
      }
    }
  });
}

[0;31m  AST as expected for ExportNamedDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('export {}', {
    type: 'ExportNamedDeclaration',
    declaration: null,
    specifiers: [],
    source: null,
    exportKind: 'value'
  });
  testStatement('export fn = ->', {
    type: 'ExportNamedDeclaration',
    declaration: {
      type: 'AssignmentExpression',
      left: {
        type: 'Identifier'
      },
      right: {
        type: 'FunctionExpression'
      }
    },
    specifiers: [],
    source: null,
    exportKind: 'value'
  });
  // testStatement 'export class A',
  testStatement('export {x as y, z as default}', {
    type: 'ExportNamedDeclaration',
    declaration: null,
    specifiers: [
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'x'
        },
        exported: {
          type: 'Identifier',
          name: 'y'
        }
      },
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'z'
        },
        exported: {
          type: 'Identifier',
          name: 'default'
        }
      }
    ],
    source: null,
    exportKind: 'value'
  });
  return testStatement('export {default, default as b} from "./abc"', {
    type: 'ExportNamedDeclaration',
    declaration: null,
    specifiers: [
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'default'
        },
        exported: {
          type: 'Identifier',
          name: 'default'
        }
      },
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'default'
        },
        exported: {
          type: 'Identifier',
          name: 'b'
        }
      }
    ],
    source: {
      type: 'StringLiteral',
      value: './abc',
      extra: {
        raw: '"./abc"'
      }
    },
    exportKind: 'value'
  });
}

[0;31m  AST as expected for ExportDefaultDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  // testStatement 'export default class',
  //   type: 'ExportDefaultDeclaration'
  //   clause:
  //     type: 'Class'
  return testStatement('export default "abc"', {
    type: 'ExportDefaultDeclaration',
    declaration: {
      type: 'StringLiteral',
      value: 'abc',
      extra: {
        raw: '"abc"'
      }
    }
  });
}

[0;31m  AST as expected for ExportAllDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testStatement('export * from "module-name"', {
    type: 'ExportAllDeclaration',
    source: {
      type: 'StringLiteral',
      value: 'module-name',
      extra: {
        raw: '"module-name"'
      }
    },
    exportKind: 'value'
  });
}

[0;31m  AST as expected for ExportSpecifierList node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testStatement('export {a, b, c}', {
    type: 'ExportNamedDeclaration',
    declaration: null,
    specifiers: [
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'a'
        },
        exported: {
          type: 'Identifier',
          name: 'a'
        }
      },
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'b'
        },
        exported: {
          type: 'Identifier',
          name: 'b'
        }
      },
      {
        type: 'ExportSpecifier',
        local: {
          type: 'Identifier',
          name: 'c'
        },
        exported: {
          type: 'Identifier',
          name: 'c'
        }
      }
    ]
  });
}

[0;31m  AST as expected for ImportDefaultSpecifier node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testStatement('import React from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        type: 'ImportDefaultSpecifier',
        local: {
          type: 'Identifier',
          name: 'React'
        }
      }
    ],
    importKind: 'value',
    source: {
      type: 'StringLiteral',
      value: 'react'
    }
  });
}

[0;31m  AST as expected for ImportNamespaceSpecifier node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('import * as React from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        type: 'ImportNamespaceSpecifier',
        local: {
          type: 'Identifier',
          name: 'React'
        }
      }
    ],
    importKind: 'value',
    source: {
      type: 'StringLiteral',
      value: 'react'
    }
  });
  return testStatement('import React, * as ReactStar from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        type: 'ImportDefaultSpecifier',
        local: {
          type: 'Identifier',
          name: 'React'
        }
      },
      {
        type: 'ImportNamespaceSpecifier',
        local: {
          type: 'Identifier',
          name: 'ReactStar'
        }
      }
    ],
    importKind: 'value',
    source: {
      type: 'StringLiteral',
      value: 'react'
    }
  });
}

[0;31m  AST as expected for Assign node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('a = b', {
    type: 'AssignmentExpression',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'Identifier',
      name: 'b'
    },
    operator: '='
  });
  testExpression('a += b', {
    type: 'AssignmentExpression',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'Identifier',
      name: 'b'
    },
    operator: '+='
  });
  testExpression('[@a = 2, {b: {c = 3} = {}, d...}, ...e] = f', {
    type: 'AssignmentExpression',
    left: {
      type: 'ArrayPattern',
      elements: [
        {
          type: 'AssignmentPattern',
          left: {
            type: 'MemberExpression',
            object: {
              type: 'ThisExpression'
            },
            property: {
              name: 'a'
            }
          },
          right: {
            type: 'NumericLiteral'
          }
        },
        {
          type: 'ObjectPattern',
          properties: [
            {
              type: 'ObjectProperty',
              key: {
                name: 'b'
              },
              value: {
                type: 'AssignmentPattern',
                left: {
                  type: 'ObjectPattern',
                  properties: [
                    {
                      type: 'ObjectProperty',
                      key: {
                        name: 'c'
                      },
                      value: {
                        type: 'AssignmentPattern',
                        left: {
                          name: 'c'
                        },
                        right: {
                          value: 3
                        }
                      },
                      shorthand: true
                    }
                  ]
                },
                right: {
                  type: 'ObjectExpression',
                  properties: []
                }
              }
            },
            {
              type: 'RestElement',
              postfix: true
            }
          ]
        },
        {
          type: 'RestElement',
          postfix: false
        }
      ]
    },
    right: {
      name: 'f'
    }
  });
  return testExpression('{a: [...b]} = c', {
    type: 'AssignmentExpression',
    left: {
      type: 'ObjectPattern',
      properties: [
        {
          type: 'ObjectProperty',
          key: {
            name: 'a'
          },
          value: {
            type: 'ArrayPattern',
            elements: [
              {
                type: 'RestElement'
              }
            ]
          }
        }
      ]
    },
    right: {
      name: 'c'
    }
  });
}

[0;31m  AST as expected for Code node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('=>', {
    type: 'ArrowFunctionExpression',
    params: [],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(a, b = 1) ->\n  c\n  d()', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'Identifier',
        name: 'a'
      },
      {
        type: 'AssignmentPattern',
        left: {
          type: 'Identifier',
          name: 'b'
        },
        right: {
          type: 'NumericLiteral',
          value: 1
        }
      }
    ],
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'Identifier',
            name: 'c'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        }
      ],
      directives: []
    },
    generator: false,
    async: false,
    id: null
  });
  testExpression('({a}) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'ObjectPattern',
        properties: [
          {
            type: 'ObjectProperty',
            key: ID('a'),
            value: ID('a'),
            shorthand: true
          }
        ]
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('([a]) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'ArrayPattern',
        elements: [ID('a')]
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('({a = 1} = {}) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'AssignmentPattern',
        left: {
          type: 'ObjectPattern',
          properties: [
            {
              type: 'ObjectProperty',
              key: ID('a'),
              value: {
                type: 'AssignmentPattern',
                left: ID('a'),
                right: NUMBER(1)
              },
              shorthand: true
            }
          ]
        },
        right: {
          type: 'ObjectExpression',
          properties: []
        }
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('([a = 1] = []) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'AssignmentPattern',
        left: {
          type: 'ArrayPattern',
          elements: [
            {
              type: 'AssignmentPattern',
              left: ID('a'),
              right: NUMBER(1)
            }
          ]
        },
        right: {
          type: 'ArrayExpression',
          elements: []
        }
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('() ->', {
    type: 'FunctionExpression',
    params: [],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(@a) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'MemberExpression',
        object: {
          type: 'ThisExpression',
          shorthand: true
        },
        property: ID('a')
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(@a = 1) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'AssignmentPattern',
        left: {
          type: 'MemberExpression'
        },
        right: NUMBER(1)
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('({@a}) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'ObjectPattern',
        properties: [
          {
            type: 'ObjectProperty',
            key: {
              type: 'MemberExpression'
            },
            value: {
              type: 'MemberExpression'
            },
            shorthand: true,
            computed: false
          }
        ]
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('({[a]}) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'ObjectPattern',
        properties: [
          {
            type: 'ObjectProperty',
            key: ID('a'),
            value: ID('a'),
            shorthand: true,
            computed: true
          }
        ]
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(...a) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'RestElement',
        argument: ID('a'),
        postfix: false
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(a...) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'RestElement',
        argument: ID('a'),
        postfix: true
      }
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('(..., a) ->', {
    type: 'FunctionExpression',
    params: [
      {
        type: 'RestElement',
        argument: null
      },
      ID('a')
    ],
    body: EMPTY_BLOCK,
    generator: false,
    async: false,
    id: null
  });
  testExpression('-> a', {
    type: 'FunctionExpression',
    params: [],
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('a')
        }
      ]
    },
    generator: false,
    async: false,
    id: null
  });
  testExpression('-> await 3', {
    type: 'FunctionExpression',
    params: [],
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AwaitExpression',
            argument: NUMBER(3)
          }
        }
      ]
    },
    generator: false,
    async: true,
    id: null
  });
  testExpression('-> yield 4', {
    type: 'FunctionExpression',
    params: [],
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'YieldExpression',
            argument: NUMBER(4),
            delegate: false
          }
        }
      ]
    },
    generator: true,
    async: false,
    id: null
  });
  return testExpression('-> yield', {
    type: 'FunctionExpression',
    params: [],
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'YieldExpression',
            argument: null,
            delegate: false
          }
        }
      ]
    },
    generator: true,
    async: false,
    id: null
  });
}

[0;31m  AST as expected for Splat node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('[a...]', {
    type: 'ArrayExpression',
    elements: [
      {
        type: 'SpreadElement',
        argument: {
          type: 'Identifier',
          name: 'a'
        },
        postfix: true
      }
    ]
  });
  return testExpression('[b, ...c]', {
    type: 'ArrayExpression',
    elements: [
      {
        name: 'b'
      },
      {
        type: 'SpreadElement',
        argument: {
          type: 'Identifier',
          name: 'c'
        },
        postfix: false
      }
    ]
  });
}

[0;31m  AST as expected for Expansion node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  // testExpression '(...) ->',
  //   type: 'Code'
  //   params: [
  //     {type: 'Expansion'}
  //   ]
  return testExpression('[..., b] = c', {
    type: 'AssignmentExpression',
    left: {
      type: 'ArrayPattern',
      elements: [
        {
          type: 'RestElement',
          argument: null
        },
        {
          type: 'Identifier'
        }
      ]
    }
  });
}

[0;31m  AST as expected for Elision node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('[,,,a,,,b]', {
    type: 'ArrayExpression',
    elements: [
      null,
      null,
      null,
      {
        name: 'a'
      },
      null,
      null,
      {
        name: 'b'
      }
    ]
  });
  return testExpression('[,,,a,,,b] = "asdfqwer"', {
    type: 'AssignmentExpression',
    left: {
      type: 'ArrayPattern',
      elements: [
        null,
        null,
        null,
        {
          type: 'Identifier',
          name: 'a'
        },
        null,
        null,
        {
          type: 'Identifier',
          name: 'b'
        }
      ]
    },
    right: {
      type: 'StringLiteral',
      value: 'asdfqwer'
    }
  });
}

[0;31m  AST as expected for While node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('loop 1', {
    type: 'WhileStatement',
    test: {
      type: 'BooleanLiteral',
      value: true
    },
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: NUMBER(1)
        }
      ]
    },
    guard: null,
    inverted: false,
    postfix: false,
    loop: true
  });
  testStatement('while 1 < 2 then', {
    type: 'WhileStatement',
    test: {
      type: 'BinaryExpression'
    },
    body: {
      type: 'BlockStatement',
      body: []
    },
    guard: null,
    inverted: false,
    postfix: false,
    loop: false
  });
  testStatement('while 1 < 2 then fn()', {
    type: 'WhileStatement',
    test: {
      type: 'BinaryExpression'
    },
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        }
      ]
    },
    guard: null,
    inverted: false,
    postfix: false,
    loop: false
  });
  testStatement('x() until y', {
    type: 'WhileStatement',
    test: ID('y'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        }
      ]
    },
    guard: null,
    inverted: true,
    postfix: true,
    loop: false
  });
  testStatement('until x when y\n  z++', {
    type: 'WhileStatement',
    test: ID('x'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'UpdateExpression'
          }
        }
      ]
    },
    guard: ID('y'),
    inverted: true,
    postfix: false,
    loop: false
  });
  testStatement('x while y when z', {
    type: 'WhileStatement',
    test: ID('y'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('x')
        }
      ]
    },
    guard: ID('z'),
    inverted: false,
    postfix: true,
    loop: false
  });
  return testStatement('loop\n  a()\n  b++', {
    type: 'WhileStatement',
    test: {
      type: 'BooleanLiteral'
    },
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'UpdateExpression'
          }
        }
      ]
    },
    guard: null,
    inverted: false,
    postfix: false,
    loop: true
  });
}

[0;31m  AST as expected for Op node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('a <= 2', {
    type: 'BinaryExpression',
    operator: '<=',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'NumericLiteral',
      value: 2
    }
  });
  testExpression('a is 2', {
    type: 'BinaryExpression',
    operator: 'is',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'NumericLiteral',
      value: 2
    }
  });
  testExpression('a // 2', {
    type: 'BinaryExpression',
    operator: '//',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'NumericLiteral',
      value: 2
    }
  });
  testExpression('a << 2', {
    type: 'BinaryExpression',
    operator: '<<',
    left: {
      type: 'Identifier',
      name: 'a'
    },
    right: {
      type: 'NumericLiteral',
      value: 2
    }
  });
  testExpression('typeof x', {
    type: 'UnaryExpression',
    operator: 'typeof',
    prefix: true,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('delete x.y', {
    type: 'UnaryExpression',
    operator: 'delete',
    prefix: true,
    argument: {
      type: 'MemberExpression'
    }
  });
  testExpression('do x', {
    type: 'UnaryExpression',
    operator: 'do',
    prefix: true,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('do ->', {
    type: 'UnaryExpression',
    operator: 'do',
    prefix: true,
    argument: {
      type: 'FunctionExpression'
    }
  });
  testExpression('!x', {
    type: 'UnaryExpression',
    operator: '!',
    prefix: true,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('not x', {
    type: 'UnaryExpression',
    operator: 'not',
    prefix: true,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('--x', {
    type: 'UpdateExpression',
    operator: '--',
    prefix: true,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('x++', {
    type: 'UpdateExpression',
    operator: '++',
    prefix: false,
    argument: {
      type: 'Identifier',
      name: 'x'
    }
  });
  testExpression('x && y', {
    type: 'LogicalExpression',
    operator: '&&',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'Identifier',
      name: 'y'
    }
  });
  testExpression('x or y', {
    type: 'LogicalExpression',
    operator: 'or',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'Identifier',
      name: 'y'
    }
  });
  testExpression('x ? y', {
    type: 'LogicalExpression',
    operator: '?',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'Identifier',
      name: 'y'
    }
  });
  testExpression('x in y', {
    type: 'BinaryExpression',
    operator: 'in',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'Identifier',
      name: 'y'
    }
  });
  testExpression('x not in y', {
    type: 'BinaryExpression',
    operator: 'not in',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'Identifier',
      name: 'y'
    }
  });
  testExpression('x + y * z', {
    type: 'BinaryExpression',
    operator: '+',
    left: {
      type: 'Identifier',
      name: 'x'
    },
    right: {
      type: 'BinaryExpression',
      operator: '*',
      left: {
        type: 'Identifier',
        name: 'y'
      },
      right: {
        type: 'Identifier',
        name: 'z'
      }
    }
  });
  return testExpression('(x + y) * z', {
    type: 'BinaryExpression',
    operator: '*',
    left: {
      type: 'BinaryExpression',
      operator: '+',
      left: {
        type: 'Identifier',
        name: 'x'
      },
      right: {
        type: 'Identifier',
        name: 'y'
      }
    },
    right: {
      type: 'Identifier',
      name: 'z'
    }
  });
}

[0;31m  AST as expected for Try node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('try cappuccino', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'Identifier',
            name: 'cappuccino'
          }
        }
      ]
    },
    handler: null,
    finalizer: null
  });
  testStatement('try\n  x = 1\n  y()\ncatch e\n  d()\nfinally\n  f + g', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        }
      ]
    },
    handler: {
      type: 'CatchClause',
      param: {
        type: 'Identifier',
        name: 'e'
      },
      body: {
        type: 'BlockStatement',
        body: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'CallExpression'
            }
          }
        ]
      }
    },
    finalizer: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'BinaryExpression'
          }
        }
      ]
    }
  });
  testStatement('try\ncatch\nfinally', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: []
    },
    handler: {
      type: 'CatchClause',
      param: null,
      body: {
        type: 'BlockStatement',
        body: []
      }
    },
    finalizer: {
      type: 'BlockStatement',
      body: []
    }
  });
  return testStatement('try\ncatch {e}\n  f', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: []
    },
    handler: {
      type: 'CatchClause',
      param: {
        type: 'ObjectPattern'
      },
      body: {
        type: 'BlockStatement',
        body: [
          {
            type: 'ExpressionStatement'
          }
        ]
      }
    },
    finalizer: null
  });
}

[0;31m  AST as expected for Throw node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testStatement('throw new BallError "catch"', {
    type: 'ThrowStatement',
    argument: {
      type: 'NewExpression'
    }
  });
}

[0;31m  AST as expected for Existence node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('Ghosts?', {
    type: 'UnaryExpression',
    argument: {
      name: 'Ghosts'
    },
    operator: '?',
    prefix: false
  });
}

[0;31m  AST as expected for Parens node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('(hmmmmm)', {
    type: 'Identifier',
    name: 'hmmmmm'
  });
  //   testExpression '(a + b) / c',
  //     type: 'Op'
  //     operator: '/'
  //     first:
  //       type: 'Parens'
  //       body:
  //         type: 'Op'
  //         operator: '+'
  return testExpression('(((1)))', {
    type: 'NumericLiteral',
    value: 1
  });
}

[0;31m  AST as expected for StringWithInterpolations node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('"a#{b}c"', {
    type: 'TemplateLiteral',
    expressions: [ID('b')],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: 'a'
        },
        tail: false
      },
      {
        type: 'TemplateElement',
        value: {
          raw: 'c'
        },
        tail: true
      }
    ],
    quote: '"'
  });
  testExpression('"""a#{b}c"""', {
    type: 'TemplateLiteral',
    expressions: [ID('b')],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: 'a'
        },
        tail: false
      },
      {
        type: 'TemplateElement',
        value: {
          raw: 'c'
        },
        tail: true
      }
    ],
    quote: '"""'
  });
  testExpression('"#{b}"', {
    type: 'TemplateLiteral',
    expressions: [ID('b')],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: ''
        },
        tail: false
      },
      {
        type: 'TemplateElement',
        value: {
          raw: ''
        },
        tail: true
      }
    ],
    quote: '"'
  });
  testExpression('" a\n  #{b}\n  c\n"', {
    type: 'TemplateLiteral',
    expressions: [ID('b')],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: ' a\n  '
        },
        tail: false
      },
      {
        type: 'TemplateElement',
        value: {
          raw: '\n  c\n'
        },
        tail: true
      }
    ],
    quote: '"'
  });
  return testExpression('"""\n  a\n    b#{\n    c\n  }d\n"""', {
    type: 'TemplateLiteral',
    expressions: [ID('c')],
    quasis: [
      {
        type: 'TemplateElement',
        value: {
          raw: '\n  a\n    b'
        },
        tail: false
      },
      {
        type: 'TemplateElement',
        value: {
          raw: 'd\n'
        },
        tail: true
      }
    ],
    quote: '"""'
  });
}

[0;31m  AST as expected for For node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('for x, i in arr when x? then return', {
    type: 'For',
    name: ID('x'),
    index: ID('i'),
    guard: {
      type: 'UnaryExpression'
    },
    source: ID('arr'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ReturnStatement'
        }
      ]
    },
    style: 'in',
    own: false,
    postfix: false,
    await: false,
    step: null
  });
  testStatement('for k, v of obj then return', {
    type: 'For',
    name: ID('v'),
    index: ID('k'),
    guard: null,
    source: ID('obj'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ReturnStatement'
        }
      ]
    },
    style: 'of',
    own: false,
    postfix: false,
    await: false,
    step: null
  });
  testStatement('for x from iterable then', {
    type: 'For',
    name: ID('x'),
    index: null,
    guard: null,
    body: EMPTY_BLOCK,
    source: ID('iterable'),
    style: 'from',
    own: false,
    postfix: false,
    await: false,
    step: null
  });
  testStatement('for i in [0...42] by step when not (i % 2) then', {
    type: 'For',
    name: ID('i'),
    index: null,
    body: EMPTY_BLOCK,
    source: {
      type: 'Range'
    },
    guard: {
      type: 'UnaryExpression'
    },
    step: ID('step'),
    style: 'in',
    own: false,
    postfix: false,
    await: false
  });
  testExpression('a = (x for x in y)', {
    type: 'AssignmentExpression',
    right: {
      type: 'For',
      name: ID('x'),
      index: null,
      body: {
        type: 'BlockStatement',
        body: [
          {
            type: 'ExpressionStatement',
            expression: ID('x')
          }
        ]
      },
      source: ID('y'),
      guard: null,
      step: null,
      style: 'in',
      own: false,
      postfix: true,
      await: false
    }
  });
  testStatement('x for [0...1]', {
    type: 'For',
    name: null,
    index: null,
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('x')
        }
      ]
    },
    source: {
      type: 'Range'
    },
    guard: null,
    step: null,
    style: 'range',
    own: false,
    postfix: true,
    await: false
  });
  testStatement('for own x, y of z\n  c()\n  d', {
    type: 'For',
    name: ID('y'),
    index: ID('x'),
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: ID('d')
        }
      ]
    },
    source: ID('z'),
    guard: null,
    step: null,
    style: 'of',
    own: true,
    postfix: false,
    await: false
  });
  testExpression('->\n  for await x from y\n    z', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'For',
          name: ID('x'),
          index: null,
          body: {
            type: 'BlockStatement',
            body: [
              {
                type: 'ExpressionStatement',
                expression: ID('z')
              }
            ]
          },
          source: ID('y'),
          guard: null,
          step: null,
          style: 'from',
          own: false,
          postfix: false,
          await: true
        }
      ]
    }
  });
  testStatement('for {x} in y\n  z', {
    type: 'For',
    name: {
      type: 'ObjectPattern',
      properties: [
        {
          type: 'ObjectProperty',
          key: ID('x'),
          value: ID('x'),
          shorthand: true,
          computed: false
        }
      ]
    },
    index: null,
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('z')
        }
      ]
    },
    source: ID('y'),
    guard: null,
    step: null,
    style: 'in',
    postfix: false,
    await: false
  });
  return testStatement('for [x] in y\n  z', {
    type: 'For',
    name: {
      type: 'ArrayPattern',
      elements: [ID('x')]
    },
    index: null,
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('z')
        }
      ]
    },
    source: ID('y'),
    guard: null,
    step: null,
    style: 'in',
    postfix: false,
    await: false
  });
}

[0;31m  AST as expected for Switch node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('switch x\n  when a then a\n  when b, c then c\n  else 42', {
    type: 'SwitchStatement',
    discriminant: {
      type: 'Identifier',
      name: 'x'
    },
    cases: [
      {
        type: 'SwitchCase',
        test: {
          type: 'Identifier',
          name: 'a'
        },
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier',
              name: 'a'
            }
          }
        ],
        trailing: true
      },
      {
        type: 'SwitchCase',
        test: {
          type: 'Identifier',
          name: 'b'
        },
        consequent: [],
        trailing: false
      },
      {
        type: 'SwitchCase',
        test: {
          type: 'Identifier',
          name: 'c'
        },
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier',
              name: 'c'
            }
          }
        ],
        trailing: true
      },
      {
        type: 'SwitchCase',
        test: null,
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'NumericLiteral',
              value: 42
            }
          }
        ]
      }
    ]
  });
  testStatement('switch\n  when some(condition)\n    doSomething()\n    andThenSomethingElse', {
    type: 'SwitchStatement',
    discriminant: null,
    cases: [
      {
        type: 'SwitchCase',
        test: {
          type: 'CallExpression'
        },
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'CallExpression'
            }
          },
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier'
            }
          }
        ],
        trailing: true
      }
    ]
  });
  return testStatement('switch a\n  when 1, 2, 3, 4\n    b\n  else\n    c\n    d', {
    type: 'SwitchStatement',
    discriminant: {
      type: 'Identifier'
    },
    cases: [
      {
        type: 'SwitchCase',
        test: {
          type: 'NumericLiteral',
          value: 1
        },
        consequent: [],
        trailing: false
      },
      {
        type: 'SwitchCase',
        test: {
          type: 'NumericLiteral',
          value: 2
        },
        consequent: [],
        trailing: false
      },
      {
        type: 'SwitchCase',
        test: {
          type: 'NumericLiteral',
          value: 3
        },
        consequent: [],
        trailing: false
      },
      {
        type: 'SwitchCase',
        test: {
          type: 'NumericLiteral',
          value: 4
        },
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier'
            }
          }
        ],
        trailing: true
      },
      {
        type: 'SwitchCase',
        test: null,
        consequent: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier'
            }
          },
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Identifier'
            }
          }
        ]
      }
    ]
  });
}

[0;31m  AST as expected for If node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testStatement (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testStatement('if maybe then yes', {
    type: 'IfStatement',
    test: ID('maybe'),
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'BooleanLiteral'
          }
        }
      ]
    },
    alternate: null,
    postfix: false,
    inverted: false
  });
  testStatement('yes if maybe', {
    type: 'IfStatement',
    test: ID('maybe'),
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'BooleanLiteral'
          }
        }
      ]
    },
    alternate: null,
    postfix: true,
    inverted: false
  });
  testStatement('unless x then x else if y then y else z', {
    type: 'IfStatement',
    test: ID('x'),
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('x')
        }
      ]
    },
    alternate: {
      type: 'IfStatement',
      test: ID('y'),
      consequent: {
        type: 'BlockStatement',
        body: [
          {
            type: 'ExpressionStatement',
            expression: ID('y')
          }
        ]
      },
      alternate: {
        type: 'BlockStatement',
        body: [
          {
            type: 'ExpressionStatement',
            expression: ID('z')
          }
        ]
      },
      postfix: false,
      inverted: false
    },
    postfix: false,
    inverted: true
  });
  testStatement('if a\n  b\nelse\n  if c\n    d', {
    type: 'IfStatement',
    test: ID('a'),
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('b')
        }
      ]
    },
    alternate: {
      type: 'BlockStatement',
      body: [
        {
          type: 'IfStatement',
          test: ID('c'),
          consequent: {
            type: 'BlockStatement',
            body: [
              {
                type: 'ExpressionStatement',
                expression: ID('d')
              }
            ]
          },
          alternate: null,
          postfix: false,
          inverted: false
        }
      ]
    },
    postfix: false,
    inverted: false
  });
  testExpression('a =\n  if b then c else if d then e', {
    type: 'AssignmentExpression',
    right: {
      type: 'ConditionalExpression',
      test: ID('b'),
      consequent: ID('c'),
      alternate: {
        type: 'ConditionalExpression',
        test: ID('d'),
        consequent: ID('e'),
        alternate: null,
        postfix: false,
        inverted: false
      },
      postfix: false,
      inverted: false
    }
  });
  testExpression('f(\n  if b\n    c\n    d\n)', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'ConditionalExpression',
        test: ID('b'),
        consequent: {
          type: 'BlockStatement',
          body: [
            {
              type: 'ExpressionStatement',
              expression: ID('c')
            },
            {
              type: 'ExpressionStatement',
              expression: ID('d')
            }
          ]
        },
        alternate: null,
        postfix: false,
        inverted: false
      }
    ]
  });
  testStatement('a unless b', {
    type: 'IfStatement',
    test: ID('b'),
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: ID('a')
        }
      ]
    },
    alternate: null,
    postfix: true,
    inverted: true
  });
  return testExpression('f(\n  if b\n    c\n  else\n    d\n)', {
    type: 'CallExpression',
    arguments: [
      {
        type: 'ConditionalExpression',
        test: ID('b'),
        consequent: ID('c'),
        alternate: ID('d'),
        postfix: false,
        inverted: false
      }
    ]
  });
}

[0;31m  AST as expected for MetaProperty node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('-> new.target', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'MetaProperty',
            meta: ID('new'),
            property: ID('target')
          }
        }
      ]
    }
  });
  return testExpression('-> new.target.name', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'MemberExpression',
            object: {
              type: 'MetaProperty',
              meta: ID('new'),
              property: ID('target')
            },
            property: ID('name'),
            computed: false
          }
        }
      ]
    }
  });
}

[0;31m  AST as expected for dynamic import[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testExpression('import(\'a\')', {
    type: 'CallExpression',
    callee: {
      type: 'Import'
    },
    arguments: [STRING('a')]
  });
}

[0;31m  AST as expected for RegexLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpression (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testExpression (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testExpression('/a/ig', {
    type: 'RegExpLiteral',
    pattern: 'a',
    originalPattern: 'a',
    flags: 'ig',
    delimiter: '/',
    value: void 0,
    extra: {
      raw: "/a/ig",
      originalRaw: "/a/ig",
      rawValue: void 0
    }
  });
  testExpression('///\n  a\n///i', {
    type: 'RegExpLiteral',
    pattern: 'a',
    originalPattern: '\n  a\n',
    flags: 'i',
    delimiter: '///',
    value: void 0,
    extra: {
      raw: "/a/i",
      originalRaw: "///\n  a\n///i",
      rawValue: void 0
    }
  });
  testExpression('/a\\w\\u1111\\u{11111}/', {
    type: 'RegExpLiteral',
    pattern: 'a\\w\\u1111\\ud804\\udd11',
    originalPattern: 'a\\w\\u1111\\u{11111}',
    flags: '',
    delimiter: '/',
    value: void 0,
    extra: {
      raw: "/a\\w\\u1111\\ud804\\udd11/",
      originalRaw: "/a\\w\\u1111\\u{11111}/",
      rawValue: void 0
    }
  });
  testExpression('///\n  a\n  \\w\\u1111\\u{11111}\n///', {
    type: 'RegExpLiteral',
    pattern: 'a\\w\\u1111\\ud804\\udd11',
    originalPattern: '\n  a\n  \\w\\u1111\\u{11111}\n',
    flags: '',
    delimiter: '///',
    value: void 0,
    extra: {
      raw: "/a\\w\\u1111\\ud804\\udd11/",
      originalRaw: "///\n  a\n  \\w\\u1111\\u{11111}\n///",
      rawValue: void 0
    }
  });
  return testExpression('///\n  /\n  (.+)\n  /\n///', {
    type: 'RegExpLiteral',
    pattern: '\\/(.+)\\/',
    originalPattern: '\n  /\n  (.+)\n  /\n',
    flags: '',
    delimiter: '///',
    value: void 0,
    extra: {
      raw: "/\\/(.+)\\//",
      originalRaw: "///\n  /\n  (.+)\n  /\n///",
      rawValue: void 0
    }
  });
}

[0;31m  AST as expected for directives[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Property [0mtype[0;31m: expected [0mundefined[0;31m to equal [0mFile[0;31m
  Expected AST output to include:
  [0m{
  "type": "File",
  "program": {
    "type": "Program",
    "body": [
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "CallExpression"
        }
      }
    ],
    "directives": [
      {
        "type": "Directive",
        "value": {
          "type": "DirectiveLiteral",
          "value": "directive 1",
          "extra": {
            "raw": "'directive 1'"
          }
        }
      },
      {
        "type": "Directive",
        "value": {
          "type": "DirectiveLiteral",
          "value": "use strict",
          "extra": {
            "raw": "'use strict'"
          }
        }
      }
    ]
  }
}[0;31m
  but instead it was:
  [0m"(function() {\n  'directive 1';\n  'use strict';\n  f();\n\n}).call(this);\n"[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at deepStrictIncludeExpectedProperties (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  deepStrictIncludeExpectedProperties(CoffeeScript.compile('\'directive 1\'\n\'use strict\'\nf()', {
    ast: true
  }), {
    type: 'File',
    program: {
      type: 'Program',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        }
      ],
      directives: [
        {
          type: 'Directive',
          value: {
            type: 'DirectiveLiteral',
            value: 'directive 1',
            extra: {
              raw: "'directive 1'"
            }
          }
        },
        {
          type: 'Directive',
          value: {
            type: 'DirectiveLiteral',
            value: 'use strict',
            extra: {
              raw: "'use strict'"
            }
          }
        }
      ]
    }
  });
  testExpression('->\n  \'use strict\'\n  f()\n  \'not a directive\'\n  g', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'CallExpression'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: STRING('not a directive')
        },
        {
          type: 'ExpressionStatement',
          expression: ID('g')
        }
      ],
      directives: [
        {
          type: 'Directive',
          value: {
            type: 'DirectiveLiteral',
            value: 'use strict',
            extra: {
              raw: "'use strict'"
            }
          }
        }
      ]
    }
  });
  testExpression('->\n  "not a directive because it\'s implicitly returned"', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: STRING("not a directive because it's implicitly returned")
        }
      ],
      directives: []
    }
  });
  deepStrictIncludeExpectedProperties(CoffeeScript.compile('\'use strict\'', {
    ast: true
  }), {
    type: 'File',
    program: {
      type: 'Program',
      body: [],
      directives: [
        {
          type: 'Directive',
          value: {
            type: 'DirectiveLiteral',
            value: 'use strict',
            extra: {
              raw: "'use strict'"
            }
          }
        }
      ]
    }
  });
  testStatement('class A\n  \'classes can have directives too\'\n  a: ->', {
    type: 'ClassDeclaration',
    body: {
      type: 'ClassBody',
      body: [
        {
          type: 'ClassMethod'
        }
      ],
      directives: [
        {
          type: 'Directive',
          value: {
            type: 'DirectiveLiteral',
            value: 'classes can have directives too'
          }
        }
      ]
    }
  });
  testStatement('if a\n  "but other blocks can\'t"\n  b', {
    type: 'IfStatement',
    consequent: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: STRING("but other blocks can't")
        },
        {
          type: 'ExpressionStatement',
          expression: ID('b')
        }
      ],
      directives: []
    }
  });
  return testExpression('->\n  """not a directive"""\n  b', {
    type: 'FunctionExpression',
    body: {
      type: 'BlockStatement',
      body: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'TemplateLiteral'
          }
        },
        {
          type: 'ExpressionStatement',
          expression: ID('b')
        }
      ],
      directives: []
    }
  });
}

[0;31m  AST location data as expected for NumberLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('42', {
    type: 'NumericLiteral',
    start: 0,
    end: 2,
    range: [0, 2],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 2
      }
    }
  });
}

[0;31m  AST location data as expected for InfinityLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('Infinity', {
    type: 'Identifier',
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  return testAstLocationData('2e308', {
    type: 'NumericLiteral',
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
}

[0;31m  AST location data as expected for NaNLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('NaN', {
    type: 'Identifier',
    start: 0,
    end: 3,
    range: [0, 3],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 3
      }
    }
  });
}

[0;31m  AST location data as expected for IdentifierLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('id', {
    type: 'Identifier',
    start: 0,
    end: 2,
    range: [0, 2],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 2
      }
    }
  });
}

[0;31m  AST location data as expected for StatementLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('break', {
    type: 'BreakStatement',
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
  testAstLocationData('continue', {
    type: 'ContinueStatement',
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  return testAstLocationData('debugger', {
    type: 'DebuggerStatement',
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
}

[0;31m  AST location data as expected for ThisLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('this', {
    type: 'ThisExpression',
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
}

[0;31m  AST location data as expected for UndefinedLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('undefined', {
    type: 'Identifier',
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 9
      }
    }
  });
}

[0;31m  AST location data as expected for NullLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('null', {
    type: 'NullLiteral',
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
}

[0;31m  AST location data as expected for BooleanLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('true', {
    type: 'BooleanLiteral',
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
}

[0;31m  AST location data as expected for Access node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('obj.prop', {
    type: 'MemberExpression',
    object: {
      start: 0,
      end: 3,
      range: [0, 3],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      }
    },
    property: {
      start: 4,
      end: 8,
      range: [4, 8],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  testAstLocationData('a::b', {
    type: 'MemberExpression',
    object: {
      object: {
        start: 0,
        end: 1,
        range: [0, 1],
        loc: {
          start: {
            line: 1,
            column: 0
          },
          end: {
            line: 1,
            column: 1
          }
        }
      },
      property: {
        start: 1,
        end: 3,
        range: [1, 3],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 3
          }
        }
      }
    },
    property: {
      start: 3,
      end: 4,
      range: [3, 4],
      loc: {
        start: {
          line: 1,
          column: 3
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
  return testAstLocationData('(\n  obj\n).prop', {
    type: 'MemberExpression',
    object: {
      start: 4,
      end: 7,
      range: [4, 7],
      loc: {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 2,
          column: 5
        }
      }
    },
    property: {
      start: 10,
      end: 14,
      range: [10, 14],
      loc: {
        start: {
          line: 3,
          column: 2
        },
        end: {
          line: 3,
          column: 6
        }
      }
    },
    start: 0,
    end: 14,
    range: [0, 14],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 6
      }
    }
  });
}

[0;31m  AST location data as expected for Index node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('a[b]', {
    type: 'MemberExpression',
    object: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    property: {
      start: 2,
      end: 3,
      range: [2, 3],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 3
        }
      }
    },
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
  return testAstLocationData('a?[b][3]', {
    type: 'MemberExpression',
    object: {
      object: {
        start: 0,
        end: 1,
        range: [0, 1],
        loc: {
          start: {
            line: 1,
            column: 0
          },
          end: {
            line: 1,
            column: 1
          }
        }
      },
      property: {
        start: 3,
        end: 4,
        range: [3, 4],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      start: 0,
      end: 5,
      range: [0, 5],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    property: {
      start: 6,
      end: 7,
      range: [6, 7],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
}

[0;31m  AST location data as expected for Parens node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('(hmmmmm)', {
    type: 'Identifier',
    start: 1,
    end: 7,
    range: [1, 7],
    loc: {
      start: {
        line: 1,
        column: 1
      },
      end: {
        line: 1,
        column: 7
      }
    }
  });
  return testAstLocationData('(((1)))', {
    type: 'NumericLiteral',
    start: 3,
    end: 4,
    range: [3, 4],
    loc: {
      start: {
        line: 1,
        column: 3
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
}

[0;31m  AST location data as expected for Op node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('1 <= 2', {
    type: 'BinaryExpression',
    left: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    right: {
      start: 5,
      end: 6,
      range: [5, 6],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  testAstLocationData('!x', {
    type: 'UnaryExpression',
    argument: {
      start: 1,
      end: 2,
      range: [1, 2],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    start: 0,
    end: 2,
    range: [0, 2],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 2
      }
    }
  });
  testAstLocationData('not x', {
    type: 'UnaryExpression',
    argument: {
      start: 4,
      end: 5,
      range: [4, 5],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
  testAstLocationData('x++', {
    type: 'UpdateExpression',
    argument: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    start: 0,
    end: 3,
    range: [0, 3],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 3
      }
    }
  });
  return testAstLocationData('(x + y) * z', {
    type: 'BinaryExpression',
    left: {
      left: {
        start: 1,
        end: 2,
        range: [1, 2],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 2
          }
        }
      },
      right: {
        start: 5,
        end: 6,
        range: [5, 6],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 6
          }
        }
      },
      start: 1,
      end: 6,
      range: [1, 6],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    right: {
      start: 10,
      end: 11,
      range: [10, 11],
      loc: {
        start: {
          line: 1,
          column: 10
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
}

[0;31m  AST location data as expected for Call node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('fn()', {
    type: 'CallExpression',
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    },
    callee: {
      start: 0,
      end: 2,
      range: [0, 2],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      }
    }
  });
  testAstLocationData('new Date()', {
    type: 'NewExpression',
    start: 0,
    end: 10,
    range: [0, 10],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 10
      }
    },
    callee: {
      start: 4,
      end: 8,
      range: [4, 8],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 8
        }
      }
    }
  });
  testAstLocationData('new Old(\n  1\n)', {
    start: 0,
    end: 14,
    range: [0, 14],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 1
      }
    },
    type: 'NewExpression',
    arguments: [
      {
        start: 11,
        end: 12,
        range: [11,
      12],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 3
          }
        }
      }
    ]
  });
  testAstLocationData('maybe? 1 + 1', {
    type: 'CallExpression',
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    },
    arguments: [
      {
        start: 7,
        end: 12,
        range: [7,
      12],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 12
          }
        }
      }
    ]
  });
  testAstLocationData('goDo(this,\n  that)', {
    type: 'CallExpression',
    start: 0,
    end: 18,
    range: [0, 18],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 7
      }
    },
    arguments: [
      {
        start: 5,
        end: 9,
        range: [5,
      9],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 9
          }
        }
      },
      {
        start: 13,
        end: 17,
        range: [13,
      17],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 6
          }
        }
      }
    ]
  });
  return testAstLocationData('new Old', {
    type: 'NewExpression',
    callee: {
      start: 4,
      end: 7,
      range: [4, 7],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    start: 0,
    end: 7,
    range: [0, 7],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 7
      }
    }
  });
}

[0;31m  AST location data as expected for Range node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('[x..y]', {
    type: 'Range',
    from: {
      start: 1,
      end: 2,
      range: [1, 2],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    to: {
      start: 4,
      end: 5,
      range: [4, 5],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  return testAstLocationData('[4...2]', {
    type: 'Range',
    from: {
      start: 1,
      end: 2,
      range: [1, 2],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    to: {
      start: 5,
      end: 6,
      range: [5, 6],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    start: 0,
    end: 7,
    range: [0, 7],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 7
      }
    }
  });
}

[0;31m  AST location data as expected for Slice node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('x[..y]', {
    property: {
      to: {
        start: 4,
        end: 5,
        range: [4, 5],
        loc: {
          start: {
            line: 1,
            column: 4
          },
          end: {
            line: 1,
            column: 5
          }
        }
      },
      start: 2,
      end: 5,
      range: [2, 5],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  testAstLocationData('x[y...z]', {
    property: {
      start: 2,
      end: 7,
      range: [2, 7],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  return testAstLocationData('x[...]', {
    property: {
      start: 2,
      end: 5,
      range: [2, 5],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
}

[0;31m  AST location data as expected for Splat node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('[a...]', {
    type: 'ArrayExpression',
    elements: [
      {
        argument: {
          start: 1,
          end: 2,
          range: [1,
      2],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 2
            }
          }
        },
        start: 1,
        end: 5,
        range: [1,
      5],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 5
          }
        }
      }
    ],
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  return testAstLocationData('[b, ...c]', {
    type: 'ArrayExpression',
    elements: [
      {},
      {
        argument: {
          start: 7,
          end: 8,
          range: [7,
      8],
          loc: {
            start: {
              line: 1,
              column: 7
            },
            end: {
              line: 1,
              column: 8
            }
          }
        },
        start: 4,
        end: 8,
        range: [4,
      8],
        loc: {
          start: {
            line: 1,
            column: 4
          },
          end: {
            line: 1,
            column: 8
          }
        }
      }
    ],
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 9
      }
    }
  });
}

[0;31m  AST location data as expected for Elision node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('[,,,a,, ,b]', {
    type: 'ArrayExpression',
    elements: [
      null,
      ,
      ,
      {
        start: 4,
        end: 5,
        range: [4,
      5],
        loc: {
          start: {
            line: 1,
            column: 4
          },
          end: {
            line: 1,
            column: 5
          }
        }
      },
      ,
      ,
      {
        start: 9,
        end: 10,
        range: [9,
      10],
        loc: {
          start: {
            line: 1,
            column: 9
          },
          end: {
            line: 1,
            column: 10
          }
        }
      }
    ],
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
}

[0;31m  AST location data as expected for ModuleDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('export {X}', {
    type: 'ExportNamedDeclaration',
    specifiers: [
      {
        local: {
          start: 8,
          end: 9,
          range: [8,
      9],
          loc: {
            start: {
              line: 1,
              column: 8
            },
            end: {
              line: 1,
              column: 9
            }
          }
        },
        exported: {
          start: 8,
          end: 9,
          range: [8,
      9],
          loc: {
            start: {
              line: 1,
              column: 8
            },
            end: {
              line: 1,
              column: 9
            }
          }
        },
        start: 8,
        end: 9,
        range: [8,
      9],
        loc: {
          start: {
            line: 1,
            column: 8
          },
          end: {
            line: 1,
            column: 9
          }
        }
      }
    ],
    start: 0,
    end: 10,
    range: [0, 10],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 10
      }
    }
  });
  return testAstLocationData('import X from "."', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        start: 7,
        end: 8,
        range: [7,
      8],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 8
          }
        }
      }
    ],
    source: {
      start: 14,
      end: 17,
      range: [14, 17],
      loc: {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 17,
    range: [0, 17],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 17
      }
    }
  });
}

[0;31m  AST location data as expected for ImportDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('import React, {\n  Component\n} from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        start: 7,
        end: 12,
        range: [7,
      12],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 12
          }
        }
      },
      {
        imported: {
          start: 18,
          end: 27,
          range: [18,
      27],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 11
            }
          }
        },
        start: 18,
        end: 27,
        range: [18,
      27],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 11
          }
        }
      }
    ],
    source: {
      start: 35,
      end: 42,
      range: [35, 42],
      loc: {
        start: {
          line: 3,
          column: 7
        },
        end: {
          line: 3,
          column: 14
        }
      }
    },
    start: 0,
    end: 42,
    range: [0, 42],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 14
      }
    }
  });
}

[0;31m  AST location data as expected for ExportNamedDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('export {}', {
    type: 'ExportNamedDeclaration',
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 9
      }
    }
  });
  // testAstLocationData 'export fn = ->',
  //   type: 'ExportNamedDeclaration'
  //   clause:
  //     type: 'Assign'
  //     variable:
  //       value: 'fn'
  //     value:
  //       type: 'Code'

  // testAstLocationData 'export class A',
  testAstLocationData('export {\n  x as y\n  z as default\n  }', {
    type: 'ExportNamedDeclaration',
    specifiers: [
      {
        local: {
          start: 11,
          end: 12,
          range: [11,
      12],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 3
            }
          }
        },
        exported: {
          start: 16,
          end: 17,
          range: [16,
      17],
          loc: {
            start: {
              line: 2,
              column: 7
            },
            end: {
              line: 2,
              column: 8
            }
          }
        },
        start: 11,
        end: 17,
        range: [11,
      17],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 8
          }
        }
      },
      {
        local: {
          start: 20,
          end: 21,
          range: [20,
      21],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 3
            }
          }
        },
        exported: {
          start: 25,
          end: 32,
          range: [25,
      32],
          loc: {
            start: {
              line: 3,
              column: 7
            },
            end: {
              line: 3,
              column: 14
            }
          }
        },
        start: 20,
        end: 32,
        range: [20,
      32],
        loc: {
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 3,
            column: 14
          }
        }
      }
    ],
    start: 0,
    end: 36,
    range: [0, 36],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 3
      }
    }
  });
  return testAstLocationData('export {default, default as b} from "./abc"', {
    type: 'ExportNamedDeclaration',
    specifiers: [
      {
        local: {
          start: 8,
          end: 15,
          range: [8,
      15],
          loc: {
            start: {
              line: 1,
              column: 8
            },
            end: {
              line: 1,
              column: 15
            }
          }
        },
        start: 8,
        end: 15,
        range: [8,
      15],
        loc: {
          start: {
            line: 1,
            column: 8
          },
          end: {
            line: 1,
            column: 15
          }
        }
      },
      {
        local: {
          start: 17,
          end: 24,
          range: [17,
      24],
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 24
            }
          }
        },
        exported: {
          start: 28,
          end: 29,
          range: [28,
      29],
          loc: {
            start: {
              line: 1,
              column: 28
            },
            end: {
              line: 1,
              column: 29
            }
          }
        },
        start: 17,
        end: 29,
        range: [17,
      29],
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 1,
            column: 29
          }
        }
      }
    ],
    source: {
      start: 36,
      end: 43,
      range: [36, 43],
      loc: {
        start: {
          line: 1,
          column: 36
        },
        end: {
          line: 1,
          column: 43
        }
      }
    },
    start: 0,
    end: 43,
    range: [0, 43],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 43
      }
    }
  });
}

[0;31m  AST location data as expected for ExportDefaultDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  // testAstLocationData 'export default class',
  //   type: 'ExportDefaultDeclaration'
  //   clause:
  //     type: 'Class'
  return testAstLocationData('export default "abc"', {
    type: 'ExportDefaultDeclaration',
    declaration: {
      start: 15,
      end: 20,
      range: [15, 20],
      loc: {
        start: {
          line: 1,
          column: 15
        },
        end: {
          line: 1,
          column: 20
        }
      }
    },
    start: 0,
    end: 20,
    range: [0, 20],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 20
      }
    }
  });
}

[0;31m  AST location data as expected for ExportAllDeclaration node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('export * from "module-name"', {
    type: 'ExportAllDeclaration',
    source: {
      start: 14,
      end: 27,
      range: [14, 27],
      loc: {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 27
        }
      }
    },
    start: 0,
    end: 27,
    range: [0, 27],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 27
      }
    }
  });
}

[0;31m  AST location data as expected for ImportDefaultSpecifier node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('import React from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        start: 7,
        end: 12,
        range: [7,
      12],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 12
          }
        }
      }
    ],
    source: {
      start: 18,
      end: 25,
      range: [18, 25],
      loc: {
        start: {
          line: 1,
          column: 18
        },
        end: {
          line: 1,
          column: 25
        }
      }
    },
    start: 0,
    end: 25,
    range: [0, 25],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 25
      }
    }
  });
}

[0;31m  AST location data as expected for ImportNamespaceSpecifier node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('import * as React from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        start: 7,
        end: 17,
        range: [7,
      17],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 17
          }
        }
      }
    ],
    source: {
      start: 23,
      end: 30,
      range: [23, 30],
      loc: {
        start: {
          line: 1,
          column: 23
        },
        end: {
          line: 1,
          column: 30
        }
      }
    },
    start: 0,
    end: 30,
    range: [0, 30],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 30
      }
    }
  });
  return testAstLocationData('import React, * as ReactStar from "react"', {
    type: 'ImportDeclaration',
    specifiers: [
      {
        start: 7,
        end: 12,
        range: [7,
      12],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 12
          }
        }
      },
      {
        local: {
          start: 19,
          end: 28,
          range: [19,
      28],
          loc: {
            start: {
              line: 1,
              column: 19
            },
            end: {
              line: 1,
              column: 28
            }
          }
        },
        start: 14,
        end: 28,
        range: [14,
      28],
        loc: {
          start: {
            line: 1,
            column: 14
          },
          end: {
            line: 1,
            column: 28
          }
        }
      }
    ],
    source: {
      start: 34,
      end: 41,
      range: [34, 41],
      loc: {
        start: {
          line: 1,
          column: 34
        },
        end: {
          line: 1,
          column: 41
        }
      }
    },
    start: 0,
    end: 41,
    range: [0, 41],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 41
      }
    }
  });
}

[0;31m  AST location data as expected for Obj node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData("{a: 1, b, [c], @d, [e()]: f, 'g': 2, ...h, i...}", {
    type: 'ObjectExpression',
    properties: [
      {
        key: {
          start: 1,
          end: 2,
          range: [1,
      2],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 2
            }
          }
        },
        value: {
          start: 4,
          end: 5,
          range: [4,
      5],
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 1,
              column: 5
            }
          }
        },
        start: 1,
        end: 5,
        range: [1,
      5],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 5
          }
        }
      },
      {
        key: {
          start: 7,
          end: 8,
          range: [7,
      8],
          loc: {
            start: {
              line: 1,
              column: 7
            },
            end: {
              line: 1,
              column: 8
            }
          }
        },
        value: {
          start: 7,
          end: 8,
          range: [7,
      8],
          loc: {
            start: {
              line: 1,
              column: 7
            },
            end: {
              line: 1,
              column: 8
            }
          }
        },
        start: 7,
        end: 8,
        range: [7,
      8],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 8
          }
        }
      },
      {
        key: {
          start: 11,
          end: 12,
          range: [11,
      12],
          loc: {
            start: {
              line: 1,
              column: 11
            },
            end: {
              line: 1,
              column: 12
            }
          }
        },
        value: {
          start: 11,
          end: 12,
          range: [11,
      12],
          loc: {
            start: {
              line: 1,
              column: 11
            },
            end: {
              line: 1,
              column: 12
            }
          }
        },
        start: 10,
        end: 13,
        range: [10,
      13],
        loc: {
          start: {
            line: 1,
            column: 10
          },
          end: {
            line: 1,
            column: 13
          }
        }
      },
      {
        key: {
          object: {
            start: 15,
            end: 16,
            range: [15,
      16],
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 16
              }
            }
          },
          property: {
            start: 16,
            end: 17,
            range: [16,
      17],
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          },
          start: 15,
          end: 17,
          range: [15,
      17],
          loc: {
            start: {
              line: 1,
              column: 15
            },
            end: {
              line: 1,
              column: 17
            }
          }
        },
        value: {
          object: {
            start: 15,
            end: 16,
            range: [15,
      16],
            loc: {
              start: {
                line: 1,
                column: 15
              },
              end: {
                line: 1,
                column: 16
              }
            }
          },
          property: {
            start: 16,
            end: 17,
            range: [16,
      17],
            loc: {
              start: {
                line: 1,
                column: 16
              },
              end: {
                line: 1,
                column: 17
              }
            }
          },
          start: 15,
          end: 17,
          range: [15,
      17],
          loc: {
            start: {
              line: 1,
              column: 15
            },
            end: {
              line: 1,
              column: 17
            }
          }
        },
        start: 15,
        end: 17,
        range: [15,
      17],
        loc: {
          start: {
            line: 1,
            column: 15
          },
          end: {
            line: 1,
            column: 17
          }
        }
      },
      {
        key: {
          start: 20,
          end: 23,
          range: [20,
      23],
          loc: {
            start: {
              line: 1,
              column: 20
            },
            end: {
              line: 1,
              column: 23
            }
          }
        },
        value: {
          start: 26,
          end: 27,
          range: [26,
      27],
          loc: {
            start: {
              line: 1,
              column: 26
            },
            end: {
              line: 1,
              column: 27
            }
          }
        },
        start: 19,
        end: 27,
        range: [19,
      27],
        loc: {
          start: {
            line: 1,
            column: 19
          },
          end: {
            line: 1,
            column: 27
          }
        }
      },
      {
        key: {
          start: 29,
          end: 32,
          range: [29,
      32],
          loc: {
            start: {
              line: 1,
              column: 29
            },
            end: {
              line: 1,
              column: 32
            }
          }
        },
        value: {
          start: 34,
          end: 35,
          range: [34,
      35],
          loc: {
            start: {
              line: 1,
              column: 34
            },
            end: {
              line: 1,
              column: 35
            }
          }
        },
        start: 29,
        end: 35,
        range: [29,
      35],
        loc: {
          start: {
            line: 1,
            column: 29
          },
          end: {
            line: 1,
            column: 35
          }
        }
      },
      {
        argument: {
          start: 40,
          end: 41,
          range: [40,
      41],
          loc: {
            start: {
              line: 1,
              column: 40
            },
            end: {
              line: 1,
              column: 41
            }
          }
        },
        start: 37,
        end: 41,
        range: [37,
      41],
        loc: {
          start: {
            line: 1,
            column: 37
          },
          end: {
            line: 1,
            column: 41
          }
        }
      },
      {
        argument: {
          start: 43,
          end: 44,
          range: [43,
      44],
          loc: {
            start: {
              line: 1,
              column: 43
            },
            end: {
              line: 1,
              column: 44
            }
          }
        },
        start: 43,
        end: 47,
        range: [43,
      47],
        loc: {
          start: {
            line: 1,
            column: 43
          },
          end: {
            line: 1,
            column: 47
          }
        }
      }
    ],
    start: 0,
    end: 48,
    range: [0, 48],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 48
      }
    }
  });
  return testAstLocationData('a: 1', {
    type: 'ObjectExpression',
    properties: [
      {
        key: {
          start: 0,
          end: 1,
          range: [0,
      1],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        },
        value: {
          start: 3,
          end: 4,
          range: [3,
      4],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 4
            }
          }
        },
        start: 0,
        end: 4,
        range: [0,
      4],
        loc: {
          start: {
            line: 1,
            column: 0
          },
          end: {
            line: 1,
            column: 4
          }
        }
      }
    ],
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
}

[0;31m  AST location data as expected for Assign node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('a = b', {
    type: 'AssignmentExpression',
    left: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    right: {
      start: 4,
      end: 5,
      range: [4, 5],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
  testAstLocationData('a += b', {
    type: 'AssignmentExpression',
    left: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    right: {
      start: 5,
      end: 6,
      range: [5, 6],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  return testAstLocationData('{a: [...b]} = c', {
    type: 'AssignmentExpression',
    left: {
      properties: [
        {
          type: 'ObjectProperty',
          key: {
            start: 1,
            end: 2,
            range: [1,
        2],
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 2
              }
            }
          },
          value: {
            elements: [
              {
                start: 5,
                end: 9,
                range: [5,
              9],
                loc: {
                  start: {
                    line: 1,
                    column: 5
                  },
                  end: {
                    line: 1,
                    column: 9
                  }
                }
              }
            ],
            start: 4,
            end: 10,
            range: [4,
        10],
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 10
              }
            }
          },
          start: 1,
          end: 10,
          range: [1,
        10],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 10
            }
          }
        }
      ],
      start: 0,
      end: 11,
      range: [0, 11],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    right: {
      start: 14,
      end: 15,
      range: [14, 15],
      loc: {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    start: 0,
    end: 15,
    range: [0, 15],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 15
      }
    }
  });
}

[0;31m  AST location data as expected for Expansion node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('[..., b] = c', {
    type: 'AssignmentExpression',
    left: {
      elements: [
        {
          start: 1,
          end: 4,
          range: [1,
        4],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 4
            }
          }
        }
      ],
      start: 0,
      end: 8,
      range: [0, 8],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    }
  });
}

[0;31m  AST location data as expected for Throw node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('throw new BallError "catch"', {
    type: 'ThrowStatement',
    argument: {
      start: 6,
      end: 27,
      range: [6, 27],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 27
        }
      }
    },
    start: 0,
    end: 27,
    range: [0, 27],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 27
      }
    }
  });
}

[0;31m  AST location data as expected for Existence node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('Ghosts?', {
    type: 'UnaryExpression',
    argument: {
      start: 0,
      end: 6,
      range: [0, 6],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    start: 0,
    end: 7,
    range: [0, 7],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 7
      }
    }
  });
}

[0;31m  AST location data as expected for JSXTag node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('<CSXY />', {
    type: 'JSXElement',
    openingElement: {
      name: {
        start: 1,
        end: 5,
        range: [1, 5],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 5
          }
        }
      },
      start: 0,
      end: 8,
      range: [0, 8],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  testAstLocationData('<div></div>', {
    type: 'JSXElement',
    openingElement: {
      name: {
        start: 1,
        end: 4,
        range: [1, 4],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      start: 0,
      end: 5,
      range: [0, 5],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    closingElement: {
      name: {
        start: 7,
        end: 10,
        range: [7, 10],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 10
          }
        }
      },
      start: 5,
      end: 11,
      range: [5, 11],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
  testAstLocationData('<A.B />', {
    type: 'JSXElement',
    openingElement: {
      name: {
        object: {
          start: 1,
          end: 2,
          range: [1, 2],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 2
            }
          }
        },
        property: {
          start: 3,
          end: 4,
          range: [3, 4],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 4
            }
          }
        },
        start: 1,
        end: 4,
        range: [1, 4],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      start: 0,
      end: 7,
      range: [0, 7],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    start: 0,
    end: 7,
    range: [0, 7],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 7
      }
    }
  });
  testAstLocationData('<Tag.Name.Here></Tag.Name.Here>', {
    type: 'JSXElement',
    openingElement: {
      name: {
        object: {
          object: {
            start: 1,
            end: 4,
            range: [1, 4],
            loc: {
              start: {
                line: 1,
                column: 1
              },
              end: {
                line: 1,
                column: 4
              }
            }
          },
          property: {
            start: 5,
            end: 9,
            range: [5, 9],
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 9
              }
            }
          },
          start: 1,
          end: 9,
          range: [1, 9],
          loc: {
            start: {
              line: 1,
              column: 1
            },
            end: {
              line: 1,
              column: 9
            }
          }
        },
        property: {
          start: 10,
          end: 14,
          range: [10, 14],
          loc: {
            start: {
              line: 1,
              column: 10
            },
            end: {
              line: 1,
              column: 14
            }
          }
        },
        start: 1,
        end: 14,
        range: [1, 14],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 14
          }
        }
      },
      start: 0,
      end: 15,
      range: [0, 15],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    closingElement: {
      name: {
        object: {
          object: {
            start: 17,
            end: 20,
            range: [17, 20],
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 20
              }
            }
          },
          property: {
            start: 21,
            end: 25,
            range: [21, 25],
            loc: {
              start: {
                line: 1,
                column: 21
              },
              end: {
                line: 1,
                column: 25
              }
            }
          },
          start: 17,
          end: 25,
          range: [17, 25],
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 25
            }
          }
        },
        property: {
          start: 26,
          end: 30,
          range: [26, 30],
          loc: {
            start: {
              line: 1,
              column: 26
            },
            end: {
              line: 1,
              column: 30
            }
          }
        },
        start: 17,
        end: 30,
        range: [17, 30],
        loc: {
          start: {
            line: 1,
            column: 17
          },
          end: {
            line: 1,
            column: 30
          }
        }
      },
      start: 15,
      end: 31,
      range: [15, 31],
      loc: {
        start: {
          line: 1,
          column: 15
        },
        end: {
          line: 1,
          column: 31
        }
      }
    },
    start: 0,
    end: 31,
    range: [0, 31],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 31
      }
    }
  });
  testAstLocationData('<></>', {
    type: 'JSXFragment',
    openingFragment: {
      start: 0,
      end: 2,
      range: [0, 2],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    closingFragment: {
      start: 2,
      end: 5,
      range: [2, 5],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
  testAstLocationData('<div\n  a\n  b="c"\n  d={e}\n  {...f}\n/>', {
    type: 'JSXElement',
    openingElement: {
      name: {
        start: 1,
        end: 4,
        range: [1, 4],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      attributes: [
        {
          name: {
            start: 7,
            end: 8,
            range: [7,
        8],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 3
              }
            }
          },
          start: 7,
          end: 8,
          range: [7,
        8],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 3
            }
          }
        },
        {
          name: {
            start: 11,
            end: 12,
            range: [11,
        12],
            loc: {
              start: {
                line: 3,
                column: 2
              },
              end: {
                line: 3,
                column: 3
              }
            }
          },
          value: {
            start: 13,
            end: 16,
            range: [13,
        16],
            loc: {
              start: {
                line: 3,
                column: 4
              },
              end: {
                line: 3,
                column: 7
              }
            }
          },
          start: 11,
          end: 16,
          range: [11,
        16],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 7
            }
          }
        },
        {
          name: {
            start: 19,
            end: 20,
            range: [19,
        20],
            loc: {
              start: {
                line: 4,
                column: 2
              },
              end: {
                line: 4,
                column: 3
              }
            }
          },
          value: {
            expression: {
              start: 22,
              end: 23,
              range: [22,
        23],
              loc: {
                start: {
                  line: 4,
                  column: 5
                },
                end: {
                  line: 4,
                  column: 6
                }
              }
            },
            start: 21,
            end: 24,
            range: [21,
        24],
            loc: {
              start: {
                line: 4,
                column: 4
              },
              end: {
                line: 4,
                column: 7
              }
            }
          },
          start: 19,
          end: 24,
          range: [19,
        24],
          loc: {
            start: {
              line: 4,
              column: 2
            },
            end: {
              line: 4,
              column: 7
            }
          }
        },
        {
          argument: {
            start: 31,
            end: 32,
            range: [31,
        32],
            loc: {
              start: {
                line: 5,
                column: 6
              },
              end: {
                line: 5,
                column: 7
              }
            }
          },
          start: 27,
          end: 33,
          range: [27,
        33],
          loc: {
            start: {
              line: 5,
              column: 2
            },
            end: {
              line: 5,
              column: 8
            }
          }
        }
      ],
      start: 0,
      end: 36,
      range: [0, 36],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 6,
          column: 2
        }
      }
    },
    start: 0,
    end: 36,
    range: [0, 36],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 6,
        column: 2
      }
    }
  });
  testAstLocationData('<div {f...} />', {
    type: 'JSXElement',
    openingElement: {
      attributes: [
        {
          argument: {
            start: 6,
            end: 7,
            range: [6,
        7],
            loc: {
              start: {
                line: 1,
                column: 6
              },
              end: {
                line: 1,
                column: 7
              }
            }
          },
          start: 5,
          end: 11,
          range: [5,
        11],
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 11
            }
          }
        }
      ]
    }
  });
  testAstLocationData('<div>abc</div>', {
    type: 'JSXElement',
    openingElement: {
      name: {
        start: 1,
        end: 4,
        range: [1, 4],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      start: 0,
      end: 5,
      range: [0, 5],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    closingElement: {
      name: {
        start: 10,
        end: 13,
        range: [10, 13],
        loc: {
          start: {
            line: 1,
            column: 10
          },
          end: {
            line: 1,
            column: 13
          }
        }
      },
      start: 8,
      end: 14,
      range: [8, 14],
      loc: {
        start: {
          line: 1,
          column: 8
        },
        end: {
          line: 1,
          column: 14
        }
      }
    },
    children: [
      {
        start: 5,
        end: 8,
        range: [5,
      8],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 8
          }
        }
      }
    ],
    start: 0,
    end: 14,
    range: [0, 14],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 14
      }
    }
  });
  testAstLocationData('<a>\n  {b}\n  <c />\n</a>', {
    type: 'JSXElement',
    openingElement: {
      name: {
        start: 1,
        end: 2,
        range: [1, 2],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 2
          }
        }
      },
      start: 0,
      end: 3,
      range: [0, 3],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      }
    },
    closingElement: {
      name: {
        start: 20,
        end: 21,
        range: [20, 21],
        loc: {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }
      },
      start: 18,
      end: 22,
      range: [18, 22],
      loc: {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 4
        }
      }
    },
    children: [
      {
        start: 3,
        end: 6,
        range: [3,
      6],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 2,
            column: 2
          }
        }
      },
      {
        expression: {
          start: 7,
          end: 8,
          range: [7,
      8],
          loc: {
            start: {
              line: 2,
              column: 3
            },
            end: {
              line: 2,
              column: 4
            }
          }
        },
        start: 6,
        end: 9,
        range: [6,
      9],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 5
          }
        }
      },
      {
        start: 9,
        end: 12,
        range: [9,
      12],
        loc: {
          start: {
            line: 2,
            column: 5
          },
          end: {
            line: 3,
            column: 2
          }
        }
      },
      {
        start: 12,
        end: 17,
        range: [12,
      17],
        loc: {
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 3,
            column: 7
          }
        }
      },
      {
        start: 17,
        end: 18,
        range: [17,
      18],
        loc: {
          start: {
            line: 3,
            column: 7
          },
          end: {
            line: 4,
            column: 0
          }
        }
      }
    ],
    start: 0,
    end: 22,
    range: [0, 22],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 4
      }
    }
  });
  testAstLocationData('<>abc{}</>', {
    type: 'JSXFragment',
    openingFragment: {
      start: 0,
      end: 2,
      range: [0, 2],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    closingFragment: {
      start: 7,
      end: 10,
      range: [7, 10],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 10
        }
      }
    },
    children: [
      {
        start: 2,
        end: 5,
        range: [2,
      5],
        loc: {
          start: {
            line: 1,
            column: 2
          },
          end: {
            line: 1,
            column: 5
          }
        }
      },
      {
        expression: {
          start: 6,
          end: 6,
          range: [6,
      6],
          loc: {
            start: {
              line: 1,
              column: 6
            },
            end: {
              line: 1,
              column: 6
            }
          }
        },
        start: 5,
        end: 7,
        range: [5,
      7],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 7
          }
        }
      }
    ],
    start: 0,
    end: 10,
    range: [0, 10],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 10
      }
    }
  });
  return testAstLocationData('<a>{<b />}</a>', {
    type: 'JSXElement',
    children: [
      {
        expression: {
          start: 4,
          end: 9,
          range: [4,
      9],
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 1,
              column: 9
            }
          }
        },
        start: 3,
        end: 10,
        range: [3,
      10],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 1,
            column: 10
          }
        }
      }
    ],
    start: 0,
    end: 14,
    range: [0, 14],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 14
      }
    }
  });
}

[0;31m  AST as expected for Try node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('try cappuccino', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: [
        {
          expression: {
            start: 4,
            end: 14,
            range: [4,
        14],
            loc: {
              start: {
                line: 1,
                column: 4
              },
              end: {
                line: 1,
                column: 14
              }
            }
          },
          start: 4,
          end: 14,
          range: [4,
        14],
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 1,
              column: 14
            }
          }
        }
      ],
      start: 3,
      end: 14,
      range: [3, 14],
      loc: {
        start: {
          line: 1,
          column: 3
        },
        end: {
          line: 1,
          column: 14
        }
      }
    },
    start: 0,
    end: 14,
    range: [0, 14],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 14
      }
    }
  });
  testAstLocationData('try\n  x = 1\n  y()\ncatch e\n  d()\nfinally\n  f + g', {
    type: 'TryStatement',
    block: {
      type: 'BlockStatement',
      body: [
        {
          expression: {
            start: 6,
            end: 11,
            range: [6,
        11],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 7
              }
            }
          },
          start: 6,
          end: 11,
          range: [6,
        11],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 7
            }
          }
        },
        {
          expression: {
            start: 14,
            end: 17,
            range: [14,
        17],
            loc: {
              start: {
                line: 3,
                column: 2
              },
              end: {
                line: 3,
                column: 5
              }
            }
          },
          start: 14,
          end: 17,
          range: [14,
        17],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 5
            }
          }
        }
      ],
      start: 4,
      end: 17,
      range: [4, 17],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      }
    },
    handler: {
      param: {
        start: 24,
        end: 25,
        range: [24, 25],
        loc: {
          start: {
            line: 4,
            column: 6
          },
          end: {
            line: 4,
            column: 7
          }
        }
      },
      body: {
        body: [
          {
            start: 28,
            end: 31,
            range: [28,
          31],
            loc: {
              start: {
                line: 5,
                column: 2
              },
              end: {
                line: 5,
                column: 5
              }
            }
          }
        ],
        start: 26,
        end: 31,
        range: [26, 31],
        loc: {
          start: {
            line: 5,
            column: 0
          },
          end: {
            line: 5,
            column: 5
          }
        }
      },
      start: 18,
      end: 31,
      range: [18, 31],
      loc: {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 5,
          column: 5
        }
      }
    },
    finalizer: {
      body: [
        {
          expression: {
            start: 42,
            end: 47,
            range: [42,
        47],
            loc: {
              start: {
                line: 7,
                column: 2
              },
              end: {
                line: 7,
                column: 7
              }
            }
          },
          start: 42,
          end: 47,
          range: [42,
        47],
          loc: {
            start: {
              line: 7,
              column: 2
            },
            end: {
              line: 7,
              column: 7
            }
          }
        }
      ],
      start: 32,
      end: 47,
      range: [32, 47],
      loc: {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 7,
          column: 7
        }
      }
    },
    start: 0,
    end: 47,
    range: [0, 47],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 7,
        column: 7
      }
    }
  });
  return testAstLocationData('try\ncatch {e}\n  f', {
    type: 'TryStatement',
    handler: {
      param: {
        start: 10,
        end: 13,
        range: [10, 13],
        loc: {
          start: {
            line: 2,
            column: 6
          },
          end: {
            line: 2,
            column: 9
          }
        }
      },
      body: {
        start: 14,
        end: 17,
        range: [14, 17],
        loc: {
          start: {
            line: 3,
            column: 0
          },
          end: {
            line: 3,
            column: 3
          }
        }
      },
      start: 4,
      end: 17,
      range: [4, 17],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 3
        }
      }
    }
  });
}

[0;31m  AST location data as expected for Root node[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected AST node type [0mundefined[0;31m to equal [0mFile[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testSingleNodeLocationData (<anonymous>:1:1)
    at testAstNodeLocationData (<anonymous>:1:1)
    at testAstRootLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstRootLocationData('1\n2', {
    type: 'File',
    program: {
      start: 0,
      end: 3,
      range: [0, 3],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      }
    },
    start: 0,
    end: 3,
    range: [0, 3],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 1
      }
    }
  });
  testAstRootLocationData('a = 1\nb', {
    type: 'File',
    program: {
      start: 0,
      end: 7,
      range: [0, 7],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 2,
          column: 1
        }
      }
    },
    start: 0,
    end: 7,
    range: [0, 7],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 1
      }
    }
  });
  testAstRootLocationData('a = 1\nb\n\n', {
    type: 'File',
    program: {
      start: 0,
      end: 9,
      range: [0, 9],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 0
        }
      }
    },
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 0
      }
    }
  });
  testAstRootLocationData('a = 1\n\n# Comment', {
    type: 'File',
    program: {
      start: 0,
      end: 16,
      range: [0, 16],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 9
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 9
      }
    }
  });
  return testAstRootLocationData('a = 1\n\n# Comment\n', {
    type: 'File',
    program: {
      start: 0,
      end: 17,
      range: [0, 17],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 4,
          column: 0
        }
      }
    },
    start: 0,
    end: 17,
    range: [0, 17],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 0
      }
    }
  });
}

[0;31m  AST location data as expected for Switch node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('switch x\n  when a then a\n  when b, c then c\n  else 42', {
    type: 'SwitchStatement',
    discriminant: {
      start: 7,
      end: 8,
      range: [7, 8],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    cases: [
      {
        test: {
          start: 16,
          end: 17,
          range: [16,
      17],
          loc: {
            start: {
              line: 2,
              column: 7
            },
            end: {
              line: 2,
              column: 8
            }
          }
        },
        consequent: [
          {
            expression: {
              start: 23,
              end: 24,
              range: [23,
          24],
              loc: {
                start: {
                  line: 2,
                  column: 14
                },
                end: {
                  line: 2,
                  column: 15
                }
              }
            },
            start: 23,
            end: 24,
            range: [23,
          24],
            loc: {
              start: {
                line: 2,
                column: 14
              },
              end: {
                line: 2,
                column: 15
              }
            }
          }
        ],
        start: 11,
        end: 24,
        range: [11,
      24],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 15
          }
        }
      },
      {
        test: {
          start: 32,
          end: 33,
          range: [32,
      33],
          loc: {
            start: {
              line: 3,
              column: 7
            },
            end: {
              line: 3,
              column: 8
            }
          }
        },
        start: 27,
        end: 33,
        range: [27,
      33],
        loc: {
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 3,
            column: 8
          }
        }
      },
      {
        test: {
          start: 35,
          end: 36,
          range: [35,
      36],
          loc: {
            start: {
              line: 3,
              column: 10
            },
            end: {
              line: 3,
              column: 11
            }
          }
        },
        consequent: [
          {
            expression: {
              start: 42,
              end: 43,
              range: [42,
          43],
              loc: {
                start: {
                  line: 3,
                  column: 17
                },
                end: {
                  line: 3,
                  column: 18
                }
              }
            },
            start: 42,
            end: 43,
            range: [42,
          43],
            loc: {
              start: {
                line: 3,
                column: 17
              },
              end: {
                line: 3,
                column: 18
              }
            }
          }
        ],
        start: 35,
        end: 43,
        range: [35,
      43],
        loc: {
          start: {
            line: 3,
            column: 10
          },
          end: {
            line: 3,
            column: 18
          }
        }
      },
      {
        consequent: [
          {
            expression: {
              start: 51,
              end: 53,
              range: [51,
          53],
              loc: {
                start: {
                  line: 4,
                  column: 7
                },
                end: {
                  line: 4,
                  column: 9
                }
              }
            },
            start: 51,
            end: 53,
            range: [51,
          53],
            loc: {
              start: {
                line: 4,
                column: 7
              },
              end: {
                line: 4,
                column: 9
              }
            }
          }
        ],
        start: 46,
        end: 53,
        range: [46,
      53],
        loc: {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 4,
            column: 9
          }
        }
      }
    ],
    start: 0,
    end: 53,
    range: [0, 53],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 9
      }
    }
  });
  return testAstLocationData('switch\n  when some(condition)\n    doSomething()\n    andThenSomethingElse', {
    type: 'SwitchStatement',
    cases: [
      {
        test: {
          start: 14,
          end: 29,
          range: [14,
      29],
          loc: {
            start: {
              line: 2,
              column: 7
            },
            end: {
              line: 2,
              column: 22
            }
          }
        },
        consequent: [
          {
            expression: {
              start: 34,
              end: 47,
              range: [34,
          47],
              loc: {
                start: {
                  line: 3,
                  column: 4
                },
                end: {
                  line: 3,
                  column: 17
                }
              }
            },
            start: 34,
            end: 47,
            range: [34,
          47],
            loc: {
              start: {
                line: 3,
                column: 4
              },
              end: {
                line: 3,
                column: 17
              }
            }
          },
          {
            expression: {
              start: 52,
              end: 72,
              range: [52,
          72],
              loc: {
                start: {
                  line: 4,
                  column: 4
                },
                end: {
                  line: 4,
                  column: 24
                }
              }
            }
          }
        ]
      }
    ]
  });
}

[0;31m  AST location data as expected for Code node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('(a) ->\n  b\n  c()', {
    type: 'FunctionExpression',
    params: [
      {
        start: 1,
        end: 2,
        range: [1,
      2],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 2
          }
        }
      }
    ],
    body: {
      body: [
        {
          start: 9,
          end: 10,
          range: [9,
        10],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 3
            }
          }
        },
        {
          start: 13,
          end: 16,
          range: [13,
        16],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 5
            }
          }
        }
      ],
      start: 7,
      end: 16,
      range: [7, 16],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      }
    }
  });
  testAstLocationData('-> a', {
    type: 'FunctionExpression',
    body: {
      start: 2,
      end: 4,
      range: [2, 4],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    start: 0,
    end: 4,
    range: [0, 4],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 4
      }
    }
  });
  testAstLocationData('(\n  a,\n  [\n    b\n    c\n  ]\n) ->\n  d', {
    type: 'FunctionExpression',
    params: [
      {
        start: 4,
        end: 5,
        range: [4,
      5],
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 3
          }
        }
      },
      {
        elements: [
          {
            start: 15,
            end: 16,
            range: [15,
          16],
            loc: {
              start: {
                line: 4,
                column: 4
              },
              end: {
                line: 4,
                column: 5
              }
            }
          },
          {
            start: 21,
            end: 22,
            range: [21,
          22],
            loc: {
              start: {
                line: 5,
                column: 4
              },
              end: {
                line: 5,
                column: 5
              }
            }
          }
        ],
        start: 9,
        end: 26,
        range: [9,
      26],
        loc: {
          start: {
            line: 3,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        }
      }
    ],
    start: 0,
    end: 35,
    range: [0, 35],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 8,
        column: 3
      }
    }
  });
  return testAstLocationData('->', {
    type: 'FunctionExpression',
    body: {
      start: 2,
      end: 2,
      range: [2, 2],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 2
        }
      }
    },
    start: 0,
    end: 2,
    range: [0, 2],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 2
      }
    }
  });
}

[0;31m  AST location data as expected for Return node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('return no', {
    type: 'ReturnStatement',
    argument: {
      start: 7,
      end: 9,
      range: [7, 9],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 9
        }
      }
    },
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 9
      }
    }
  });
  testAstLocationData('(a, b) ->\n  return a + b', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          argument: {
            start: 19,
            end: 24,
            range: [19,
        24],
            loc: {
              start: {
                line: 2,
                column: 9
              },
              end: {
                line: 2,
                column: 14
              }
            }
          },
          start: 12,
          end: 24,
          range: [12,
        24],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 14
            }
          }
        }
      ],
      start: 10,
      end: 24,
      range: [10, 24],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 14
        }
      }
    },
    start: 0,
    end: 24,
    range: [0, 24],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 14
      }
    }
  });
  return testAstLocationData('-> return', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          start: 3,
          end: 9,
          range: [3,
        9],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 9
            }
          }
        }
      ],
      start: 2,
      end: 9,
      range: [2, 9],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 9
        }
      }
    },
    start: 0,
    end: 9,
    range: [0, 9],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 9
      }
    }
  });
}

[0;31m  AST as expected for YieldReturn node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('-> yield return 1', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          expression: {
            argument: {
              argument: {
                start: 16,
                end: 17,
                range: [16,
        17],
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                }
              },
              start: 9,
              end: 17,
              range: [9,
        17],
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 17
                }
              }
            },
            start: 3,
            end: 17,
            range: [3,
        17],
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 17
              }
            }
          },
          start: 3,
          end: 17,
          range: [3,
        17],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 17
            }
          }
        }
      ],
      start: 2,
      end: 17,
      range: [2, 17],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 17,
    range: [0, 17],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 17
      }
    }
  });
  return testAstLocationData('-> yield return', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          expression: {
            argument: {
              start: 9,
              end: 15,
              range: [9,
        15],
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 15
                }
              }
            },
            start: 3,
            end: 15,
            range: [3,
        15],
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 15
              }
            }
          },
          start: 3,
          end: 15,
          range: [3,
        15],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 15
            }
          }
        }
      ],
      start: 2,
      end: 15,
      range: [2, 15],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    start: 0,
    end: 15,
    range: [0, 15],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 15
      }
    }
  });
}

[0;31m  AST as expected for AwaitReturn node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('-> await return 1', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          expression: {
            argument: {
              argument: {
                start: 16,
                end: 17,
                range: [16,
        17],
                loc: {
                  start: {
                    line: 1,
                    column: 16
                  },
                  end: {
                    line: 1,
                    column: 17
                  }
                }
              },
              start: 9,
              end: 17,
              range: [9,
        17],
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 17
                }
              }
            },
            start: 3,
            end: 17,
            range: [3,
        17],
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 17
              }
            }
          },
          start: 3,
          end: 17,
          range: [3,
        17],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 17
            }
          }
        }
      ],
      start: 2,
      end: 17,
      range: [2, 17],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 17,
    range: [0, 17],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 17
      }
    }
  });
  return testAstLocationData('-> await return', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          expression: {
            argument: {
              start: 9,
              end: 15,
              range: [9,
        15],
              loc: {
                start: {
                  line: 1,
                  column: 9
                },
                end: {
                  line: 1,
                  column: 15
                }
              }
            },
            start: 3,
            end: 15,
            range: [3,
        15],
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 15
              }
            }
          },
          start: 3,
          end: 15,
          range: [3,
        15],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 15
            }
          }
        }
      ],
      start: 2,
      end: 15,
      range: [2, 15],
      loc: {
        start: {
          line: 1,
          column: 2
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    start: 0,
    end: 15,
    range: [0, 15],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 15
      }
    }
  });
}

[0;31m  AST as expected for If node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('if maybe then yes', {
    type: 'IfStatement',
    test: {
      start: 3,
      end: 8,
      range: [3, 8],
      loc: {
        start: {
          line: 1,
          column: 3
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    consequent: {
      body: [
        {
          expression: {
            start: 14,
            end: 17,
            range: [14,
        17],
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 17
              }
            }
          },
          start: 14,
          end: 17,
          range: [14,
        17],
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 17
            }
          }
        }
      ],
      start: 9,
      end: 17,
      range: [9, 17],
      loc: {
        start: {
          line: 1,
          column: 9
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 17,
    range: [0, 17],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 17
      }
    }
  });
  testAstLocationData('yes if maybe', {
    type: 'IfStatement',
    test: {
      start: 7,
      end: 12,
      range: [7, 12],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 12
        }
      }
    },
    consequent: {
      body: [
        {
          expression: {
            start: 0,
            end: 3,
            range: [0,
        3],
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            }
          },
          start: 0,
          end: 3,
          range: [0,
        3],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          }
        }
      ],
      start: 0,
      end: 3,
      range: [0, 3],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      }
    },
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    }
  });
  testAstLocationData('unless x then x else if y then y else z', {
    type: 'IfStatement',
    test: {
      start: 7,
      end: 8,
      range: [7, 8],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    consequent: {
      body: [
        {
          expression: {
            start: 14,
            end: 15,
            range: [14,
        15],
            loc: {
              start: {
                line: 1,
                column: 14
              },
              end: {
                line: 1,
                column: 15
              }
            }
          },
          start: 14,
          end: 15,
          range: [14,
        15],
          loc: {
            start: {
              line: 1,
              column: 14
            },
            end: {
              line: 1,
              column: 15
            }
          }
        }
      ],
      start: 9,
      end: 15,
      range: [9, 15],
      loc: {
        start: {
          line: 1,
          column: 9
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    alternate: {
      test: {
        start: 24,
        end: 25,
        range: [24, 25],
        loc: {
          start: {
            line: 1,
            column: 24
          },
          end: {
            line: 1,
            column: 25
          }
        }
      },
      consequent: {
        body: [
          {
            expression: {
              start: 31,
              end: 32,
              range: [31,
          32],
              loc: {
                start: {
                  line: 1,
                  column: 31
                },
                end: {
                  line: 1,
                  column: 32
                }
              }
            },
            start: 31,
            end: 32,
            range: [31,
          32],
            loc: {
              start: {
                line: 1,
                column: 31
              },
              end: {
                line: 1,
                column: 32
              }
            }
          }
        ],
        start: 26,
        end: 32,
        range: [26, 32],
        loc: {
          start: {
            line: 1,
            column: 26
          },
          end: {
            line: 1,
            column: 32
          }
        }
      },
      alternate: {
        body: [
          {
            expression: {
              start: 38,
              end: 39,
              range: [38,
          39],
              loc: {
                start: {
                  line: 1,
                  column: 38
                },
                end: {
                  line: 1,
                  column: 39
                }
              }
            },
            start: 38,
            end: 39,
            range: [38,
          39],
            loc: {
              start: {
                line: 1,
                column: 38
              },
              end: {
                line: 1,
                column: 39
              }
            }
          }
        ],
        start: 37,
        end: 39,
        range: [37, 39],
        loc: {
          start: {
            line: 1,
            column: 37
          },
          end: {
            line: 1,
            column: 39
          }
        }
      },
      start: 21,
      end: 39,
      range: [21, 39],
      loc: {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 1,
          column: 39
        }
      }
    },
    start: 0,
    end: 39,
    range: [0, 39],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 39
      }
    }
  });
  testAstLocationData('if a\n  b\nelse\n  if c\n    d', {
    type: 'IfStatement',
    test: {
      start: 3,
      end: 4,
      range: [3, 4],
      loc: {
        start: {
          line: 1,
          column: 3
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    consequent: {
      body: [
        {
          expression: {
            start: 7,
            end: 8,
            range: [7,
        8],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 3
              }
            }
          },
          start: 7,
          end: 8,
          range: [7,
        8],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 3
            }
          }
        }
      ],
      start: 5,
      end: 8,
      range: [5, 8],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 3
        }
      }
    },
    alternate: {
      body: [
        {
          test: {
            start: 19,
            end: 20,
            range: [19,
        20],
            loc: {
              start: {
                line: 4,
                column: 5
              },
              end: {
                line: 4,
                column: 6
              }
            }
          },
          consequent: {
            body: [
              {
                expression: {
                  start: 25,
                  end: 26,
                  range: [25,
              26],
                  loc: {
                    start: {
                      line: 5,
                      column: 4
                    },
                    end: {
                      line: 5,
                      column: 5
                    }
                  }
                },
                start: 25,
                end: 26,
                range: [25,
              26],
                loc: {
                  start: {
                    line: 5,
                    column: 4
                  },
                  end: {
                    line: 5,
                    column: 5
                  }
                }
              }
            ],
            start: 21,
            end: 26,
            range: [21,
        26],
            loc: {
              start: {
                line: 5,
                column: 0
              },
              end: {
                line: 5,
                column: 5
              }
            }
          },
          start: 16,
          end: 26,
          range: [16,
        26],
          loc: {
            start: {
              line: 4,
              column: 2
            },
            end: {
              line: 5,
              column: 5
            }
          }
        }
      ],
      start: 14,
      end: 26,
      range: [14, 26],
      loc: {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 5,
          column: 5
        }
      }
    },
    start: 0,
    end: 26,
    range: [0, 26],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 5,
        column: 5
      }
    }
  });
  testAstLocationData('a =\n  if b then c else if d then e', {
    type: 'AssignmentExpression',
    right: {
      test: {
        start: 9,
        end: 10,
        range: [9, 10],
        loc: {
          start: {
            line: 2,
            column: 5
          },
          end: {
            line: 2,
            column: 6
          }
        }
      },
      consequent: {
        start: 16,
        end: 17,
        range: [16, 17],
        loc: {
          start: {
            line: 2,
            column: 12
          },
          end: {
            line: 2,
            column: 13
          }
        }
      },
      alternate: {
        test: {
          start: 26,
          end: 27,
          range: [26, 27],
          loc: {
            start: {
              line: 2,
              column: 22
            },
            end: {
              line: 2,
              column: 23
            }
          }
        },
        consequent: {
          start: 33,
          end: 34,
          range: [33, 34],
          loc: {
            start: {
              line: 2,
              column: 29
            },
            end: {
              line: 2,
              column: 30
            }
          }
        },
        start: 23,
        end: 34,
        range: [23, 34],
        loc: {
          start: {
            line: 2,
            column: 19
          },
          end: {
            line: 2,
            column: 30
          }
        }
      },
      start: 6,
      end: 34,
      range: [6, 34],
      loc: {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 2,
          column: 30
        }
      }
    },
    start: 0,
    end: 34,
    range: [0, 34],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 30
      }
    }
  });
  return testAstLocationData('f(\n  if b\n    c\n    d\n)', {
    type: 'CallExpression',
    arguments: [
      {
        test: {
          start: 8,
          end: 9,
          range: [8,
      9],
          loc: {
            start: {
              line: 2,
              column: 5
            },
            end: {
              line: 2,
              column: 6
            }
          }
        },
        consequent: {
          body: [
            {
              expression: {
                start: 14,
                end: 15,
                range: [14,
            15],
                loc: {
                  start: {
                    line: 3,
                    column: 4
                  },
                  end: {
                    line: 3,
                    column: 5
                  }
                }
              },
              start: 14,
              end: 15,
              range: [14,
            15],
              loc: {
                start: {
                  line: 3,
                  column: 4
                },
                end: {
                  line: 3,
                  column: 5
                }
              }
            },
            {
              expression: {
                start: 20,
                end: 21,
                range: [20,
            21],
                loc: {
                  start: {
                    line: 4,
                    column: 4
                  },
                  end: {
                    line: 4,
                    column: 5
                  }
                }
              },
              start: 20,
              end: 21,
              range: [20,
            21],
              loc: {
                start: {
                  line: 4,
                  column: 4
                },
                end: {
                  line: 4,
                  column: 5
                }
              }
            }
          ],
          start: 10,
          end: 21,
          range: [10,
      21],
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 4,
              column: 5
            }
          }
        }
      }
    ],
    start: 0,
    end: 23,
    range: [0, 23],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 5,
        column: 1
      }
    }
  });
}

[0;31m  AST as expected for While node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('loop 1', {
    type: 'WhileStatement',
    test: {
      start: 0,
      end: 4,
      range: [0, 4],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 5,
            end: 6,
            range: [5,
        6],
            loc: {
              start: {
                line: 1,
                column: 5
              },
              end: {
                line: 1,
                column: 6
              }
            }
          },
          start: 5,
          end: 6,
          range: [5,
        6],
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 6
            }
          }
        }
      ],
      start: 5,
      end: 6,
      range: [5, 6],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  testAstLocationData('while 1 < 2 then', {
    type: 'WhileStatement',
    test: {
      start: 6,
      end: 11,
      range: [6, 11],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    body: {
      start: 12,
      end: 16,
      range: [12, 16],
      loc: {
        start: {
          line: 1,
          column: 12
        },
        end: {
          line: 1,
          column: 16
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 16
      }
    }
  });
  testAstLocationData('while 1 < 2 then fn()', {
    type: 'WhileStatement',
    test: {
      start: 6,
      end: 11,
      range: [6, 11],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 17,
            end: 21,
            range: [17,
        21],
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 21
              }
            }
          },
          start: 17,
          end: 21,
          range: [17,
        21],
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 21
            }
          }
        }
      ],
      start: 12,
      end: 21,
      range: [12, 21],
      loc: {
        start: {
          line: 1,
          column: 12
        },
        end: {
          line: 1,
          column: 21
        }
      }
    },
    start: 0,
    end: 21,
    range: [0, 21],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 21
      }
    }
  });
  testAstLocationData('x() until y', {
    type: 'WhileStatement',
    test: {
      start: 10,
      end: 11,
      range: [10, 11],
      loc: {
        start: {
          line: 1,
          column: 10
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 0,
            end: 3,
            range: [0,
        3],
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 3
              }
            }
          },
          start: 0,
          end: 3,
          range: [0,
        3],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 3
            }
          }
        }
      ],
      start: 0,
      end: 3,
      range: [0, 3],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 3
        }
      }
    },
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
  testAstLocationData('until x when y\n  z++', {
    type: 'WhileStatement',
    test: {
      start: 6,
      end: 7,
      range: [6, 7],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 17,
            end: 20,
            range: [17,
        20],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 5
              }
            }
          },
          start: 17,
          end: 20,
          range: [17,
        20],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 5
            }
          }
        }
      ],
      start: 15,
      end: 20,
      range: [15, 20],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 5
        }
      }
    },
    guard: {
      start: 13,
      end: 14,
      range: [13, 14],
      loc: {
        start: {
          line: 1,
          column: 13
        },
        end: {
          line: 1,
          column: 14
        }
      }
    },
    start: 0,
    end: 20,
    range: [0, 20],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 5
      }
    }
  });
  testAstLocationData('x while y when z', {
    type: 'WhileStatement',
    test: {
      start: 8,
      end: 9,
      range: [8, 9],
      loc: {
        start: {
          line: 1,
          column: 8
        },
        end: {
          line: 1,
          column: 9
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 0,
            end: 1,
            range: [0,
        1],
            loc: {
              start: {
                line: 1,
                column: 0
              },
              end: {
                line: 1,
                column: 1
              }
            }
          },
          start: 0,
          end: 1,
          range: [0,
        1],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 1
            }
          }
        }
      ],
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    guard: {
      start: 15,
      end: 16,
      range: [15, 16],
      loc: {
        start: {
          line: 1,
          column: 15
        },
        end: {
          line: 1,
          column: 16
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 16
      }
    }
  });
  return testAstLocationData('loop\n  a()\n  b++', {
    type: 'WhileStatement',
    test: {
      start: 0,
      end: 4,
      range: [0, 4],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    body: {
      body: [
        {
          expression: {
            start: 7,
            end: 10,
            range: [7,
        10],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 5
              }
            }
          },
          start: 7,
          end: 10,
          range: [7,
        10],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 5
            }
          }
        },
        {
          expression: {
            start: 13,
            end: 16,
            range: [13,
        16],
            loc: {
              start: {
                line: 3,
                column: 2
              },
              end: {
                line: 3,
                column: 5
              }
            }
          },
          start: 13,
          end: 16,
          range: [13,
        16],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 5
            }
          }
        }
      ],
      start: 5,
      end: 16,
      range: [5, 16],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 5
      }
    }
  });
}

[0;31m  AST location data as expected for MetaProperty node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('-> new.target', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          expression: {
            meta: {
              start: 3,
              end: 6,
              range: [3,
        6],
              loc: {
                start: {
                  line: 1,
                  column: 3
                },
                end: {
                  line: 1,
                  column: 6
                }
              }
            },
            property: {
              start: 7,
              end: 13,
              range: [7,
        13],
              loc: {
                start: {
                  line: 1,
                  column: 7
                },
                end: {
                  line: 1,
                  column: 13
                }
              }
            },
            start: 3,
            end: 13,
            range: [3,
        13],
            loc: {
              start: {
                line: 1,
                column: 3
              },
              end: {
                line: 1,
                column: 13
              }
            }
          }
        }
      ]
    },
    start: 0,
    end: 13,
    range: [0, 13],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 13
      }
    }
  });
}

[0;31m  AST location data as expected for For node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('for x, i in arr when x? then return', {
    type: 'For',
    name: {
      start: 4,
      end: 5,
      range: [4, 5],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 5
        }
      }
    },
    index: {
      start: 7,
      end: 8,
      range: [7, 8],
      loc: {
        start: {
          line: 1,
          column: 7
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    guard: {
      start: 21,
      end: 23,
      range: [21, 23],
      loc: {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 1,
          column: 23
        }
      }
    },
    source: {
      start: 12,
      end: 15,
      range: [12, 15],
      loc: {
        start: {
          line: 1,
          column: 12
        },
        end: {
          line: 1,
          column: 15
        }
      }
    },
    body: {
      body: [
        {
          start: 29,
          end: 35,
          range: [29,
        35],
          loc: {
            start: {
              line: 1,
              column: 29
            },
            end: {
              line: 1,
              column: 35
            }
          }
        }
      ],
      start: 24,
      end: 35,
      range: [24, 35],
      loc: {
        start: {
          line: 1,
          column: 24
        },
        end: {
          line: 1,
          column: 35
        }
      }
    },
    start: 0,
    end: 35,
    range: [0, 35],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 35
      }
    }
  });
  testAstLocationData('a = (x for x in y)', {
    type: 'AssignmentExpression',
    right: {
      name: {
        start: 11,
        end: 12,
        range: [11, 12],
        loc: {
          start: {
            line: 1,
            column: 11
          },
          end: {
            line: 1,
            column: 12
          }
        }
      },
      body: {
        start: 5,
        end: 6,
        range: [5, 6],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 6
          }
        }
      },
      source: {
        start: 16,
        end: 17,
        range: [16, 17],
        loc: {
          start: {
            line: 1,
            column: 16
          },
          end: {
            line: 1,
            column: 17
          }
        }
      },
      start: 5,
      end: 17,
      range: [5, 17],
      loc: {
        start: {
          line: 1,
          column: 5
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 18,
    range: [0, 18],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 18
      }
    }
  });
  testAstLocationData('x for [0...1]', {
    type: 'For',
    body: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    source: {
      start: 6,
      end: 13,
      range: [6, 13],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 13
        }
      }
    },
    start: 0,
    end: 13,
    range: [0, 13],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 13
      }
    }
  });
  testAstLocationData('for own x, y of z\n  c()\n  d', {
    type: 'For',
    name: {
      start: 11,
      end: 12,
      range: [11, 12],
      loc: {
        start: {
          line: 1,
          column: 11
        },
        end: {
          line: 1,
          column: 12
        }
      }
    },
    index: {
      start: 8,
      end: 9,
      range: [8, 9],
      loc: {
        start: {
          line: 1,
          column: 8
        },
        end: {
          line: 1,
          column: 9
        }
      }
    },
    body: {
      body: [
        {
          start: 20,
          end: 23,
          range: [20,
        23],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 5
            }
          }
        },
        {
          start: 26,
          end: 27,
          range: [26,
        27],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 3
            }
          }
        }
      ],
      start: 18,
      end: 27,
      range: [18, 27],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 3
        }
      }
    },
    source: {
      start: 16,
      end: 17,
      range: [16, 17],
      loc: {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 17
        }
      }
    },
    start: 0,
    end: 27,
    range: [0, 27],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 3
      }
    }
  });
  testAstLocationData('->\n  for await x from y\n    z', {
    type: 'FunctionExpression',
    body: {
      body: [
        {
          name: {
            start: 15,
            end: 16,
            range: [15,
        16],
            loc: {
              start: {
                line: 2,
                column: 12
              },
              end: {
                line: 2,
                column: 13
              }
            }
          },
          body: {
            body: [
              {
                start: 28,
                end: 29,
                range: [28,
              29],
                loc: {
                  start: {
                    line: 3,
                    column: 4
                  },
                  end: {
                    line: 3,
                    column: 5
                  }
                }
              }
            ],
            start: 24,
            end: 29,
            range: [24,
        29],
            loc: {
              start: {
                line: 3,
                column: 0
              },
              end: {
                line: 3,
                column: 5
              }
            }
          },
          source: {
            start: 22,
            end: 23,
            range: [22,
        23],
            loc: {
              start: {
                line: 2,
                column: 19
              },
              end: {
                line: 2,
                column: 20
              }
            }
          },
          start: 5,
          end: 29,
          range: [5,
        29],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 3,
              column: 5
            }
          }
        }
      ],
      start: 3,
      end: 29,
      range: [3, 29],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 5
        }
      }
    },
    start: 0,
    end: 29,
    range: [0, 29],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 5
      }
    }
  });
  return testAstLocationData('for {x} in y\n  z', {
    type: 'For',
    name: {
      properties: [
        {
          start: 5,
          end: 6,
          range: [5,
        6],
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 6
            }
          }
        }
      ],
      start: 4,
      end: 7,
      range: [4, 7],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    body: {
      body: [
        {
          start: 15,
          end: 16,
          range: [15,
        16],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 3
            }
          }
        }
      ],
      start: 13,
      end: 16,
      range: [13, 16],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 3
        }
      }
    },
    source: {
      start: 11,
      end: 12,
      range: [11, 12],
      loc: {
        start: {
          line: 1,
          column: 11
        },
        end: {
          line: 1,
          column: 12
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 3
      }
    }
  });
}

[0;31m  AST location data as expected for StringWithInterpolations node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('"a#{b}c"', {
    type: 'TemplateLiteral',
    expressions: [
      {
        start: 4,
        end: 5,
        range: [4,
      5],
        loc: {
          start: {
            line: 1,
            column: 4
          },
          end: {
            line: 1,
            column: 5
          }
        }
      }
    ],
    quasis: [
      {
        start: 1,
        end: 2,
        range: [1,
      2],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 2
          }
        }
      },
      {
        start: 6,
        end: 7,
        range: [6,
      7],
        loc: {
          start: {
            line: 1,
            column: 6
          },
          end: {
            line: 1,
            column: 7
          }
        }
      }
    ],
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  testAstLocationData('"""a#{b}c"""', {
    type: 'TemplateLiteral',
    expressions: [
      {
        start: 6,
        end: 7,
        range: [6,
      7],
        loc: {
          start: {
            line: 1,
            column: 6
          },
          end: {
            line: 1,
            column: 7
          }
        }
      }
    ],
    quasis: [
      {
        start: 3,
        end: 4,
        range: [3,
      4],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 1,
            column: 4
          }
        }
      },
      {
        start: 8,
        end: 9,
        range: [8,
      9],
        loc: {
          start: {
            line: 1,
            column: 8
          },
          end: {
            line: 1,
            column: 9
          }
        }
      }
    ],
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    }
  });
  testAstLocationData('"#{b}"', {
    type: 'TemplateLiteral',
    expressions: [
      {
        start: 3,
        end: 4,
        range: [3,
      4],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 1,
            column: 4
          }
        }
      }
    ],
    quasis: [
      {
        start: 1,
        end: 1,
        range: [1,
      1],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 1,
            column: 1
          }
        }
      },
      {
        start: 5,
        end: 5,
        range: [5,
      5],
        loc: {
          start: {
            line: 1,
            column: 5
          },
          end: {
            line: 1,
            column: 5
          }
        }
      }
    ],
    start: 0,
    end: 6,
    range: [0, 6],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 6
      }
    }
  });
  testAstLocationData('" a\n  #{b}\n  c\n"', {
    type: 'TemplateLiteral',
    expressions: [
      {
        start: 8,
        end: 9,
        range: [8,
      9],
        loc: {
          start: {
            line: 2,
            column: 4
          },
          end: {
            line: 2,
            column: 5
          }
        }
      }
    ],
    quasis: [
      {
        start: 1,
        end: 6,
        range: [1,
      6],
        loc: {
          start: {
            line: 1,
            column: 1
          },
          end: {
            line: 2,
            column: 2
          }
        }
      },
      {
        start: 10,
        end: 15,
        range: [10,
      15],
        loc: {
          start: {
            line: 2,
            column: 6
          },
          end: {
            line: 4,
            column: 0
          }
        }
      }
    ],
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 1
      }
    }
  });
  return testAstLocationData('"""\n  a\n    b#{\n    c\n  }d\n"""', {
    type: 'TemplateLiteral',
    expressions: [
      {
        start: 20,
        end: 21,
        range: [20,
      21],
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        }
      }
    ],
    quasis: [
      {
        start: 3,
        end: 13,
        range: [3,
      13],
        loc: {
          start: {
            line: 1,
            column: 3
          },
          end: {
            line: 3,
            column: 5
          }
        }
      },
      {
        start: 25,
        end: 27,
        range: [25,
      27],
        loc: {
          start: {
            line: 5,
            column: 3
          },
          end: {
            line: 6,
            column: 0
          }
        }
      }
    ],
    start: 0,
    end: 30,
    range: [0, 30],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 6,
        column: 3
      }
    }
  });
}

[0;31m  AST location data as expected for dynamic import[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return testAstLocationData('import(\'a\')', {
    type: 'CallExpression',
    callee: {
      start: 0,
      end: 6,
      range: [0, 6],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 6
        }
      }
    },
    arguments: [
      {
        start: 7,
        end: 10,
        range: [7,
      10],
        loc: {
          start: {
            line: 1,
            column: 7
          },
          end: {
            line: 1,
            column: 10
          }
        }
      }
    ],
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
}

[0;31m  AST location data as expected for RegexWithInterpolations node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('///^#{flavor}script$///', {
    type: 'InterpolatedRegExpLiteral',
    interpolatedPattern: {
      expressions: [
        {
          start: 6,
          end: 12,
          range: [6,
        12],
          loc: {
            start: {
              line: 1,
              column: 6
            },
            end: {
              line: 1,
              column: 12
            }
          }
        }
      ],
      quasis: [
        {
          start: 3,
          end: 4,
          range: [3,
        4],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 1,
              column: 4
            }
          }
        },
        {
          start: 13,
          end: 20,
          range: [13,
        20],
          loc: {
            start: {
              line: 1,
              column: 13
            },
            end: {
              line: 1,
              column: 20
            }
          }
        }
      ],
      start: 0,
      end: 23,
      range: [0, 23],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 23
        }
      }
    },
    start: 0,
    end: 23,
    range: [0, 23],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 23
      }
    }
  });
  return testAstLocationData('///\n  a\n  #{b}///ig', {
    type: 'InterpolatedRegExpLiteral',
    interpolatedPattern: {
      expressions: [
        {
          start: 12,
          end: 13,
          range: [12,
        13],
          loc: {
            start: {
              line: 3,
              column: 4
            },
            end: {
              line: 3,
              column: 5
            }
          }
        }
      ],
      quasis: [
        {
          start: 3,
          end: 10,
          range: [3,
        10],
          loc: {
            start: {
              line: 1,
              column: 3
            },
            end: {
              line: 3,
              column: 2
            }
          }
        },
        {
          start: 14,
          end: 14,
          range: [14,
        14],
          loc: {
            start: {
              line: 3,
              column: 6
            },
            end: {
              line: 3,
              column: 6
            }
          }
        }
      ],
      start: 0,
      end: 17,
      range: [0, 17],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 9
        }
      }
    },
    start: 0,
    end: 19,
    range: [0, 19],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 11
      }
    }
  });
}

[0;31m  AST location data as expected for RegexLiteral node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('/a/ig', {
    type: 'RegExpLiteral',
    start: 0,
    end: 5,
    range: [0, 5],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 5
      }
    }
  });
  testAstLocationData('///\n  a\n///i', {
    type: 'RegExpLiteral',
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 4
      }
    }
  });
  testAstLocationData('/a\\w\\u1111\\u{11111}/', {
    type: 'RegExpLiteral',
    start: 0,
    end: 20,
    range: [0, 20],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 20
      }
    }
  });
  testAstLocationData('///\n  a\n  \\w\\u1111\\u{11111}\n///', {
    type: 'RegExpLiteral',
    start: 0,
    end: 31,
    range: [0, 31],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 4,
        column: 3
      }
    }
  });
  return testAstLocationData('///\n  /\n  (.+)\n  /\n///', {
    type: 'RegExpLiteral',
    start: 0,
    end: 22,
    range: [0, 22],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 5,
        column: 3
      }
    }
  });
}

[0;31m  AST location data as expected for TaggedTemplateCall node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('func"tagged"', {
    type: 'TaggedTemplateExpression',
    tag: {
      start: 0,
      end: 4,
      range: [0, 4],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 4
        }
      }
    },
    quasi: {
      quasis: [
        {
          start: 5,
          end: 11,
          range: [5,
        11],
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 11
            }
          }
        }
      ],
      start: 4,
      end: 12,
      range: [4, 12],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 1,
          column: 12
        }
      }
    },
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    }
  });
  testAstLocationData('a"b#{c}"', {
    type: 'TaggedTemplateExpression',
    tag: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    quasi: {
      expressions: [
        {
          start: 5,
          end: 6,
          range: [5,
        6],
          loc: {
            start: {
              line: 1,
              column: 5
            },
            end: {
              line: 1,
              column: 6
            }
          }
        }
      ],
      quasis: [
        {
          start: 2,
          end: 3,
          range: [2,
        3],
          loc: {
            start: {
              line: 1,
              column: 2
            },
            end: {
              line: 1,
              column: 3
            }
          }
        },
        {
          start: 7,
          end: 7,
          range: [7,
        7],
          loc: {
            start: {
              line: 1,
              column: 7
            },
            end: {
              line: 1,
              column: 7
            }
          }
        }
      ],
      start: 1,
      end: 8,
      range: [1, 8],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 1,
          column: 8
        }
      }
    },
    start: 0,
    end: 8,
    range: [0, 8],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 8
      }
    }
  });
  testAstLocationData('a"""\n  b#{c}\n"""', {
    type: 'TaggedTemplateExpression',
    tag: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    quasi: {
      expressions: [
        {
          start: 10,
          end: 11,
          range: [10,
        11],
          loc: {
            start: {
              line: 2,
              column: 5
            },
            end: {
              line: 2,
              column: 6
            }
          }
        }
      ],
      quasis: [
        {
          start: 4,
          end: 8,
          range: [4,
        8],
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 2,
              column: 3
            }
          }
        },
        {
          start: 12,
          end: 13,
          range: [12,
        13],
          loc: {
            start: {
              line: 2,
              column: 7
            },
            end: {
              line: 3,
              column: 0
            }
          }
        }
      ],
      start: 1,
      end: 16,
      range: [1, 16],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 3,
          column: 3
        }
      }
    },
    start: 0,
    end: 16,
    range: [0, 16],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 3
      }
    }
  });
  return testAstLocationData("a'''\n  b\n'''", {
    type: 'TaggedTemplateExpression',
    tag: {
      start: 0,
      end: 1,
      range: [0, 1],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      }
    },
    quasi: {
      quasis: [
        {
          start: 4,
          end: 9,
          range: [4,
        9],
          loc: {
            start: {
              line: 1,
              column: 4
            },
            end: {
              line: 3,
              column: 0
            }
          }
        }
      ],
      start: 1,
      end: 12,
      range: [1, 12],
      loc: {
        start: {
          line: 1,
          column: 1
        },
        end: {
          line: 3,
          column: 3
        }
      }
    },
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 3
      }
    }
  });
}

[0;31m  AST location data as expected for Class node[0m 
[0;31m  TypeError: Cannot read property 'body' of undefined
    at getAstExpressions (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at exports.getAstExpressionOrStatement (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testAstLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstLocationData('class Klass', {
    type: 'ClassDeclaration',
    id: {
      start: 6,
      end: 11,
      range: [6, 11],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    body: {
      start: 11,
      end: 11,
      range: [11, 11],
      loc: {
        start: {
          line: 1,
          column: 11
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    start: 0,
    end: 11,
    range: [0, 11],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 11
      }
    }
  });
  testAstLocationData('class child extends parent', {
    type: 'ClassDeclaration',
    id: {
      start: 6,
      end: 11,
      range: [6, 11],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    superClass: {
      start: 20,
      end: 26,
      range: [20, 26],
      loc: {
        start: {
          line: 1,
          column: 20
        },
        end: {
          line: 1,
          column: 26
        }
      }
    },
    body: {
      start: 26,
      end: 26,
      range: [26, 26],
      loc: {
        start: {
          line: 1,
          column: 26
        },
        end: {
          line: 1,
          column: 26
        }
      }
    },
    start: 0,
    end: 26,
    range: [0, 26],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 26
      }
    }
  });
  testAstLocationData('class Klass then constructor: ->', {
    type: 'ClassDeclaration',
    id: {
      start: 6,
      end: 11,
      range: [6, 11],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 11
        }
      }
    },
    body: {
      body: [
        {
          key: {
            start: 17,
            end: 28,
            range: [17,
        28],
            loc: {
              start: {
                line: 1,
                column: 17
              },
              end: {
                line: 1,
                column: 28
              }
            }
          },
          start: 17,
          end: 32,
          range: [17,
        32],
          loc: {
            start: {
              line: 1,
              column: 17
            },
            end: {
              line: 1,
              column: 32
            }
          }
        }
      ],
      start: 12,
      end: 32,
      range: [12, 32],
      loc: {
        start: {
          line: 1,
          column: 12
        },
        end: {
          line: 1,
          column: 32
        }
      }
    },
    start: 0,
    end: 32,
    range: [0, 32],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 32
      }
    }
  });
  testAstLocationData('a = class A\n  b: ->\n    c', {
    type: 'AssignmentExpression',
    right: {
      id: {
        start: 10,
        end: 11,
        range: [10, 11],
        loc: {
          start: {
            line: 1,
            column: 10
          },
          end: {
            line: 1,
            column: 11
          }
        }
      },
      body: {
        body: [
          {
            key: {
              start: 14,
              end: 15,
              range: [14,
          15],
              loc: {
                start: {
                  line: 2,
                  column: 2
                },
                end: {
                  line: 2,
                  column: 3
                }
              }
            },
            body: {
              body: [
                {
                  start: 24,
                  end: 25,
                  range: [24,
                25],
                  loc: {
                    start: {
                      line: 3,
                      column: 4
                    },
                    end: {
                      line: 3,
                      column: 5
                    }
                  }
                }
              ],
              start: 20,
              end: 25,
              range: [20,
          25],
              loc: {
                start: {
                  line: 3,
                  column: 0
                },
                end: {
                  line: 3,
                  column: 5
                }
              }
            },
            start: 14,
            end: 25,
            range: [14,
          25],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 3,
                column: 5
              }
            }
          }
        ],
        start: 12,
        end: 25,
        range: [12, 25],
        loc: {
          start: {
            line: 2,
            column: 0
          },
          end: {
            line: 3,
            column: 5
          }
        }
      },
      start: 4,
      end: 25,
      range: [4, 25],
      loc: {
        start: {
          line: 1,
          column: 4
        },
        end: {
          line: 3,
          column: 5
        }
      }
    },
    start: 0,
    end: 25,
    range: [0, 25],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 5
      }
    }
  });
  testAstLocationData('class A\n  @b: ->\n  @c = ->\n  @d: 1\n  @e = 2\n  A.f = 3\n  A.g = ->\n  this.h = ->\n  this.i = 4', {
    type: 'ClassDeclaration',
    id: {
      start: 6,
      end: 7,
      range: [6, 7],
      loc: {
        start: {
          line: 1,
          column: 6
        },
        end: {
          line: 1,
          column: 7
        }
      }
    },
    body: {
      body: [
        {
          key: {
            start: 11,
            end: 12,
            range: [11,
        12],
            loc: {
              start: {
                line: 2,
                column: 3
              },
              end: {
                line: 2,
                column: 4
              }
            }
          },
          staticClassName: {
            start: 10,
            end: 11,
            range: [10,
        11],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 3
              }
            }
          },
          start: 10,
          end: 16,
          range: [10,
        16],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 8
            }
          }
        },
        {
          key: {
            start: 20,
            end: 21,
            range: [20,
        21],
            loc: {
              start: {
                line: 3,
                column: 3
              },
              end: {
                line: 3,
                column: 4
              }
            }
          },
          staticClassName: {
            start: 19,
            end: 20,
            range: [19,
        20],
            loc: {
              start: {
                line: 3,
                column: 2
              },
              end: {
                line: 3,
                column: 3
              }
            }
          },
          start: 19,
          end: 26,
          range: [19,
        26],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 9
            }
          }
        },
        {
          key: {
            start: 30,
            end: 31,
            range: [30,
        31],
            loc: {
              start: {
                line: 4,
                column: 3
              },
              end: {
                line: 4,
                column: 4
              }
            }
          },
          staticClassName: {
            start: 29,
            end: 30,
            range: [29,
        30],
            loc: {
              start: {
                line: 4,
                column: 2
              },
              end: {
                line: 4,
                column: 3
              }
            }
          },
          value: {
            start: 33,
            end: 34,
            range: [33,
        34],
            loc: {
              start: {
                line: 4,
                column: 6
              },
              end: {
                line: 4,
                column: 7
              }
            }
          },
          start: 29,
          end: 34,
          range: [29,
        34],
          loc: {
            start: {
              line: 4,
              column: 2
            },
            end: {
              line: 4,
              column: 7
            }
          }
        },
        {
          key: {
            start: 38,
            end: 39,
            range: [38,
        39],
            loc: {
              start: {
                line: 5,
                column: 3
              },
              end: {
                line: 5,
                column: 4
              }
            }
          },
          staticClassName: {
            start: 37,
            end: 38,
            range: [37,
        38],
            loc: {
              start: {
                line: 5,
                column: 2
              },
              end: {
                line: 5,
                column: 3
              }
            }
          },
          value: {
            start: 42,
            end: 43,
            range: [42,
        43],
            loc: {
              start: {
                line: 5,
                column: 7
              },
              end: {
                line: 5,
                column: 8
              }
            }
          },
          start: 37,
          end: 43,
          range: [37,
        43],
          loc: {
            start: {
              line: 5,
              column: 2
            },
            end: {
              line: 5,
              column: 8
            }
          }
        },
        {
          key: {
            start: 48,
            end: 49,
            range: [48,
        49],
            loc: {
              start: {
                line: 6,
                column: 4
              },
              end: {
                line: 6,
                column: 5
              }
            }
          },
          staticClassName: {
            start: 46,
            end: 47,
            range: [46,
        47],
            loc: {
              start: {
                line: 6,
                column: 2
              },
              end: {
                line: 6,
                column: 3
              }
            }
          },
          value: {
            start: 52,
            end: 53,
            range: [52,
        53],
            loc: {
              start: {
                line: 6,
                column: 8
              },
              end: {
                line: 6,
                column: 9
              }
            }
          },
          start: 46,
          end: 53,
          range: [46,
        53],
          loc: {
            start: {
              line: 6,
              column: 2
            },
            end: {
              line: 6,
              column: 9
            }
          }
        },
        {
          key: {
            start: 58,
            end: 59,
            range: [58,
        59],
            loc: {
              start: {
                line: 7,
                column: 4
              },
              end: {
                line: 7,
                column: 5
              }
            }
          },
          staticClassName: {
            start: 56,
            end: 57,
            range: [56,
        57],
            loc: {
              start: {
                line: 7,
                column: 2
              },
              end: {
                line: 7,
                column: 3
              }
            }
          },
          start: 56,
          end: 64,
          range: [56,
        64],
          loc: {
            start: {
              line: 7,
              column: 2
            },
            end: {
              line: 7,
              column: 10
            }
          }
        },
        {
          key: {
            start: 72,
            end: 73,
            range: [72,
        73],
            loc: {
              start: {
                line: 8,
                column: 7
              },
              end: {
                line: 8,
                column: 8
              }
            }
          },
          staticClassName: {
            start: 67,
            end: 71,
            range: [67,
        71],
            loc: {
              start: {
                line: 8,
                column: 2
              },
              end: {
                line: 8,
                column: 6
              }
            }
          },
          start: 67,
          end: 78,
          range: [67,
        78],
          loc: {
            start: {
              line: 8,
              column: 2
            },
            end: {
              line: 8,
              column: 13
            }
          }
        },
        {
          key: {
            start: 86,
            end: 87,
            range: [86,
        87],
            loc: {
              start: {
                line: 9,
                column: 7
              },
              end: {
                line: 9,
                column: 8
              }
            }
          },
          staticClassName: {
            start: 81,
            end: 85,
            range: [81,
        85],
            loc: {
              start: {
                line: 9,
                column: 2
              },
              end: {
                line: 9,
                column: 6
              }
            }
          },
          value: {
            start: 90,
            end: 91,
            range: [90,
        91],
            loc: {
              start: {
                line: 9,
                column: 11
              },
              end: {
                line: 9,
                column: 12
              }
            }
          },
          start: 81,
          end: 91,
          range: [81,
        91],
          loc: {
            start: {
              line: 9,
              column: 2
            },
            end: {
              line: 9,
              column: 12
            }
          }
        }
      ],
      start: 8,
      end: 91,
      range: [8, 91],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 9,
          column: 12
        }
      }
    },
    start: 0,
    end: 91,
    range: [0, 91],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 9,
        column: 12
      }
    }
  });
  testAstLocationData('class A\n  b: 1\n  [c]: 2', {
    type: 'ClassDeclaration',
    body: {
      body: [
        {
          key: {
            start: 10,
            end: 11,
            range: [10,
        11],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 3
              }
            }
          },
          value: {
            start: 13,
            end: 14,
            range: [13,
        14],
            loc: {
              start: {
                line: 2,
                column: 5
              },
              end: {
                line: 2,
                column: 6
              }
            }
          },
          start: 10,
          end: 14,
          range: [10,
        14],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 6
            }
          }
        },
        {
          key: {
            start: 18,
            end: 19,
            range: [18,
        19],
            loc: {
              start: {
                line: 3,
                column: 3
              },
              end: {
                line: 3,
                column: 4
              }
            }
          },
          value: {
            start: 22,
            end: 23,
            range: [22,
        23],
            loc: {
              start: {
                line: 3,
                column: 7
              },
              end: {
                line: 3,
                column: 8
              }
            }
          },
          start: 17,
          end: 23,
          range: [17,
        23],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 8
            }
          }
        }
      ],
      start: 8,
      end: 23,
      range: [8, 23],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 8
        }
      }
    },
    start: 0,
    end: 23,
    range: [0, 23],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 8
      }
    }
  });
  testAstLocationData('class A\n  @[b]: 1\n  @[c]: ->', {
    type: 'ClassDeclaration',
    body: {
      body: [
        {
          key: {
            start: 12,
            end: 13,
            range: [12,
        13],
            loc: {
              start: {
                line: 2,
                column: 4
              },
              end: {
                line: 2,
                column: 5
              }
            }
          },
          staticClassName: {
            start: 10,
            end: 11,
            range: [10,
        11],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 3
              }
            }
          },
          value: {
            start: 16,
            end: 17,
            range: [16,
        17],
            loc: {
              start: {
                line: 2,
                column: 8
              },
              end: {
                line: 2,
                column: 9
              }
            }
          },
          start: 10,
          end: 17,
          range: [10,
        17],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 9
            }
          }
        },
        {
          key: {
            start: 22,
            end: 23,
            range: [22,
        23],
            loc: {
              start: {
                line: 3,
                column: 4
              },
              end: {
                line: 3,
                column: 5
              }
            }
          },
          staticClassName: {
            start: 20,
            end: 21,
            range: [20,
        21],
            loc: {
              start: {
                line: 3,
                column: 2
              },
              end: {
                line: 3,
                column: 3
              }
            }
          },
          start: 20,
          end: 28,
          range: [20,
        28],
          loc: {
            start: {
              line: 3,
              column: 2
            },
            end: {
              line: 3,
              column: 10
            }
          }
        }
      ],
      start: 8,
      end: 28,
      range: [8, 28],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 10
        }
      }
    },
    start: 0,
    end: 28,
    range: [0, 28],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 10
      }
    }
  });
  return testAstLocationData('class A\n  b = 1', {
    type: 'ClassDeclaration',
    body: {
      body: [
        {
          expression: {
            left: {
              start: 10,
              end: 11,
              range: [10,
        11],
              loc: {
                start: {
                  line: 2,
                  column: 2
                },
                end: {
                  line: 2,
                  column: 3
                }
              }
            },
            right: {
              start: 14,
              end: 15,
              range: [14,
        15],
              loc: {
                start: {
                  line: 2,
                  column: 6
                },
                end: {
                  line: 2,
                  column: 7
                }
              }
            },
            start: 10,
            end: 15,
            range: [10,
        15],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 7
              }
            }
          },
          start: 10,
          end: 15,
          range: [10,
        15],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 7
            }
          }
        }
      ],
      start: 8,
      end: 15,
      range: [8, 15],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 7
        }
      }
    },
    start: 0,
    end: 15,
    range: [0, 15],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 2,
        column: 7
      }
    }
  });
}

[0;31m  AST location data as expected for directives[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected AST node type [0mundefined[0;31m to equal [0mFile[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at testSingleNodeLocationData (<anonymous>:1:1)
    at testAstNodeLocationData (<anonymous>:1:1)
    at testAstRootLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  testAstRootLocationData('\'directive 1\'\n\'use strict\'\nf()', {
    type: 'File',
    program: {
      body: [
        {
          start: 27,
          end: 30,
          range: [27,
        30],
          loc: {
            start: {
              line: 3,
              column: 0
            },
            end: {
              line: 3,
              column: 3
            }
          }
        }
      ],
      directives: [
        {
          start: 0,
          end: 13,
          range: [0,
        13],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 13
            }
          }
        },
        {
          start: 14,
          end: 26,
          range: [14,
        26],
          loc: {
            start: {
              line: 2,
              column: 0
            },
            end: {
              line: 2,
              column: 12
            }
          }
        }
      ],
      start: 0,
      end: 30,
      range: [0, 30],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 3,
          column: 3
        }
      }
    },
    start: 0,
    end: 30,
    range: [0, 30],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 3
      }
    }
  });
  testAstRootLocationData('\'use strict\'', {
    type: 'File',
    program: {
      directives: [
        {
          start: 0,
          end: 12,
          range: [0,
        12],
          loc: {
            start: {
              line: 1,
              column: 0
            },
            end: {
              line: 1,
              column: 12
            }
          }
        }
      ],
      start: 0,
      end: 12,
      range: [0, 12],
      loc: {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 12
        }
      }
    },
    start: 0,
    end: 12,
    range: [0, 12],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 1,
        column: 12
      }
    }
  });
  testAstLocationData('->\n  \'use strict\'\n  f()\n  \'not a directive\'\n  g', {
    type: 'FunctionExpression',
    body: {
      directives: [
        {
          value: {
            start: 5,
            end: 17,
            range: [5,
        17],
            loc: {
              start: {
                line: 2,
                column: 2
              },
              end: {
                line: 2,
                column: 14
              }
            }
          },
          start: 5,
          end: 17,
          range: [5,
        17],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 14
            }
          }
        }
      ],
      start: 3,
      end: 47,
      range: [3, 47],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      }
    },
    start: 0,
    end: 47,
    range: [0, 47],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 5,
        column: 3
      }
    }
  });
  return testAstLocationData('class A\n  \'classes can have directives too\'\n  a: ->', {
    type: 'ClassDeclaration',
    body: {
      directives: [
        {
          start: 10,
          end: 43,
          range: [10,
        43],
          loc: {
            start: {
              line: 2,
              column: 2
            },
            end: {
              line: 2,
              column: 35
            }
          }
        }
      ],
      start: 8,
      end: 51,
      range: [8, 51],
      loc: {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 3,
          column: 7
        }
      }
    },
    start: 0,
    end: 51,
    range: [0, 51],
    loc: {
      start: {
        line: 1,
        column: 0
      },
      end: {
        line: 3,
        column: 7
      }
    }
  });
}

[0;31m  test/arrays.coffee:299:6: error: unexpected newline
    ,
     ^[0m 

[0;31m  test/classes.coffee:1946:11: error: unexpected :
    @[foo]: 'baz'
          ^[0m 

[0;31m  Block comment in an interpolated string[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m`a${/* Comment */""}b`;[0;31m
  but instead it was:
[0m[0;33m`a${/* Comment */''}b`;[0m[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  eqJS('"a#{### Comment ###}b"', '`a${/* Comment */""}b`;');
  return eqJS('"a#{### 1 ###}b#{### 2 ###}c"', '`a${/* 1 */""}b${/* 2 */""}c`;');
}

[0;31m  invalid object keys[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m[stdin]:1:1: error: invalid object key
@[a]: 1
^^^^[0;31m to equal [0m[stdin]:1:5: error: unexpected :
@[a]: 1
    ^[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Object.eval (<anonymous>:1:1)
    at expectedException (assert.js:706:19)
    at expectsError (assert.js:765:16)
    at throws (assert.js:794:3)
    at assertErrorFormat (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
    at Object.CoffeeScript.run (/tmp/coffeescript.js:125:401050)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:747:21
    at finalCallback (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:220:39)
    at hooks.done.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:269:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at emitRecords.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:267:22)
    at Compiler.emitRecords (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:449:39)
    at emitAssets.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:261:10)
    at hooks.afterEmit.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:435:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:432:27)
    at /home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:2813:7
    at done (/home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:3521:9)
    at /home/travis/build/jashkenas/coffeescript/node_modules/graceful-fs/graceful-fs.js:43:10
    at FSReqWrap.oncomplete (fs.js:135:15)
[0m 
  function () {
  assertErrorFormat('@a: 1', '[stdin]:1:1: error: invalid object key\n@a: 1\n^^');
  assertErrorFormat('f\n  @a: 1', '[stdin]:2:3: error: invalid object key\n  @a: 1\n  ^^');
  assertErrorFormat('{a=2}', '[stdin]:1:3: error: unexpected =\n{a=2}\n  ^');
  return assertErrorFormat('@[a]: 1', '[stdin]:1:1: error: invalid object key\n@[a]: 1\n^^^^');
}

[0;31m  JSX error: non-matching tag names[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m[stdin]:1:7: error: expected corresponding JSX closing tag for span
<div><span></div></span>
      ^^^^[0;31m to equal [0m[stdin]:1:7: error: expected corresponding CSX closing tag for span
<div><span></div></span>
      ^^^^[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Object.eval (<anonymous>:1:1)
    at expectedException (assert.js:706:19)
    at expectsError (assert.js:765:16)
    at throws (assert.js:794:3)
    at assertErrorFormat (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
    at Object.CoffeeScript.run (/tmp/coffeescript.js:125:401050)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:747:21
    at finalCallback (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:220:39)
    at hooks.done.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:269:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at emitRecords.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:267:22)
    at Compiler.emitRecords (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:449:39)
    at emitAssets.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:261:10)
    at hooks.afterEmit.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:435:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:432:27)
    at /home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:2813:7
    at done (/home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:3521:9)
    at /home/travis/build/jashkenas/coffeescript/node_modules/graceful-fs/graceful-fs.js:43:10
    at FSReqWrap.oncomplete (fs.js:135:15)
[0m 
  function () {
  return assertErrorFormat('<div><span></div></span>', '[stdin]:1:7: error: expected corresponding JSX closing tag for span\n<div><span></div></span>\n      ^^^^');
}

[0;31m  JSX error: invalid attributes[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m[stdin]:1:12: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.
<div a="b" {props} />
           ^^^^^^^[0;31m to equal [0m[stdin]:1:12: error: Unexpected token. Allowed CSX attributes are: id="val", src={source}, {props...} or attribute.
<div a="b" {props} />
           ^^^^^^^[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Object.eval (<anonymous>:1:1)
    at expectedException (assert.js:706:19)
    at expectsError (assert.js:765:16)
    at throws (assert.js:794:3)
    at assertErrorFormat (<anonymous>:1:1)
    at assertErrorFormatAst (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
    at Object.CoffeeScript.run (/tmp/coffeescript.js:125:401050)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:747:21
    at finalCallback (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:220:39)
    at hooks.done.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:269:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at emitRecords.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:267:22)
    at Compiler.emitRecords (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:449:39)
    at emitAssets.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:261:10)
    at hooks.afterEmit.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:435:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:432:27)
    at /home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:2813:7
    at done (/home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:3521:9)
    at /home/travis/build/jashkenas/coffeescript/node_modules/graceful-fs/graceful-fs.js:43:10
    at FSReqWrap.oncomplete (fs.js:135:15)
[0m 
  function () {
  assertErrorFormatAst('<div a="b" {props} />', '[stdin]:1:12: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div a="b" {props} />\n           ^^^^^^^');
  assertErrorFormatAst('<div a={b} {a:{b}} />', '[stdin]:1:12: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div a={b} {a:{b}} />\n           ^^^^^^^');
  assertErrorFormatAst('<div {"#{a}"} />', '[stdin]:1:6: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div {"#{a}"} />\n     ^^^^^^^^');
  assertErrorFormatAst('<div props... />', '[stdin]:1:11: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div props... />\n          ^^^');
  assertErrorFormatAst('<div {a:"b", props..., c:d()} />', '[stdin]:1:6: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div {a:"b", props..., c:d()} />\n     ^^^^^^^^^^^^^^^^^^^^^^^^');
  return assertErrorFormatAst('<div {props..., a, b} />', '[stdin]:1:6: error: Unexpected token. Allowed JSX attributes are: id="val", src={source}, {props...} or attribute.\n<div {props..., a, b} />\n     ^^^^^^^^^^^^^^^^');
}

[0;31m  #5034: JSX error: Adjacent JSX elements must be wrapped in an enclosing tag[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m[stdin]:3:3: error: Adjacent JSX elements must be wrapped in an enclosing tag
  <Row>b</Row>
  ^^^^^^^^^^^^[0;31m to equal [0m[stdin]:3:4: error: Adjacent JSX elements must be wrapped in an enclosing tag
  <Row>b</Row>
   ^^^^^^^^^^^[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Object.eval (<anonymous>:1:1)
    at expectedException (assert.js:706:19)
    at expectsError (assert.js:765:16)
    at throws (assert.js:794:3)
    at assertErrorFormat (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
    at Object.CoffeeScript.run (/tmp/coffeescript.js:125:401050)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:747:21
    at finalCallback (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:220:39)
    at hooks.done.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:269:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at emitRecords.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:267:22)
    at Compiler.emitRecords (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:449:39)
    at emitAssets.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:261:10)
    at hooks.afterEmit.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:435:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:432:27)
    at /home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:2813:7
    at done (/home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:3521:9)
    at /home/travis/build/jashkenas/coffeescript/node_modules/graceful-fs/graceful-fs.js:43:10
    at FSReqWrap.oncomplete (fs.js:135:15)
[0m 
  function () {
  assertErrorFormat('render = -> (\n  <Row>a</Row>\n  <Row>b</Row>\n)', '[stdin]:3:3: error: Adjacent JSX elements must be wrapped in an enclosing tag\n  <Row>b</Row>\n  ^^^^^^^^^^^^');
  return assertErrorFormat('render = -> (\n  a = "foo"\n  <Row>a</Row>\n  <Row>b</Row>\n)', '[stdin]:4:3: error: Adjacent JSX elements must be wrapped in an enclosing tag\n  <Row>b</Row>\n  ^^^^^^^^^^^^');
}

[0;31m  `new.target` cannot be assigned[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m[stdin]:2:14: error: unexpected =
  new.target = b
             ^[0;31m to equal [0mReferenceError: Invalid left-hand side in assignment[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Object.eval (<anonymous>:1:1)
    at expectedException (assert.js:706:19)
    at expectsError (assert.js:765:16)
    at throws (assert.js:794:3)
    at assertErrorFormat (<anonymous>:1:1)
    at assertErrorFormatAst (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
    at Object.CoffeeScript.run (/tmp/coffeescript.js:125:401050)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:747:21
    at finalCallback (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:220:39)
    at hooks.done.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:269:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at emitRecords.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:267:22)
    at Compiler.emitRecords (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:449:39)
    at emitAssets.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:261:10)
    at hooks.afterEmit.callAsync.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:435:14)
    at AsyncSeriesHook.eval [as callAsync] (<anonymous>:1:1)
    at AsyncSeriesHook.lazyCompileHook (/home/travis/build/jashkenas/coffeescript/node_modules/tapable/lib/Hook.js:154:20)
    at asyncLib.forEachLimit.err (/home/travis/build/jashkenas/coffeescript/node_modules/webpack/lib/Compiler.js:432:27)
    at /home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:2813:7
    at done (/home/travis/build/jashkenas/coffeescript/node_modules/neo-async/async.js:3521:9)
    at /home/travis/build/jashkenas/coffeescript/node_modules/graceful-fs/graceful-fs.js:43:10
    at FSReqWrap.oncomplete (fs.js:135:15)
[0m 
  function () {
  return assertErrorFormatAst('->\n  new.target = b', '[stdin]:2:14: error: unexpected =\n  new.target = b\n             ^');
}

[0;31m  test/formatting.coffee:478:1: error: unexpected indentation
    if yes
^^^^[0m 

[0;31m  test/functions.coffee:502:10: error: unexpected ]
  a = [->]
         ^[0m 

[0;31m  object attribute[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m<div x={{
  y: 42
}} />;[0;31m
  but instead it was:
[0m<div x={{
[0;33m    y: 42[0m
[0;33m  }} />;[0m[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('<div x={{y: 42}} />', '<div x={{\n  y: 42\n}} />;');
}

[0;31m  nested JSX within an attribute, with object attr value[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m<Company>
  <Person name={<NameComponent attr3={{
  'a': {},
  b: '{'
}} />} />
</Company>;[0;31m
  but instead it was:
[0m<Company>
  <Person name={<NameComponent attr3={{
[0;33m      'a': {},[0m
[0;33m      b: '{'[0m
[0;33m    }} />} />[0m
</Company>;[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('<Company>\n  <Person name={<NameComponent attr3={ {\'a\': {}, b: \'{\'} } />} />\n</Company>', '<Company>\n  <Person name={<NameComponent attr3={{\n  \'a\': {},\n  b: \'{\'\n}} />} />\n</Company>;');
}

[0;31m  complex nesting[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m<div code={someFunc({
  a: {
    b: {},
    C: '}{}{'
  }
})} />;[0;31m
  but instead it was:
[0m<div code={someFunc({
[0;33m    a: {[0m
[0;33m      b: {},[0m
[0;33m      C: '}{}{'[0m
[0;33m    }[0m
[0;33m  })} />;[0m[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('<div code={someFunc({a:{b:{}, C:\'}{}{\'}})} />', '<div code={someFunc({\n  a: {\n    b: {},\n    C: \'}{}{\'\n  }\n})} />;');
}

[0;31m  heregex[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0mvar REGEX, test;

test = /432/gm; // this is a regex

6 / 432 / gm; // this is division

<Tag>
{test = /<Tag>/} this is a regex containing something which looks like a tag
</Tag>;

<Person />;

REGEX = /^(\/(?![s=])[^[\/ ]*(?:<Tag\/>(?:\[sS]|[[^] ]*(?:\[sS][^] ]*)*<Tag>tag<\/Tag>])[^[\/ ]*)*\/)([imgy]{0,4})(?!w)/; // comment comment <comment>comment</comment>
// comment comment
// comment comment
// comment comment

<Person />;[0;31m
  but instead it was:
[0mvar REGEX, test;

test = /432/gm; // this is a regex

6 / 432 / gm; // this is division

<Tag>
[0;33m{(test = /<Tag>/)} this is a regex containing something which looks like a tag[0m
</Tag>;

<Person />;

REGEX = /^(\/(?![s=])[^[\/ ]*(?:<Tag\/>(?:\[sS]|[[^] ]*(?:\[sS][^] ]*)*<Tag>tag<\/Tag>])[^[\/ ]*)*\/)([imgy]{0,4})(?!w)/; // comment comment <comment>comment</comment>
// comment comment
// comment comment
// comment comment

<Person />;[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('test = /432/gm # this is a regex\n6 /432/gm # this is division\n<Tag>\n{test = /<Tag>/} this is a regex containing something which looks like a tag\n</Tag>\n<Person />\nREGEX = /// ^\n  (/ (?! [\s=] )   # comment comment <comment>comment</comment>\n  [^ [ / \n \\ ]*  # comment comment\n  (?:\n    <Tag />\n    (?: \\[\s\S]   # comment comment\n      | \[         # comment comment\n           [^ \] \n \\ ]*\n           (?: \\[\s\S] [^ \] \n \\ ]* )*\n           <Tag>tag</Tag>\n         ]\n    ) [^ [ / \n \\ ]*\n  )*\n  /) ([imgy]{0,4}) (?!\w)\n///\n<Person />', 'var REGEX, test;\n\ntest = /432/gm; // this is a regex\n\n6 / 432 / gm; // this is division\n\n<Tag>\n{test = /<Tag>/} this is a regex containing something which looks like a tag\n</Tag>;\n\n<Person />;\n\nREGEX = /^(\\/(?![s=])[^[\\/ ]*(?:<Tag\\/>(?:\\[sS]|[[^] ]*(?:\\[sS][^] ]*)*<Tag>tag<\\/Tag>])[^[\\/ ]*)*\\/)([imgy]{0,4})(?!w)/; // comment comment <comment>comment</comment>\n// comment comment\n// comment comment\n// comment comment\n\n<Person />;');
}

[0;31m  tag with {{}}[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m<Person name={{
  value: item,
  key,
  item
}} />;[0;31m
  but instead it was:
[0m<Person name={{
[0;33m    value: item,[0m
[0;33m    key,[0m
[0;33m    item[0m
[0;33m  }} />;[0m[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('<Person name={{value: item, key, item}} />', '<Person name={{\n  value: item,\n  key,\n  item\n}} />;');
}

[0;31m  complex multiline spread attribute[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected generated JavaScript to be:
[0m<Component {...y} a={b} {...x} b="c" {...z}>
  <div code={someFunc({
  a: {
    b: {},
    C: '}'
  }
})} />
</Component>;[0;31m
  but instead it was:
[0m<Component {...y} a={b} {...x} b="c" {...z}>
  <div code={someFunc({
[0;33m    a: {[0m
[0;33m      b: {},[0m
[0;33m      C: '}'[0m
[0;33m    }[0m
[0;33m  })} />[0m
</Component>;[0;31m
    at exports.eqJS (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  return eqJS('<Component\n  {y...\n  } a={b} {x...} b="c" {z...}>\n  <div code={someFunc({a:{b:{}, C:\'}\'}})} />\n</Component>', '<Component {...y} a={b} {...x} b="c" {...z}>\n  <div code={someFunc({\n  a: {\n    b: {},\n    C: \'}\'\n  }\n})} />\n</Component>;');
}

[0;31m  Verify locations in string interpolation (in "string")[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m0[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"a#{b}c"', '"a"', 'b', '"c"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 1);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 1);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 0);
  eq(b[2].last_column, 4);
  eq(c[2].first_line, 0);
  eq(c[2].first_column, 6);
  eq(c[2].last_line, 0);
  return eq(c[2].last_column, 6);
}

[0;31m  Verify locations in string interpolation (in "string", multiple interpolation and line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"#{a}\nb\n#{c}"', 'a', '"\nb\n"', 'c');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 3);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 5);
  eq(b[2].last_line, 1);
  eq(b[2].last_column, 1);
  eq(c[2].first_line, 2);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 2);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in "string", multiple interpolation and starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"\n#{a}\nb\n#{c}"', 'a', '"\nb\n"', 'c');
  eq(a[2].first_line, 1);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 1);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 1);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 2);
  eq(b[2].last_column, 1);
  eq(c[2].first_line, 3);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 3);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in "string", multiple interpolation and starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"\n\n#{a}\n\nb\n\n#{c}"', 'a', '"\n\nb\n\n"', 'c');
  eq(a[2].first_line, 2);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 2);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 2);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 5);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 6);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 6);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in "string", multiple interpolation and starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"\n\n\n#{a}\n\n\nb\n\n\n#{c}"', 'a', '"\n\n\nb\n\n\n"', 'c');
  eq(a[2].first_line, 3);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 3);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 3);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 8);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 9);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 9);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in """string""", line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m0[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"""a\n#{b}\nc"""', '"a\n"', 'b', '"\nc"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 4);
  eq(b[2].first_line, 1);
  eq(b[2].first_column, 2);
  eq(b[2].last_line, 1);
  eq(b[2].last_column, 2);
  eq(c[2].first_line, 1);
  eq(c[2].first_column, 4);
  eq(c[2].last_line, 2);
  return eq(c[2].last_column, 0);
}

[0;31m  Verify locations in string interpolation (in """string""", starting with a line break)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m2[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var b, c;
  [b, c] = getMatchingTokens('"""\n#{b}\nc"""', 'b', '"\nc"');
  eq(b[2].first_line, 1);
  eq(b[2].first_column, 2);
  eq(b[2].last_line, 1);
  eq(b[2].last_column, 2);
  eq(c[2].first_line, 1);
  eq(c[2].first_column, 4);
  eq(c[2].last_line, 2);
  return eq(c[2].last_column, 0);
}

[0;31m  Verify locations in string interpolation (in """string""", starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m0[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"""\n\n#{b}\nc"""', '"\n\n"', 'b', '"\nc"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 1);
  eq(a[2].last_column, 0);
  eq(b[2].first_line, 2);
  eq(b[2].first_column, 2);
  eq(b[2].last_line, 2);
  eq(b[2].last_column, 2);
  eq(c[2].first_line, 2);
  eq(c[2].first_column, 4);
  eq(c[2].last_line, 3);
  return eq(c[2].last_column, 0);
}

[0;31m  Verify locations in string interpolation (in """string""", multiple interpolation)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"""#{a}\nb\n#{c}"""', 'a', '"\nb\n"', 'c');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 5);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 5);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 7);
  eq(b[2].last_line, 1);
  eq(b[2].last_column, 1);
  eq(c[2].first_line, 2);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 2);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in """string""", multiple interpolation, and starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"""\n\n#{a}\n\nb\n\n#{c}"""', 'a', '"\n\nb\n\n"', 'c');
  eq(a[2].first_line, 2);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 2);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 2);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 5);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 6);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 6);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in string interpolation (in """string""", multiple interpolation, and starting with line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('"""\n\n\n#{a}\n\n\nb\n\n\n#{c}"""', 'a', '"\n\n\nb\n\n\n"', 'c');
  eq(a[2].first_line, 3);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 3);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 3);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 8);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 9);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 9);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m0[0;31m to equal [0m3[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///a#{b}c///', '"a"', 'b', '"c"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 3);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 6);
  eq(b[2].last_line, 0);
  eq(b[2].last_column, 6);
  eq(c[2].first_line, 0);
  eq(c[2].first_column, 8);
  eq(c[2].last_line, 0);
  return eq(c[2].last_column, 8);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///#{a}\nb\n#{c}///', 'a', '"\nb\n"', 'c');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 5);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 5);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 7);
  eq(b[2].last_line, 1);
  eq(b[2].last_column, 1);
  eq(c[2].first_line, 2);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 2);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///#{a}\n\n\nb\n\n\n#{c}///', 'a', '"\n\n\nb\n\n\n"', 'c');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 5);
  eq(a[2].last_line, 0);
  eq(a[2].last_column, 5);
  eq(b[2].first_line, 0);
  eq(b[2].first_column, 7);
  eq(b[2].last_line, 5);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 6);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 6);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m0[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///a\n\n\n#{b}\n\n\nc///', '"a\n\n\n"', 'b', '"\n\n\nc"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 2);
  eq(a[2].last_column, 0);
  eq(b[2].first_line, 3);
  eq(b[2].first_column, 2);
  eq(b[2].last_line, 3);
  eq(b[2].last_column, 2);
  eq(c[2].first_line, 3);
  eq(c[2].first_column, 4);
  eq(c[2].last_line, 6);
  return eq(c[2].last_column, 0);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks and starting with linebreak)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///\n#{a}\nb\n#{c}///', 'a', '"\nb\n"', 'c');
  eq(a[2].first_line, 1);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 1);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 1);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 2);
  eq(b[2].last_column, 1);
  eq(c[2].first_line, 3);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 3);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks and starting with linebreak)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///\n\n\n#{a}\n\n\nb\n\n\n#{c}///', 'a', '"\n\n\nb\n\n\n"', 'c');
  eq(a[2].first_line, 3);
  eq(a[2].first_column, 2);
  eq(a[2].last_line, 3);
  eq(a[2].last_column, 2);
  eq(b[2].first_line, 3);
  eq(b[2].first_column, 4);
  eq(b[2].last_line, 8);
  eq(b[2].last_column, 0);
  eq(c[2].first_line, 9);
  eq(c[2].first_column, 2);
  eq(c[2].last_line, 9);
  return eq(c[2].last_column, 2);
}

[0;31m  Verify locations in heregex interpolation (in ///regex///, multiple interpolation and line breaks and starting with linebreak)[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m3[0;31m to equal [0m0[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at getMatchingTokens (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var a, b, c;
  [a, b, c] = getMatchingTokens('///\n\n\na\n\n\n#{b}\n\n\nc///', '"\n\n\na\n\n\n"', 'b', '"\n\n\nc"');
  eq(a[2].first_line, 0);
  eq(a[2].first_column, 3);
  eq(a[2].last_line, 5);
  eq(a[2].last_column, 0);
  eq(b[2].first_line, 6);
  eq(b[2].first_column, 2);
  eq(b[2].last_line, 6);
  eq(b[2].last_column, 2);
  eq(c[2].first_line, 6);
  eq(c[2].first_column, 4);
  eq(c[2].last_line, 9);
  return eq(c[2].last_column, 0);
}

[0;31m  Verify heregexes with interpolations have the right ending position[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0mundefined[0;31m to equal [0m12[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at assertColumn (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var arrayEnd, arrayEndColumn, assertColumn, comma, flagsString, fnCallEnd, j, k, l, len, len1, len2, ref, ref1, ref2, ref3, regexCallEnd, regexEnd, source, stringEnd, terminator, token;
  source = '[a ///#{b}///g]';
  ref = CoffeeScript.tokens(source), [stringEnd, comma, flagsString, regexCallEnd, regexEnd, fnCallEnd, arrayEnd, terminator] = slice.call(ref, -8);
  eq(comma[0], ',');
  eq(arrayEnd[0], ']');
  assertColumn = function(token, column, width = 0) {
    eq(token[2].first_line, 0);
    eq(token[2].first_column, column);
    eq(token[2].last_line, 0);
    eq(token[2].last_column, column);
    return eq(token[2].last_column_exclusive, column + width);
  };
  arrayEndColumn = arrayEnd[2].first_column;
  ref1 = [comma];
  for (j = 0, len = ref1.length; j < len; j++) {
    token = ref1[j];
    assertColumn(token, arrayEndColumn - 2);
  }
  ref2 = [flagsString];
  for (k = 0, len1 = ref2.length; k < len1; k++) {
    token = ref2[k];
    assertColumn(token, arrayEndColumn - 2, 1);
  }
  ref3 = [regexCallEnd, regexEnd, fnCallEnd];
  for (l = 0, len2 = ref3.length; l < len2; l++) {
    token = ref3[l];
    assertColumn(token, arrayEndColumn);
  }
  return assertColumn(arrayEnd, arrayEndColumn, 1);
}

[0;31m  StringWithInterpolations::fromStringLiteral() assigns correct location to tagged template literal[0m 
[0;31m  AssertionError [ERR_ASSERTION]: Expected [0m0[0;31m to equal [0m1[0;31m
    at exports.eq (/home/travis/build/jashkenas/coffeescript/test/support/helpers.coffee:1:1)
    at checkLocationData (<anonymous>:1:1)
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var checkLocationData;
  checkLocationData = function(source, {stringWithInterpolationsLocationData, stringLocationData}) {
    var block, body, field, j, len, ref, results, string, stringValue, stringWithInterpolations, taggedTemplateLiteral;
    block = CoffeeScript.nodes(source);
    taggedTemplateLiteral = block.expressions[0].unwrap();
    ({
      args: [stringWithInterpolations]
    } = taggedTemplateLiteral);
    ({body} = stringWithInterpolations);
    ({
      expressions: [stringValue]
    } = body);
    string = stringValue.unwrap();
    ref = ['first_line', 'first_column', 'last_line', 'last_column', 'last_line_exclusive', 'last_column_exclusive'];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      field = ref[j];
      eq(stringWithInterpolations.locationData[field], stringWithInterpolationsLocationData[field]);
      eq(stringValue.locationData[field], stringLocationData[field]);
      results.push(eq(string.locationData[field], stringLocationData[field]));
    }
    return results;
  };
  checkLocationData('a"b"', {
    stringWithInterpolationsLocationData: {
      first_line: 0,
      first_column: 1,
      last_line: 0,
      last_column: 3,
      last_line_exclusive: 0,
      last_column_exclusive: 4
    },
    stringLocationData: {
      first_line: 0,
      first_column: 2,
      last_line: 0,
      last_column: 2,
      last_line_exclusive: 0,
      last_column_exclusive: 3
    }
  });
  checkLocationData('a"""\n  b\n"""', {
    stringWithInterpolationsLocationData: {
      first_line: 0,
      first_column: 1,
      last_line: 2,
      last_column: 2,
      last_line_exclusive: 2,
      last_column_exclusive: 3
    },
    stringLocationData: {
      first_line: 0,
      first_column: 4,
      last_line: 1,
      last_column: 3,
      last_line_exclusive: 2,
      last_column_exclusive: 0
    }
  });
  return checkLocationData('a"""b\n"""', {
    stringWithInterpolationsLocationData: {
      first_line: 0,
      first_column: 1,
      last_line: 1,
      last_column: 2,
      last_line_exclusive: 1,
      last_column_exclusive: 3
    },
    stringLocationData: {
      first_line: 0,
      first_column: 4,
      last_line: 0,
      last_column: 5,
      last_line_exclusive: 1,
      last_column_exclusive: 0
    }
  });
}

[0;31m  test/object_rest_spread.coffee:437:1: error: unexpected indentation
      if yes
^^^^^^[0m 

[0;31m  new calls have a range including the new[0m 
[0;31m  TypeError: Cannot read property 'variable' of undefined
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var assertColumnRange, assign, block, innerCall, innerValue, outerCall, source;
  source = 'a = new B().c(d)';
  block = CoffeeScript.nodes(source);
  assertColumnRange = function(node, firstColumn, lastColumn) {
    eq(node.locationData.first_line, 0);
    eq(node.locationData.first_column, firstColumn);
    eq(node.locationData.last_line, 0);
    return eq(node.locationData.last_column, lastColumn);
  };
  [assign] = block.expressions;
  outerCall = assign.value.base;
  innerValue = outerCall.variable;
  innerCall = innerValue.base;
  assertColumnRange(assign, 0, 15);
  assertColumnRange(outerCall, 4, 15);
  assertColumnRange(innerValue, 4, 12);
  return assertColumnRange(innerCall, 4, 10);
}

[0;31m  location data is properly set for nested `new`[0m 
[0;31m  TypeError: Cannot read property 'variable' of undefined
    at Function.eval (<anonymous>:1:1)
    at global.test (/home/travis/build/jashkenas/coffeescript/Cakefile:594:21)
    at eval (<anonymous>:1:1)
[0m 
  function () {
  var assertColumnRange, block, innerCall, outerCall, source;
  source = 'new new A()()';
  block = CoffeeScript.nodes(source);
  assertColumnRange = function(node, firstColumn, lastColumn) {
    eq(node.locationData.first_line, 0);
    eq(node.locationData.first_column, firstColumn);
    eq(node.locationData.last_line, 0);
    return eq(node.locationData.last_column, lastColumn);
  };
  [
    {
      base: outerCall
    }
  ] = block.expressions;
  innerCall = outerCall.variable;
  assertColumnRange(outerCall, 0, 12);
  return assertColumnRange(innerCall, 4, 10);
}
travis_time:end:0b6b800b:start=1557482399644622242,finish=1557482409936168837,duration=10291546595[0K[32;1mThe command "node ./bin/cake test:integrations" exited with 0.[0m

travis_time:start:2849452a[0K$ node ./bin/cake build:except-parser
travis_time:end:2849452a:start=1557482409940754215,finish=1557482415865195212,duration=5924440997[0K[32;1mThe command "node ./bin/cake build:except-parser" exited with 0.[0m

travis_time:start:00068d28[0K$ node ./bin/cake build:parser
travis_time:end:00068d28:start=1557482415869801672,finish=1557482445960375583,duration=30090573911[0K[32;1mThe command "node ./bin/cake build:parser" exited with 0.[0m

travis_time:start:003385f5[0K$ node ./bin/cake build:full
(node:5755) UnhandledPromiseRejectionWarning: undefined
(node:5755) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 4)
(node:5755) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
[0;31mfailed 1 and passed 1391 tests in 13.51 seconds[0m[0m 

[0;31m  /home/travis/build/jashkenas/coffeescript/test/strict.coffee:81
    eq("\x008", `\08`);
                  

SyntaxError: Octal escape sequences are not allowed in strict mode.
    at createScript (vm.js:80:10)
    at Object.runInThisContext (vm.js:139:10)
    at Module._compile (module.js:617:28)
    at Object.CoffeeScript.run (/home/travis/build/jashkenas/coffeescript/lib/coffeescript/index.js:67:23)
    at runTests (/home/travis/build/jashkenas/coffeescript/Cakefile:665:22)
    at testBuiltCode (/home/travis/build/jashkenas/coffeescript/Cakefile:162:19)
    at /home/travis/build/jashkenas/coffeescript/Cakefile:73:16
    at ChildProcess.<anonymous> (/home/travis/build/jashkenas/coffeescript/Cakefile:61:16)
    at emitTwo (events.js:126:13)
    at ChildProcess.emit (events.js:214:7)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)
[0m 
travis_time:end:003385f5:start=1557482445965174611,finish=1557482499852146200,duration=53886971589[0K[32;1mThe command "node ./bin/cake build:full" exited with 0.[0m

travis_time:start:2e3806b4[0K$ node ./bin/cake build:browser
travis_time:end:2e3806b4:start=1557482499856758224,finish=1557482530446196007,duration=30589437783[0K[32;1mThe command "node ./bin/cake build:browser" exited with 0.[0m

travis_fold:start:cache.2[0Kstore build cache
travis_time:start:2f69626e[0Ktravis_time:end:2f69626e:start=1557482530453298360,finish=1557482530457902326,duration=4603966[0Ktravis_time:start:0e5782ce[0K[32;1mnothing changed, not updating cache[0m
travis_time:end:0e5782ce:start=1557482530464822107,finish=1557482532346977460,duration=1882155353[0Ktravis_fold:end:cache.2[0K

Done. Your build exited with 1.
